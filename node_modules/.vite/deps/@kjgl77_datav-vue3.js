import {
  Fragment,
  computed,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createStaticVNode,
  createVNode,
  defineComponent,
  getCurrentInstance,
  getCurrentScope,
  h,
  nextTick,
  normalizeClass,
  normalizeStyle,
  onBeforeUnmount,
  onMounted,
  onScopeDispose,
  onUnmounted,
  openBlock,
  popScopeId,
  pushScopeId,
  reactive,
  ref,
  renderList,
  renderSlot,
  resolveDynamicComponent,
  toDisplayString,
  toRef,
  unref,
  useCssVars,
  watch
} from "./chunk-IA5WD4LW.js";
import "./chunk-CSAU5B4Q.js";

// node_modules/@kjgl77/datav-vue3/dist/datav-vue3.es.js
import "/Users/uni/item/see37/node_modules/@kjgl77/datav-vue3/dist/style.css";
var ya = ((e) => (e.transparent = "rgba(0,0,0,0)", e.black = "#000000", e.silver = "#C0C0C0", e.gray = "#808080", e.white = "#FFFFFF", e.maroon = "#800000", e.red = "#FF0000", e.purple = "#800080", e.fuchsia = "#FF00FF", e.green = "#008000", e.lime = "#00FF00", e.olive = "#808000", e.yellow = "#FFFF00", e.navy = "#000080", e.blue = "#0000FF", e.teal = "#008080", e.aqua = "#00FFFF", e.aliceblue = "#f0f8ff", e.antiquewhite = "#faebd7", e.aquamarine = "#7fffd4", e.azure = "#f0ffff", e.beige = "#f5f5dc", e.bisque = "#ffe4c4", e.blanchedalmond = "#ffebcd", e.blueviolet = "#8a2be2", e.brown = "#a52a2a", e.burlywood = "#deb887", e.cadetblue = "#5f9ea0", e.chartreuse = "#7fff00", e.chocolate = "#d2691e", e.coral = "#ff7f50", e.cornflowerblue = "#6495ed", e.cornsilk = "#fff8dc", e.crimson = "#dc143c", e.cyan = "#00ffff", e.darkblue = "#00008b", e.darkcyan = "#008b8b", e.darkgoldenrod = "#b8860b", e.darkgray = "#a9a9a9", e.darkgreen = "#006400", e.darkgrey = "#a9a9a9", e.darkkhaki = "#bdb76b", e.darkmagenta = "#8b008b", e.darkolivegreen = "#556b2f", e.darkorange = "#ff8c00", e.darkorchid = "#9932cc", e.darkred = "#8b0000", e.darksalmon = "#e9967a", e.darkseagreen = "#8fbc8f", e.darkslateblue = "#483d8b", e.darkslategray = "#2f4f4f", e.darkslategrey = "#2f4f4f", e.darkturquoise = "#00ced1", e.darkviolet = "#9400d3", e.deeppink = "#ff1493", e.deepskyblue = "#00bfff", e.dimgray = "#696969", e.dimgrey = "#696969", e.dodgerblue = "#1e90ff", e.firebrick = "#b22222", e.floralwhite = "#fffaf0", e.forestgreen = "#228b22", e.gainsboro = "#dcdcdc", e.ghostwhite = "#f8f8ff", e.gold = "#ffd700", e.goldenrod = "#daa520", e.greenyellow = "#adff2f", e.grey = "#808080", e.honeydew = "#f0fff0", e.hotpink = "#ff69b4", e.indianred = "#cd5c5c", e.indigo = "#4b0082", e.ivory = "#fffff0", e.khaki = "#f0e68c", e.lavender = "#e6e6fa", e.lavenderblush = "#fff0f5", e.lawngreen = "#7cfc00", e.lemonchiffon = "#fffacd", e.lightblue = "#add8e6", e.lightcoral = "#f08080", e.lightcyan = "#e0ffff", e.lightgoldenrodyellow = "#fafad2", e.lightgray = "#d3d3d3", e.lightgreen = "#90ee90", e.lightgrey = "#d3d3d3", e.lightpink = "#ffb6c1", e.lightsalmon = "#ffa07a", e.lightseagreen = "#20b2aa", e.lightskyblue = "#87cefa", e.lightslategray = "#778899", e.lightslategrey = "#778899", e.lightsteelblue = "#b0c4de", e.lightyellow = "#ffffe0", e.limegreen = "#32cd32", e.linen = "#faf0e6", e.magenta = "#ff00ff", e.mediumaquamarine = "#66cdaa", e.mediumblue = "#0000cd", e.mediumorchid = "#ba55d3", e.mediumpurple = "#9370db", e.mediumseagreen = "#3cb371", e.mediumslateblue = "#7b68ee", e.mediumspringgreen = "#00fa9a", e.mediumturquoise = "#48d1cc", e.mediumvioletred = "#c71585", e.midnightblue = "#191970", e.mintcream = "#f5fffa", e.mistyrose = "#ffe4e1", e.moccasin = "#ffe4b5", e.navajowhite = "#ffdead", e.oldlace = "#fdf5e6", e.olivedrab = "#6b8e23", e.orange = "#ffa500", e.orangered = "#ff4500", e.orchid = "#da70d6", e.palegoldenrod = "#eee8aa", e.palegreen = "#98fb98", e.paleturquoise = "#afeeee", e.palevioletred = "#db7093", e.papayawhip = "#ffefd5", e.peachpuff = "#ffdab9", e.peru = "#cd853f", e.pink = "#ffc0cb", e.plum = "#dda0dd", e.powderblue = "#b0e0e6", e.rosybrown = "#bc8f8f", e.royalblue = "#4169e1", e.saddlebrown = "#8b4513", e.salmon = "#fa8072", e.sandybrown = "#f4a460", e.seagreen = "#2e8b57", e.seashell = "#fff5ee", e.sienna = "#a0522d", e.skyblue = "#87ceeb", e.slateblue = "#6a5acd", e.slategray = "#708090", e.snow = "#fffafa", e.springgreen = "#00ff7f", e.steelblue = "#4682b4", e.tan = "#d2b48c", e.thistle = "#d8bfd8", e.tomato = "#ff6347", e.turquoise = "#40e0d0", e.violet = "#ee82ee", e.wheat = "#f5deb3", e.whitesmoke = "#f5f5f5", e.yellowgreen = "#9acd32", e))(ya || {});
function Nt(e) {
  return typeof e != "string" ? false : (e = e.toLowerCase(), /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/.test(e));
}
function Ha(e) {
  return typeof e != "string" ? false : (e = e.toLowerCase(), /^(rgb\(|RGB\()/.test(e));
}
function ba(e) {
  return typeof e != "string" ? false : (e = e.toLowerCase(), /^(rgba|RGBA)/.test(e));
}
function Ca(e) {
  return /^(rgb|rgba|RGB|RGBA)/.test(e);
}
function Va(e) {
  return ya[e];
}
function xa(e) {
  if (Nt(e) || Ca(e))
    return e;
  const r = Va(e);
  if (!r)
    throw new Error(`Color: Invalid Input of ${e}`);
  return r;
}
function Ua(e) {
  e = e.replace("#", ""), e.length === 3 && (e = Array.from(e).map((n) => n + n).join(""));
  const r = e.split("");
  return new Array(3).fill(0).map((n, t) => parseInt(`0x${r[t * 2]}${r[t * 2 + 1]}`));
}
function Xa(e) {
  return e.replace(/rgb\(|rgba\(|\)/g, "").split(",").slice(0, 3).map((r) => parseInt(r));
}
function gt(e) {
  const r = xa(e).toLowerCase();
  return Nt(r) ? Ua(r) : Xa(r);
}
function $a(e) {
  const r = xa(e);
  return ba(r) ? Number(
    r.toLowerCase().split(",").slice(-1)[0].replace(/[)|\s]/g, "")
  ) : 1;
}
function ln(e) {
  const r = gt(e);
  return r && [...r, $a(e)];
}
function Qa(e, r) {
  const n = gt(e);
  return typeof r == "number" ? `rgba(${n.join(",")},${r})` : `rgb(${n.join(",")})`;
}
function Ya(e) {
  if (Nt(e))
    return e;
  const r = gt(e), n = (t) => Number(t).toString(16).padStart(2, "0");
  return `#${r.map(n).join("")}`;
}
function Wt(e) {
  if (!Array.isArray(e))
    throw new Error(`getColorFromRgbValue: ${e} is not an array`);
  const { length: r } = e;
  if (r !== 3 && r !== 4)
    throw new Error("getColorFromRgbValue: value length should be 3 or 4");
  return (r === 3 ? "rgb(" : "rgba(") + e.join(",") + ")";
}
function Ka(e, r = 0) {
  let n = ln(e);
  return n = n.map((t, a) => a === 3 ? t : t - Math.ceil(2.55 * r)).map((t) => t < 0 ? 0 : t), Wt(n);
}
function an(e, r = 0) {
  let n = ln(e);
  return n = n.map((t, a) => a === 3 ? t : t + Math.ceil(2.55 * r)).map((t) => t > 255 ? 255 : t), Wt(n);
}
function De(e, r = 100) {
  const n = gt(e);
  return Wt([...n, r / 100]);
}
var Ja = Object.freeze(Object.defineProperty({
  __proto__: null,
  darken: Ka,
  fade: De,
  getColorFromRgbValue: Wt,
  getOpacity: $a,
  getRgbValue: gt,
  getRgbaValue: ln,
  isHex: Nt,
  isRgb: Ha,
  isRgbOrRgba: Ca,
  isRgba: ba,
  lighten: an,
  toHex: Ya,
  toRgb: Qa
}, Symbol.toStringTag, { value: "Module" }));
var Ke = (e, r) => {
  const n = e.__vccOpts || e;
  for (const [t, a] of r)
    n[t] = a;
  return n;
};
var Za = {};
var ei = {
  viewBox: "0 0 187 38",
  preserveAspectRatio: "none",
  class: "dv-button-svg"
};
var ti = createBaseVNode("g", { style: { transform: "translate(2px, 2px)" } }, [
  createBaseVNode("g", null, [
    createBaseVNode("path", {
      "data-type": "shape",
      d: "M0,0 L0,34 L168,34 L183,19 L183,0",
      class: "dv-button-svg-bg"
    })
  ]),
  createBaseVNode("path", {
    "data-type": "polyline",
    d: "M0,34 L168,34 L183,19",
    class: "dv-button-svg-line"
  })
], -1);
var ri = [
  ti
];
function ni(e, r) {
  return openBlock(), createElementBlock("svg", ei, ri);
}
var ai = Ke(Za, [["render", ni]]);
var ii = {};
var oi = {
  viewBox: "0 0 167 38",
  preserveAspectRatio: "none",
  class: "dv-button-svg"
};
var li = createStaticVNode('<g style="transform:translate(2px, 2px);"><g><path data-type="shape" d="M0,0 L0,34 L163,34 L163,0" class="dv-button-svg-bg"></path></g><path data-type="polyline" d="M0,0 L164.1,0" class="dv-button-svg-line"></path><path data-type="polyline" d="M163,0 L163,34" class="dv-button-svg-line"></path><path data-type="polyline" d="M164.1,34 L0,34" class="dv-button-svg-line"></path><path data-type="polyline" d="M1.1,34 L1.1,0" class="dv-button-svg-line"></path></g>', 1);
var si = [
  li
];
function ui(e, r) {
  return openBlock(), createElementBlock("svg", oi, si);
}
var ci = Ke(ii, [["render", ui]]);
var fi = {};
var di = {
  viewBox: "0 0 167 38",
  preserveAspectRatio: "none",
  class: "dv-button-svg"
};
var hi = createStaticVNode('<g style="transform:translate(2px, 2px);"><g><path data-type="shape" d="M1,1 L1,33 L162,33 L162,1" class="dv-button-svg-bg"></path></g><path data-type="polyline" d="M0,0 L0,10" class="dv-button-svg-line"></path><path data-type="polyline" d="M-1.1,0 L10,0" class="dv-button-svg-line"></path><path data-type="polyline" d="M164.1,0 L153,0" class="dv-button-svg-line"></path><path data-type="polyline" d="M163,0 L163,10" class="dv-button-svg-line"></path><path data-type="polyline" d="M164.1,34 L153,34" class="dv-button-svg-line"></path><path data-type="polyline" d="M163,34 L163,24" class="dv-button-svg-line"></path><path data-type="polyline" d="M0,34 L0,24" class="dv-button-svg-line"></path><path data-type="polyline" d="M-1.1,34 L10,34" class="dv-button-svg-line"></path></g>', 1);
var vi = [
  hi
];
function pi(e, r) {
  return openBlock(), createElementBlock("svg", di, vi);
}
var gi = Ke(fi, [["render", pi]]);
var mi = {};
var yi = {
  viewBox: "0 0 187 38",
  preserveAspectRatio: "none",
  class: "dv-button-svg"
};
var bi = createBaseVNode("g", { style: { transform: "translate(2px, 2px)" } }, [
  createBaseVNode("g", null, [
    createBaseVNode("path", {
      "data-type": "shape",
      d: "M0,34 L168,34 L183,19 L183,0 L0,0",
      class: "dv-button-svg-bg"
    })
  ]),
  createBaseVNode("path", {
    "data-type": "polyline",
    d: "M0,34 L168,34 L183,19 L183,0",
    class: "dv-button-svg-line"
  }),
  createBaseVNode("path", {
    "data-type": "polyline",
    d: "M184.1,0 L0,0 L0,34.7",
    class: "dv-button-svg-line"
  })
], -1);
var Ci = [
  bi
];
function xi(e, r) {
  return openBlock(), createElementBlock("svg", yi, Ci);
}
var $i = Ke(mi, [["render", xi]]);
var _i = {};
var Pi = {
  viewBox: "0 0 187 38",
  preserveAspectRatio: "none",
  class: "dv-button-svg"
};
var wi = createBaseVNode("g", { style: { transform: "translate(2px, 2px)" } }, [
  createBaseVNode("g", null, [
    createBaseVNode("path", {
      "data-type": "shape",
      d: "M0,34 L168,34 L183,19 L183,0 L15,0 L0,15",
      class: "dv-button-svg-bg"
    })
  ]),
  createBaseVNode("path", {
    "data-type": "polyline",
    d: "M0,34 L168,34 L183,19 L183,0",
    class: "dv-button-svg-line"
  }),
  createBaseVNode("path", {
    "data-type": "polyline",
    d: "M183,0 L15,0 L0,15 L0,34",
    class: "dv-button-svg-line"
  })
], -1);
var ki = [
  wi
];
function Ai(e, r) {
  return openBlock(), createElementBlock("svg", Pi, ki);
}
var Li = Ke(_i, [["render", Ai]]);
var Si = {};
var Oi = {
  viewBox: "0 0 167 38",
  preserveAspectRatio: "none",
  class: "dv-button-svg"
};
var Gi = createStaticVNode('<g style="transform:translate(2px, 2px);"><g><path data-type="shape" d="M0,0 L0,34 L163,34 L163,0" class="dv-button-svg-bg"></path></g><path data-type="polyline" d="M0,0 L81.6,0" class="dv-button-svg-line"></path><path data-type="polyline" d="M163,0 L81.4,0" class="dv-button-svg-line"></path><path data-type="polyline" d="M0,34 L81.6,34" class="dv-button-svg-line"></path><path data-type="polyline" d="M163,34 L81.4,34" class="dv-button-svg-line"></path><path data-type="polyline" d="M0,1 L10,1" class="dv-button-svg-line"></path><path data-type="polyline" d="M163,1 L153,1" class="dv-button-svg-line"></path><path data-type="polyline" d="M0,33 L10,33" class="dv-button-svg-line"></path><path data-type="polyline" d="M163,33 L153,33" class="dv-button-svg-line"></path></g>', 1);
var Mi = [
  Gi
];
function Ri(e, r) {
  return openBlock(), createElementBlock("svg", Oi, Mi);
}
var Di = Ke(Si, [["render", Ri]]);
var Ti = { class: "dv-button-wrapper" };
var Bi = { class: "dv-button" };
var Fi = { class: "dv-button-svg-container" };
var Ni = { class: "dv-button-text" };
var Wi = defineComponent({
  components: {
    Border1: ai,
    Border2: ci,
    Border3: gi,
    Border4: $i,
    Border5: Li,
    Border6: Di
  },
  __name: "index",
  props: {
    color: { default: "#2058c7" },
    fontColor: { default: "" },
    bg: { type: Boolean, default: true },
    border: { default: "Border1" },
    fontSize: { default: 14 }
  },
  setup(e) {
    useCssVars((C) => ({
      "3b09a6e4": unref(l),
      "5f757885": C.color,
      "505f902a": unref(t),
      "714af7a5": unref(n),
      ea6738d4: unref(a),
      "1e0a24df": unref(o)
    }));
    const r = e, n = computed(() => an(r.color, 40)), t = computed(() => r.fontColor === "" ? r.color : r.fontColor), a = computed(() => an(t.value, 40)), o = computed(() => r.bg ? 0.1 : 0), l = computed(() => `${r.fontSize}px`);
    return (C, x) => (openBlock(), createElementBlock("div", Ti, [
      createBaseVNode("button", Bi, [
        createBaseVNode("div", Fi, [
          (openBlock(), createBlock(resolveDynamicComponent(C.border)))
        ]),
        createBaseVNode("div", Ni, [
          renderSlot(C.$slots, "default")
        ])
      ])
    ]));
  }
});
var zt = {
  install(e) {
    e.component("DvButton", Wi);
  }
};
function Ei(e) {
  return getCurrentScope() ? (onScopeDispose(e), true) : false;
}
function Rt(e) {
  return typeof e == "function" ? e() : unref(e);
}
var ji = typeof window < "u" && typeof document < "u";
typeof WorkerGlobalScope < "u" && globalThis instanceof WorkerGlobalScope;
var zi = Object.prototype.toString;
var qi = (e) => zi.call(e) === "[object Object]";
var on = () => {
};
function Ii(e, r) {
  function n(...t) {
    return new Promise((a, o) => {
      Promise.resolve(e(() => r.apply(this, t), { fn: r, thisArg: this, args: t })).then(a).catch(o);
    });
  }
  return n;
}
function Hi(e, r = {}) {
  let n, t, a = on;
  const o = (C) => {
    clearTimeout(C), a(), a = on;
  };
  return (C) => {
    const x = Rt(e), I = Rt(r.maxWait);
    return n && o(n), x <= 0 || I !== void 0 && I <= 0 ? (t && (o(t), t = null), Promise.resolve(C())) : new Promise((W, U) => {
      a = r.rejectOnCancel ? U : W, I && !t && (t = setTimeout(() => {
        n && o(n), t = null, W(C());
      }, I)), n = setTimeout(() => {
        t && o(t), t = null, W(C());
      }, x);
    });
  };
}
function Vi(e, r = 200, n = {}) {
  return Ii(
    Hi(r, n),
    e
  );
}
function Ui(e) {
  var r;
  const n = Rt(e);
  return (r = n == null ? void 0 : n.$el) != null ? r : n;
}
var Xi = ji ? window : void 0;
function Qi(...e) {
  let r, n, t, a;
  if (typeof e[0] == "string" || Array.isArray(e[0]) ? ([n, t, a] = e, r = Xi) : [r, n, t, a] = e, !r)
    return on;
  Array.isArray(n) || (n = [n]), Array.isArray(t) || (t = [t]);
  const o = [], l = () => {
    o.forEach((W) => W()), o.length = 0;
  }, C = (W, U, F, S) => (W.addEventListener(U, F, S), () => W.removeEventListener(U, F, S)), x = watch(
    () => [Ui(r), Rt(a)],
    ([W, U]) => {
      if (l(), !W)
        return;
      const F = qi(U) ? { ...U } : U;
      o.push(
        ...n.flatMap((S) => t.map((d) => C(W, S, d, F)))
      );
    },
    { immediate: true, flush: "post" }
  ), I = () => {
    x(), l();
  };
  return Ei(I), I;
}
function ht(e, r) {
  return arguments.length === 1 ? parseInt((Math.random() * e + 1).toString(), 10) : parseInt((Math.random() * (r - e + 1) + e).toString(), 10);
}
function Yi(e, r) {
  const n = window.MutationObserver, t = new n(r);
  return t.observe(e, { attributes: true, attributeFilter: ["style"], attributeOldValue: true }), t;
}
function Dt(e, r) {
  const n = Math.abs(e[0] - r[0]), t = Math.abs(e[1] - r[1]);
  return Math.sqrt(n * n + t * t);
}
function et(e, r, n, t) {
  return [e + Math.cos(t) * n, r + Math.sin(t) * n];
}
function Ki(e) {
  return e.filter((r) => typeof r == "number");
}
function Ji(e) {
  return e = Ki(e), e.reduce((r, n) => r + n, 0);
}
function Zi(e, r) {
  const n = Math.abs(e.x - r.x), t = Math.abs(e.y - r.y);
  return Math.sqrt(n * n + t * t);
}
function fn(e) {
  const n = new Array(e.length - 1).fill(0).map((t, a) => [e[a], e[a + 1]]).map((t) => Zi(t[0], t[1]));
  return Ji(n);
}
function eo(e) {
  return `${e.x},${e.y}`;
}
function dn(e) {
  return e.map(eo).join(" ");
}
function He(e) {
  return (e ? "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx" : "xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx").replace(/[xy]/g, (r) => {
    const n = Math.random() * 16 | 0;
    return (r === "x" ? n : n & 3 | 8).toString(16);
  });
}
function xe(e, r) {
  for (const n in r) {
    if (e[n] && typeof e[n] == "object") {
      xe(e[n], r[n]);
      continue;
    }
    if (typeof r[n] == "object") {
      e[n] = _e(r[n], true);
      continue;
    }
    e[n] = r[n];
  }
  return e;
}
function _e(e, r) {
  if (!e)
    return e;
  const { parse: n, stringify: t } = JSON;
  if (!r)
    return n(t(e));
  const a = Array.isArray(e) ? [] : {};
  if (e && typeof e == "object")
    for (const o in e)
      Object.prototype.hasOwnProperty.call(e, o) && (e[o] && typeof e[o] == "object" ? a[o] = _e(e[o], true) : a[o] = e[o]);
  return a;
}
var Ce = (e, r, n) => {
  const t = ref(0), a = ref(0);
  let o, l = null, C = null;
  const x = (S = true) => new Promise((d) => {
    nextTick(() => {
      C = e.value, t.value = e.value ? e.value.clientWidth : 0, a.value = e.value ? e.value.clientHeight : 0, e.value ? (!t.value || !a.value) && console.warn("DataV: Component width or height is 0px, rendering abnormality may occur!") : console.warn("DataV: Failed to get dom node, component rendering may be abnormal!"), typeof r == "function" && S && r(), d(true);
    });
  }), I = () => {
    o = Vi(x, 200);
  }, W = () => {
    l = Yi(C, o), Qi(window, "resize", o);
  }, U = () => {
    l && (l.disconnect(), l.takeRecords(), l = null);
  }, F = async () => {
    await x(false), I(), W(), typeof n == "function" && n();
  };
  return onMounted(() => {
    F();
  }), onUnmounted(() => {
    U();
  }), {
    width: t,
    height: a,
    initWH: x
  };
};
var to = ["width", "height"];
var ro = ["d", "fill"];
var no = ["fill", "x", "y"];
var ao = ["xlink:href", "width", "height", "x", "y"];
var io = ["fill", "x", "y"];
var oo = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    }
  },
  setup(e) {
    useCssVars((S) => ({
      "5914205c": unref(l)
    }));
    const r = e, n = ref(null), { width: t, height: a } = Ce(n, x, C), o = reactive({
      defaultConfig: {
        /**
             * @description Chart data
             * @type {Array<Object>}
             * @default data = []
             */
        data: [],
        /**
             * @description Chart img
             * @type {Array<String>}
             * @default img = []
             */
        img: [],
        /**
             * @description Chart font size
             * @type {Number}
             * @default fontSize = 12
             */
        fontSize: 12,
        /**
             * @description Img side length
             * @type {Number}
             * @default imgSideLength = 30
             */
        imgSideLength: 30,
        /**
             * @description Column color
             * @type {String}
             * @default columnColor = 'rgba(0, 194, 255, 0.4)'
             */
        columnColor: "rgba(0, 194, 255, 0.4)",
        /**
             * @description Text color
             * @type {String}
             * @default textColor = '#fff'
             */
        textColor: "#fff",
        /**
             * @description Show value
             * @type {Boolean}
             * @default showValue = false
             */
        showValue: false,
        /**
             * @description Auto sort by value
             * @type {Boolean}
             * @default sort = true
             */
        sort: true
      },
      mergedConfig: null,
      column: []
    }), l = computed(() => `${r.config.fontSize ? r.config.fontSize : o.defaultConfig.fontSize}px`);
    watch(() => r.config, () => {
      I();
    }, {
      deep: true
    });
    function C() {
      I();
    }
    function x() {
      I();
    }
    function I() {
      W(), U(), F();
    }
    function W() {
      o.mergedConfig = xe(_e(o.defaultConfig, true), r.config || {});
    }
    function U() {
      let { data: S } = o.mergedConfig;
      const { sort: d } = o.mergedConfig;
      S = _e(S, true), d && S.sort(({ value: E }, { value: q }) => E > q ? -1 : E < q ? 1 : 0);
      const T = Math.max(...S.map((E) => E.value));
      S = S.map((E) => ({
        ...E,
        percent: T === 0 ? 0 : E.value / T
      })), o.mergedConfig.data = S;
    }
    function F() {
      const { imgSideLength: S, fontSize: d, data: T } = o.mergedConfig, E = T.length, q = t.value / (E + 1), N = a.value - S - d - 5, g = a.value - d - 5;
      o.column = T.map((_, f) => {
        const { percent: G } = _, k = q * (f + 1), y = q * f, $ = q * (f + 2), c = g - N * G, R = N * G * 0.6 + c, L = `
          M${y}, ${g}
          Q${k}, ${R} ${k},${c}
          M${k},${c}
          Q${k}, ${R} ${$},${g}
          L${y}, ${g}
          Z
        `, v = (g + c) / 2 + d / 2;
        return {
          ..._,
          d: L,
          x: k,
          y: c,
          textY: v
        };
      });
    }
    return (S, d) => (openBlock(), createElementBlock("div", {
      ref_key: "conicalColumnChart",
      ref: n,
      class: "dv-conical-column-chart"
    }, [
      (openBlock(), createElementBlock("svg", {
        width: unref(t),
        height: unref(a)
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(o).column, (T, E) => (openBlock(), createElementBlock("g", { key: E }, [
          createBaseVNode("path", {
            d: T.d,
            fill: unref(o).mergedConfig.columnColor
          }, null, 8, ro),
          createBaseVNode("text", {
            fill: unref(o).mergedConfig.textColor,
            x: T.x,
            y: unref(a) - 4
          }, toDisplayString(T.name), 9, no),
          unref(o).mergedConfig.img.length ? (openBlock(), createElementBlock("image", {
            key: 0,
            "xlink:href": unref(o).mergedConfig.img[E % unref(o).mergedConfig.img.length],
            width: unref(o).mergedConfig.imgSideLength,
            height: unref(o).mergedConfig.imgSideLength,
            x: T.x - unref(o).mergedConfig.imgSideLength / 2,
            y: T.y - unref(o).mergedConfig.imgSideLength
          }, null, 8, ao)) : createCommentVNode("", true),
          unref(o).mergedConfig.showValue ? (openBlock(), createElementBlock("text", {
            key: 1,
            fill: unref(o).mergedConfig.textColor,
            x: T.x,
            y: T.textY
          }, toDisplayString(T.value), 9, io)) : createCommentVNode("", true)
        ]))), 128))
      ], 8, to))
    ], 512));
  }
};
var qt = {
  install(e) {
    e.component("DvConicalColumnChart", oo);
  }
};
var lo = ["id"];
var so = ["offset", "stop-color"];
var uo = ["id", "x2"];
var co = ["offset", "stop-color"];
var fo = ["x", "y", "rx", "ry", "stroke-width", "stroke", "width", "height"];
var ho = ["stroke-width", "stroke-dasharray", "stroke", "points"];
var vo = ["stroke", "fill", "x", "y"];
var po = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    }
  },
  setup(e) {
    const r = e, n = He(), t = ref(null), a = reactive({
      gradientId1: `percent-pond-gradientId1-${n}`,
      gradientId2: `percent-pond-gradientId2-${n}`,
      width: 0,
      height: 0,
      defaultConfig: {
        /**
             * @description Value
             * @type {Number}
             * @default value = 0
             */
        value: 0,
        /**
             * @description Colors (hex|rgb|rgba|color keywords)
             * @type {Array<String>}
             * @default colors = ['#00BAFF', '#3DE7C9']
             * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']
             */
        colors: ["#3DE7C9", "#00BAFF"],
        /**
             * @description Border width
             * @type {Number}
             * @default borderWidth = 3
             */
        borderWidth: 3,
        /**
             * @description Gap between border and pond
             * @type {Number}
             * @default borderGap = 3
             */
        borderGap: 3,
        /**
             * @description Line dash
             * @type {Array<Number>}
             * @default lineDash = [5, 1]
             */
        lineDash: [5, 1],
        /**
             * @description Text color
             * @type {String}
             * @default textColor = '#fff'
             */
        textColor: "#fff",
        /**
             * @description Border radius
             * @type {Number}
             * @default borderRadius = 5
             */
        borderRadius: 5,
        /**
             * @description Local Gradient
             * @type {Boolean}
             * @default localGradient = false
             * @example localGradient = false | true
             */
        localGradient: false,
        /**
             * @description Formatter
             * @type {String}
             * @default formatter = '{value}%'
             */
        formatter: "{value}%"
      },
      mergedConfig: null
    }), o = computed(() => {
      if (!a.mergedConfig)
        return 0;
      const { borderWidth: E } = a.mergedConfig;
      return a.width - E;
    }), l = computed(() => {
      if (!a.mergedConfig)
        return 0;
      const { borderWidth: E } = a.mergedConfig;
      return a.height - E;
    }), C = computed(() => {
      const E = a.height / 2;
      if (!a.mergedConfig)
        return `0, ${E} 0, ${E}`;
      const { borderWidth: q, borderGap: N, value: g } = a.mergedConfig, _ = (a.width - (q + N) * 2) / 100 * g;
      return `
        ${q + N}, ${E}
        ${q + N + _}, ${E + 1e-3}
      `;
    }), x = computed(() => {
      if (!a.mergedConfig)
        return 0;
      const { borderWidth: E, borderGap: q } = a.mergedConfig;
      return a.height - (E + q) * 2;
    }), I = computed(() => {
      if (!a.mergedConfig)
        return [];
      const { colors: E } = a.mergedConfig, N = 100 / (E.length - 1);
      return E.map((g, _) => [N * _, g]);
    }), W = computed(() => a.mergedConfig && a.mergedConfig.localGradient ? a.gradientId1 : a.gradientId2), U = computed(() => {
      if (!a.mergedConfig)
        return "100%";
      const { value: E } = a.mergedConfig;
      return `${200 - E}%`;
    }), F = computed(() => {
      if (!a.mergedConfig)
        return "";
      const { value: E, formatter: q } = a.mergedConfig;
      return q.replace("{value}", E);
    });
    watch(() => r.config, () => {
      T();
    }, {
      deep: true
    }), onMounted(() => {
      S();
    });
    async function S() {
      await d(), r.config && T();
    }
    async function d() {
      await nextTick();
      const { clientWidth: E, clientHeight: q } = t.value;
      a.width = E, a.height = q;
    }
    function T() {
      a.mergedConfig = xe(_e(a.defaultConfig, true), r.config || {});
    }
    return (E, q) => (openBlock(), createElementBlock("div", {
      ref_key: "percentPond",
      ref: t,
      class: "dv-percent-pond"
    }, [
      (openBlock(), createElementBlock("svg", null, [
        createBaseVNode("defs", null, [
          createBaseVNode("linearGradient", {
            id: unref(a).gradientId1,
            x1: "0%",
            y1: "0%",
            x2: "100%",
            y2: "0%"
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(I), (N) => (openBlock(), createElementBlock("stop", {
              key: N[0],
              offset: `${N[0]}%`,
              "stop-color": N[1]
            }, null, 8, so))), 128))
          ], 8, lo),
          createBaseVNode("linearGradient", {
            id: unref(a).gradientId2,
            x1: "0%",
            y1: "0%",
            x2: unref(U),
            y2: "0%"
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(I), (N) => (openBlock(), createElementBlock("stop", {
              key: N[0],
              offset: `${N[0]}%`,
              "stop-color": N[1]
            }, null, 8, co))), 128))
          ], 8, uo)
        ]),
        createBaseVNode("rect", {
          x: unref(a).mergedConfig ? unref(a).mergedConfig.borderWidth / 2 : "0",
          y: unref(a).mergedConfig ? unref(a).mergedConfig.borderWidth / 2 : "0",
          rx: unref(a).mergedConfig ? unref(a).mergedConfig.borderRadius : "0",
          ry: unref(a).mergedConfig ? unref(a).mergedConfig.borderRadius : "0",
          fill: "transparent",
          "stroke-width": unref(a).mergedConfig ? unref(a).mergedConfig.borderWidth : "0",
          stroke: `url(#${unref(a).gradientId1})`,
          width: unref(o) > 0 ? unref(o) : 0,
          height: unref(l) > 0 ? unref(l) : 0
        }, null, 8, fo),
        createBaseVNode("polyline", {
          "stroke-width": unref(x),
          "stroke-dasharray": unref(a).mergedConfig ? unref(a).mergedConfig.lineDash.join(",") : "0",
          stroke: `url(#${unref(W)})`,
          points: unref(C)
        }, null, 8, ho),
        createBaseVNode("text", {
          stroke: unref(a).mergedConfig ? unref(a).mergedConfig.textColor : "#fff",
          fill: unref(a).mergedConfig ? unref(a).mergedConfig.textColor : "#fff",
          x: unref(a).width / 2,
          y: unref(a).height / 2
        }, toDisplayString(unref(F)), 9, vo)
      ]))
    ], 512));
  }
};
var It = {
  install(e) {
    e.component("DvPercentPond", po);
  }
};
function _a(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
function go(e) {
  if (e.__esModule)
    return e;
  var r = e.default;
  if (typeof r == "function") {
    var n = function t() {
      return this instanceof t ? Reflect.construct(r, arguments, this.constructor) : r.apply(this, arguments);
    };
    n.prototype = r.prototype;
  } else
    n = {};
  return Object.defineProperty(n, "__esModule", { value: true }), Object.keys(e).forEach(function(t) {
    var a = Object.getOwnPropertyDescriptor(e, t);
    Object.defineProperty(n, t, a.get ? a : {
      enumerable: true,
      get: function() {
        return e[t];
      }
    });
  }), n;
}
var Et = {};
var Pa = { exports: {} };
(function(e) {
  function r(n) {
    return n && n.__esModule ? n : {
      default: n
    };
  }
  e.exports = r, e.exports.__esModule = true, e.exports.default = e.exports;
})(Pa);
var we = Pa.exports;
var Ht = {};
var Vt = { exports: {} };
var hn;
function Ve() {
  return hn || (hn = 1, function(e) {
    function r(n, t, a) {
      return t in n ? Object.defineProperty(n, t, {
        value: a,
        enumerable: true,
        configurable: true,
        writable: true
      }) : n[t] = a, n;
    }
    e.exports = r, e.exports.__esModule = true, e.exports.default = e.exports;
  }(Vt)), Vt.exports;
}
var Ut = { exports: {} };
var Xt = { exports: {} };
var Qt = { exports: {} };
var vn;
function wa() {
  return vn || (vn = 1, function(e) {
    function r(n, t) {
      (t == null || t > n.length) && (t = n.length);
      for (var a = 0, o = new Array(t); a < t; a++)
        o[a] = n[a];
      return o;
    }
    e.exports = r, e.exports.__esModule = true, e.exports.default = e.exports;
  }(Qt)), Qt.exports;
}
var pn;
function mo() {
  return pn || (pn = 1, function(e) {
    var r = wa();
    function n(t) {
      if (Array.isArray(t))
        return r(t);
    }
    e.exports = n, e.exports.__esModule = true, e.exports.default = e.exports;
  }(Xt)), Xt.exports;
}
var Yt = { exports: {} };
var gn;
function yo() {
  return gn || (gn = 1, function(e) {
    function r(n) {
      if (typeof Symbol < "u" && n[Symbol.iterator] != null || n["@@iterator"] != null)
        return Array.from(n);
    }
    e.exports = r, e.exports.__esModule = true, e.exports.default = e.exports;
  }(Yt)), Yt.exports;
}
var Kt = { exports: {} };
var mn;
function ka() {
  return mn || (mn = 1, function(e) {
    var r = wa();
    function n(t, a) {
      if (t) {
        if (typeof t == "string")
          return r(t, a);
        var o = Object.prototype.toString.call(t).slice(8, -1);
        if (o === "Object" && t.constructor && (o = t.constructor.name), o === "Map" || o === "Set")
          return Array.from(t);
        if (o === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))
          return r(t, a);
      }
    }
    e.exports = n, e.exports.__esModule = true, e.exports.default = e.exports;
  }(Kt)), Kt.exports;
}
var Jt = { exports: {} };
var yn;
function bo() {
  return yn || (yn = 1, function(e) {
    function r() {
      throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    }
    e.exports = r, e.exports.__esModule = true, e.exports.default = e.exports;
  }(Jt)), Jt.exports;
}
var bn;
function Te() {
  return bn || (bn = 1, function(e) {
    var r = mo(), n = yo(), t = ka(), a = bo();
    function o(l) {
      return r(l) || n(l) || t(l) || a();
    }
    e.exports = o, e.exports.__esModule = true, e.exports.default = e.exports;
  }(Ut)), Ut.exports;
}
var Zt = { exports: {} };
var Cn;
function mt() {
  return Cn || (Cn = 1, function(e) {
    function r(n, t) {
      if (!(n instanceof t))
        throw new TypeError("Cannot call a class as a function");
    }
    e.exports = r, e.exports.__esModule = true, e.exports.default = e.exports;
  }(Zt)), Zt.exports;
}
var yt = go(Ja);
var er = {};
var tr = {};
var rr = { exports: {} };
var nr = { exports: {} };
var xn;
function Co() {
  return xn || (xn = 1, function(e) {
    function r(n) {
      if (Array.isArray(n))
        return n;
    }
    e.exports = r, e.exports.__esModule = true, e.exports.default = e.exports;
  }(nr)), nr.exports;
}
var ar = { exports: {} };
var $n;
function xo() {
  return $n || ($n = 1, function(e) {
    function r(n, t) {
      var a = n == null ? null : typeof Symbol < "u" && n[Symbol.iterator] || n["@@iterator"];
      if (a != null) {
        var o = [], l = true, C = false, x, I;
        try {
          for (a = a.call(n); !(l = (x = a.next()).done) && (o.push(x.value), !(t && o.length === t)); l = true)
            ;
        } catch (W) {
          C = true, I = W;
        } finally {
          try {
            !l && a.return != null && a.return();
          } finally {
            if (C)
              throw I;
          }
        }
        return o;
      }
    }
    e.exports = r, e.exports.__esModule = true, e.exports.default = e.exports;
  }(ar)), ar.exports;
}
var ir = { exports: {} };
var _n;
function $o() {
  return _n || (_n = 1, function(e) {
    function r() {
      throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    }
    e.exports = r, e.exports.__esModule = true, e.exports.default = e.exports;
  }(ir)), ir.exports;
}
var Pn;
function Fe() {
  return Pn || (Pn = 1, function(e) {
    var r = Co(), n = xo(), t = ka(), a = $o();
    function o(l, C) {
      return r(l) || n(l, C) || t(l, C) || a();
    }
    e.exports = o, e.exports.__esModule = true, e.exports.default = e.exports;
  }(rr)), rr.exports;
}
var wn;
function _o() {
  return wn || (wn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: true
    }), e.bezierCurveToPolyline = q, e.getBezierCurveLength = N, e.default = void 0;
    var n = r(Fe()), t = r(Te()), a = Math.sqrt, o = Math.pow, l = Math.ceil, C = Math.abs, x = 50;
    function I(_) {
      var f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5, G = _.length - 1, k = _[0], y = _[G][2], $ = _.slice(1), c = $.map(function(V, X) {
        var Z = X === 0 ? k : $[X - 1][2];
        return W.apply(void 0, [Z].concat((0, t.default)(V)));
      }), R = new Array(G).fill(x), L = d(c, R), v = E(L, c, $, f);
      return v.segmentPoints.push(y), v;
    }
    function W(_, f, G, k) {
      return function(y) {
        var $ = 1 - y, c = o($, 3), R = o($, 2), L = o(y, 3), v = o(y, 2);
        return [_[0] * c + 3 * f[0] * y * R + 3 * G[0] * v * $ + k[0] * L, _[1] * c + 3 * f[1] * y * R + 3 * G[1] * v * $ + k[1] * L];
      };
    }
    function U(_, f) {
      var G = (0, n.default)(_, 2), k = G[0], y = G[1], $ = (0, n.default)(f, 2), c = $[0], R = $[1];
      return a(o(k - c, 2) + o(y - R, 2));
    }
    function F(_) {
      return _.reduce(function(f, G) {
        return f + G;
      }, 0);
    }
    function S(_) {
      return _.map(function(f, G) {
        return new Array(f.length - 1).fill(0).map(function(k, y) {
          return U(f[y], f[y + 1]);
        });
      });
    }
    function d(_, f) {
      return _.map(function(G, k) {
        var y = 1 / f[k];
        return new Array(f[k]).fill("").map(function($, c) {
          return G(c * y);
        });
      });
    }
    function T(_, f) {
      return _.map(function(G) {
        return G.map(function(k) {
          return C(k - f);
        });
      }).map(function(G) {
        return F(G);
      }).reduce(function(G, k) {
        return G + k;
      }, 0);
    }
    function E(_, f, G, k) {
      var y = 4, $ = 1, c = function() {
        var v = _.reduce(function(ee, ae) {
          return ee + ae.length;
        }, 0);
        _.forEach(function(ee, ae) {
          return ee.push(G[ae][2]);
        });
        var V = S(_), X = V.reduce(function(ee, ae) {
          return ee + ae.length;
        }, 0), Z = V.map(function(ee) {
          return F(ee);
        }), u = F(Z), m = u / X, h2 = T(V, m);
        if (h2 <= k)
          return "break";
        v = l(m / k * v * 1.1);
        var P = Z.map(function(ee) {
          return l(ee / u * v);
        });
        _ = d(f, P), v = _.reduce(function(ee, ae) {
          return ee + ae.length;
        }, 0);
        var z = JSON.parse(JSON.stringify(_));
        z.forEach(function(ee, ae) {
          return ee.push(G[ae][2]);
        }), V = S(z), X = V.reduce(function(ee, ae) {
          return ee + ae.length;
        }, 0), Z = V.map(function(ee) {
          return F(ee);
        }), u = F(Z), m = u / X;
        var K = 1 / v / 10;
        f.forEach(function(ee, ae) {
          for (var le = P[ae], ve = new Array(le).fill("").map(function(A, O) {
            return O / P[ae];
          }), Q = 0; Q < y; Q++)
            for (var ie = S([_[ae]])[0], ce = ie.map(function(A) {
              return A - m;
            }), fe = 0, B = 0; B < le; B++) {
              if (B === 0)
                return;
              fe += ce[B - 1], ve[B] -= K * fe, ve[B] > 1 && (ve[B] = 1), ve[B] < 0 && (ve[B] = 0), _[ae][B] = ee(ve[B]);
            }
        }), y *= 4, $++;
      };
      do {
        var R = c();
        if (R === "break")
          break;
      } while (y <= 1025);
      return _ = _.reduce(function(L, v) {
        return L.concat(v);
      }, []), {
        segmentPoints: _,
        cycles: $,
        rounds: y
      };
    }
    function q(_) {
      var f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5;
      if (!_)
        return console.error("bezierCurveToPolyline: Missing parameters!"), false;
      if (!(_ instanceof Array))
        return console.error("bezierCurveToPolyline: Parameter bezierCurve must be an array!"), false;
      if (typeof f != "number")
        return console.error("bezierCurveToPolyline: Parameter precision must be a number!"), false;
      var G = I(_, f), k = G.segmentPoints;
      return k;
    }
    function N(_) {
      var f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5;
      if (!_)
        return console.error("getBezierCurveLength: Missing parameters!"), false;
      if (!(_ instanceof Array))
        return console.error("getBezierCurveLength: Parameter bezierCurve must be an array!"), false;
      if (typeof f != "number")
        return console.error("getBezierCurveLength: Parameter precision must be a number!"), false;
      var G = I(_, f), k = G.segmentPoints, y = S([k])[0], $ = F(y);
      return $;
    }
    var g = q;
    e.default = g;
  }(tr)), tr;
}
var or = {};
var kn;
function Po() {
  return kn || (kn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: true
    }), e.default = void 0;
    var n = r(Fe()), t = r(Te());
    function a(I) {
      var W = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false, U = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0.25, F = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0.25;
      if (!(I instanceof Array))
        return console.error("polylineToBezierCurve: Parameter polyline must be an array!"), false;
      if (I.length <= 2)
        return console.error("polylineToBezierCurve: Converting to a curve requires at least 3 points!"), false;
      var S = I[0], d = I.length - 1, T = new Array(d).fill(0).map(function(E, q) {
        return [].concat((0, t.default)(o(I, q, W, U, F)), [I[q + 1]]);
      });
      return W && l(T, S), T.unshift(I[0]), T;
    }
    function o(I, W) {
      var U = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false, F = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0.25, S = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0.25, d = I.length;
      if (!(d < 3 || W >= d)) {
        var T = W - 1;
        T < 0 && (T = U ? d + T : 0);
        var E = W + 1;
        E >= d && (E = U ? E - d : d - 1);
        var q = W + 2;
        q >= d && (q = U ? q - d : d - 1);
        var N = I[T], g = I[W], _ = I[E], f = I[q];
        return [[g[0] + F * (_[0] - N[0]), g[1] + F * (_[1] - N[1])], [_[0] - S * (f[0] - g[0]), _[1] - S * (f[1] - g[1])]];
      }
    }
    function l(I, W) {
      var U = I[0], F = I.slice(-1)[0];
      return I.push([C(F[1], F[2]), C(U[0], W), W]), I;
    }
    function C(I, W) {
      var U = (0, n.default)(I, 2), F = U[0], S = U[1], d = (0, n.default)(W, 2), T = d[0], E = d[1], q = T - F, N = E - S;
      return [T + q, E + N];
    }
    var x = a;
    e.default = x;
  }(or)), or;
}
var An;
function sn() {
  return An || (An = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: true
    }), Object.defineProperty(e, "bezierCurveToPolyline", {
      enumerable: true,
      get: function() {
        return n.bezierCurveToPolyline;
      }
    }), Object.defineProperty(e, "getBezierCurveLength", {
      enumerable: true,
      get: function() {
        return n.getBezierCurveLength;
      }
    }), Object.defineProperty(e, "polylineToBezierCurve", {
      enumerable: true,
      get: function() {
        return t.default;
      }
    }), e.default = void 0;
    var n = _o(), t = r(Po()), a = {
      bezierCurveToPolyline: n.bezierCurveToPolyline,
      getBezierCurveLength: n.getBezierCurveLength,
      polylineToBezierCurve: t.default
    };
    e.default = a;
  }(er)), er;
}
var lr = {};
var sr = { exports: {} };
var Ln;
function je() {
  return Ln || (Ln = 1, function(e) {
    function r(n) {
      "@babel/helpers - typeof";
      return e.exports = r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
        return typeof t;
      } : function(t) {
        return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
      }, e.exports.__esModule = true, e.exports.default = e.exports, r(n);
    }
    e.exports = r, e.exports.__esModule = true, e.exports.default = e.exports;
  }(sr)), sr.exports;
}
var Sn;
function Be() {
  return Sn || (Sn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: true
    }), e.deepClone = F, e.eliminateBlur = S, e.checkPointIsInCircle = d, e.getTwoPointDistance = T, e.checkPointIsInPolygon = E, e.checkPointIsInSector = q, e.checkPointIsNearPolyline = g, e.checkPointIsInRect = _, e.getRotatePointPos = f, e.getScalePointPos = G, e.getTranslatePointPos = k, e.getDistanceBetweenPointAndLine = y, e.getCircleRadianPoint = $, e.getRegularPolygonPoints = c, e.default = void 0;
    var n = r(Te()), t = r(Fe()), a = r(je()), o = Math.abs, l = Math.sqrt, C = Math.sin, x = Math.cos, I = Math.max, W = Math.min, U = Math.PI;
    function F(L) {
      var v = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      if (!L)
        return L;
      var V = JSON.parse, X = JSON.stringify;
      if (!v)
        return V(X(L));
      var Z = L instanceof Array ? [] : {};
      if (L && (0, a.default)(L) === "object")
        for (var u in L)
          L.hasOwnProperty(u) && (L[u] && (0, a.default)(L[u]) === "object" ? Z[u] = F(L[u], true) : Z[u] = L[u]);
      return Z;
    }
    function S(L) {
      return L.map(function(v) {
        var V = (0, t.default)(v, 2), X = V[0], Z = V[1];
        return [parseInt(X) + 0.5, parseInt(Z) + 0.5];
      });
    }
    function d(L, v, V, X) {
      return T(L, [v, V]) <= X;
    }
    function T(L, v) {
      var V = (0, t.default)(L, 2), X = V[0], Z = V[1], u = (0, t.default)(v, 2), m = u[0], h2 = u[1], P = o(X - m), z = o(Z - h2);
      return l(P * P + z * z);
    }
    function E(L, v) {
      for (var V = 0, X = (0, t.default)(L, 2), Z = X[0], u = X[1], m = v.length, h2 = 1, P = v[0]; h2 <= m; h2++) {
        var z = v[h2 % m];
        if (Z > W(P[0], z[0]) && Z <= I(P[0], z[0]) && u <= I(P[1], z[1]) && P[0] !== z[0]) {
          var K = (Z - P[0]) * (z[1] - P[1]) / (z[0] - P[0]) + P[1];
          (P[1] === z[1] || u <= K) && V++;
        }
        P = z;
      }
      return V % 2 === 1;
    }
    function q(L, v, V, X, Z, u, m) {
      if (!L || T(L, [v, V]) > X)
        return false;
      if (!m) {
        var h2 = F([u, Z]), P = (0, t.default)(h2, 2);
        Z = P[0], u = P[1];
      }
      var z = Z > u;
      if (z) {
        var K = [u, Z];
        Z = K[0], u = K[1];
      }
      var ee = u - Z;
      if (ee >= U * 2)
        return true;
      var ae = (0, t.default)(L, 2), le = ae[0], ve = ae[1], Q = $(v, V, X, Z), ie = (0, t.default)(Q, 2), ce = ie[0], fe = ie[1], B = $(v, V, X, u), A = (0, t.default)(B, 2), O = A[0], D = A[1], H = [le - v, ve - V], te = [ce - v, fe - V], p = [O - v, D - V], j = ee > U;
      if (j) {
        var s = F([p, te]), b = (0, t.default)(s, 2);
        te = b[0], p = b[1];
      }
      var w = N(te, H) && !N(p, H);
      return j && (w = !w), z && (w = !w), w;
    }
    function N(L, v) {
      var V = (0, t.default)(L, 2), X = V[0], Z = V[1], u = (0, t.default)(v, 2), m = u[0], h2 = u[1];
      return -Z * m + X * h2 > 0;
    }
    function g(L, v, V) {
      var X = V / 2, Z = v.map(function(h2) {
        var P = (0, t.default)(h2, 2), z = P[0], K = P[1];
        return [z, K - X];
      }), u = v.map(function(h2) {
        var P = (0, t.default)(h2, 2), z = P[0], K = P[1];
        return [z, K + X];
      }), m = [].concat((0, n.default)(Z), (0, n.default)(u.reverse()));
      return E(L, m);
    }
    function _(L, v, V, X, Z) {
      var u = (0, t.default)(L, 2), m = u[0], h2 = u[1];
      return !(m < v || h2 < V || m > v + X || h2 > V + Z);
    }
    function f() {
      var L = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, v = arguments.length > 1 ? arguments[1] : void 0, V = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [0, 0];
      if (!v)
        return false;
      if (L % 360 === 0)
        return v;
      var X = (0, t.default)(v, 2), Z = X[0], u = X[1], m = (0, t.default)(V, 2), h2 = m[0], P = m[1];
      return L *= U / 180, [(Z - h2) * x(L) - (u - P) * C(L) + h2, (Z - h2) * C(L) + (u - P) * x(L) + P];
    }
    function G() {
      var L = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [1, 1], v = arguments.length > 1 ? arguments[1] : void 0, V = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [0, 0];
      if (!v)
        return false;
      if (L === 1)
        return v;
      var X = (0, t.default)(v, 2), Z = X[0], u = X[1], m = (0, t.default)(V, 2), h2 = m[0], P = m[1], z = (0, t.default)(L, 2), K = z[0], ee = z[1], ae = Z - h2, le = u - P;
      return [ae * K + h2, le * ee + P];
    }
    function k(L, v) {
      if (!L || !v)
        return false;
      var V = (0, t.default)(v, 2), X = V[0], Z = V[1], u = (0, t.default)(L, 2), m = u[0], h2 = u[1];
      return [X + m, Z + h2];
    }
    function y(L, v, V) {
      if (!L || !v || !V)
        return false;
      var X = (0, t.default)(L, 2), Z = X[0], u = X[1], m = (0, t.default)(v, 2), h2 = m[0], P = m[1], z = (0, t.default)(V, 2), K = z[0], ee = z[1], ae = ee - P, le = h2 - K, ve = P * (K - h2) - h2 * (ee - P), Q = o(ae * Z + le * u + ve), ie = l(ae * ae + le * le);
      return Q / ie;
    }
    function $(L, v, V, X) {
      return [L + x(X) * V, v + C(X) * V];
    }
    function c(L, v, V, X) {
      var Z = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : U * -0.5, u = U * 2 / X, m = new Array(X).fill("").map(function(h2, P) {
        return P * u + Z;
      });
      return m.map(function(h2) {
        return $(L, v, V, h2);
      });
    }
    var R = {
      deepClone: F,
      eliminateBlur: S,
      checkPointIsInCircle: d,
      checkPointIsInPolygon: E,
      checkPointIsInSector: q,
      checkPointIsNearPolyline: g,
      getTwoPointDistance: T,
      getRotatePointPos: f,
      getScalePointPos: G,
      getTranslatePointPos: k,
      getCircleRadianPoint: $,
      getRegularPolygonPoints: c,
      getDistanceBetweenPointAndLine: y
    };
    e.default = R;
  }(lr)), lr;
}
var ur = {};
var cr = {};
var On;
function wo() {
  return On || (On = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: true
    }), e.drawPolylinePath = t, e.drawBezierCurvePath = a, e.default = void 0;
    var n = r(Te());
    function t(l, C) {
      var x = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false, I = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      if (!l || C.length < 2)
        return false;
      x && l.beginPath(), C.forEach(function(W, U) {
        return W && (U === 0 ? l.moveTo.apply(l, (0, n.default)(W)) : l.lineTo.apply(l, (0, n.default)(W)));
      }), I && l.closePath();
    }
    function a(l, C) {
      var x = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false, I = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false, W = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      if (!l || !C)
        return false;
      I && l.beginPath(), x && l.moveTo.apply(l, (0, n.default)(x)), C.forEach(function(U) {
        return U && l.bezierCurveTo.apply(l, (0, n.default)(U[0]).concat((0, n.default)(U[1]), (0, n.default)(U[2])));
      }), W && l.closePath();
    }
    var o = {
      drawPolylinePath: t,
      drawBezierCurvePath: a
    };
    e.default = o;
  }(cr)), cr;
}
var Gn;
function un() {
  return Gn || (Gn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: true
    }), e.extendNewGraph = G, e.default = e.text = e.bezierCurve = e.smoothline = e.polyline = e.regPolygon = e.sector = e.arc = e.ring = e.rect = e.ellipse = e.circle = void 0;
    var n = r(Te()), t = r(Fe()), a = r(sn()), o = Be(), l = wo(), C = a.default.polylineToBezierCurve, x = a.default.bezierCurveToPolyline, I = {
      shape: {
        rx: 0,
        ry: 0,
        r: 0
      },
      validator: function(y) {
        var $ = y.shape, c = $.rx, R = $.ry, L = $.r;
        return typeof c != "number" || typeof R != "number" || typeof L != "number" ? (console.error("Circle shape configuration is abnormal!"), false) : true;
      },
      draw: function(y, $) {
        var c = y.ctx, R = $.shape;
        c.beginPath();
        var L = R.rx, v = R.ry, V = R.r;
        c.arc(L, v, V > 0 ? V : 0.01, 0, Math.PI * 2), c.fill(), c.stroke(), c.closePath();
      },
      hoverCheck: function(y, $) {
        var c = $.shape, R = c.rx, L = c.ry, v = c.r;
        return (0, o.checkPointIsInCircle)(y, R, L, v);
      },
      setGraphCenter: function(y, $) {
        var c = $.shape, R = $.style, L = c.rx, v = c.ry;
        R.graphCenter = [L, v];
      },
      move: function(y, $) {
        var c = y.movementX, R = y.movementY, L = $.shape;
        this.attr("shape", {
          rx: L.rx + c,
          ry: L.ry + R
        });
      }
    };
    e.circle = I;
    var W = {
      shape: {
        rx: 0,
        ry: 0,
        hr: 0,
        vr: 0
      },
      validator: function(y) {
        var $ = y.shape, c = $.rx, R = $.ry, L = $.hr, v = $.vr;
        return typeof c != "number" || typeof R != "number" || typeof L != "number" || typeof v != "number" ? (console.error("Ellipse shape configuration is abnormal!"), false) : true;
      },
      draw: function(y, $) {
        var c = y.ctx, R = $.shape;
        c.beginPath();
        var L = R.rx, v = R.ry, V = R.hr, X = R.vr;
        c.ellipse(L, v, V > 0 ? V : 0.01, X > 0 ? X : 0.01, 0, 0, Math.PI * 2), c.fill(), c.stroke(), c.closePath();
      },
      hoverCheck: function(y, $) {
        var c = $.shape, R = c.rx, L = c.ry, v = c.hr, V = c.vr, X = Math.max(v, V), Z = Math.min(v, V), u = Math.sqrt(X * X - Z * Z), m = [R - u, L], h2 = [R + u, L], P = (0, o.getTwoPointDistance)(y, m) + (0, o.getTwoPointDistance)(y, h2);
        return P <= 2 * X;
      },
      setGraphCenter: function(y, $) {
        var c = $.shape, R = $.style, L = c.rx, v = c.ry;
        R.graphCenter = [L, v];
      },
      move: function(y, $) {
        var c = y.movementX, R = y.movementY, L = $.shape;
        this.attr("shape", {
          rx: L.rx + c,
          ry: L.ry + R
        });
      }
    };
    e.ellipse = W;
    var U = {
      shape: {
        x: 0,
        y: 0,
        w: 0,
        h: 0
      },
      validator: function(y) {
        var $ = y.shape, c = $.x, R = $.y, L = $.w, v = $.h;
        return typeof c != "number" || typeof R != "number" || typeof L != "number" || typeof v != "number" ? (console.error("Rect shape configuration is abnormal!"), false) : true;
      },
      draw: function(y, $) {
        var c = y.ctx, R = $.shape;
        c.beginPath();
        var L = R.x, v = R.y, V = R.w, X = R.h;
        c.rect(L, v, V, X), c.fill(), c.stroke(), c.closePath();
      },
      hoverCheck: function(y, $) {
        var c = $.shape, R = c.x, L = c.y, v = c.w, V = c.h;
        return (0, o.checkPointIsInRect)(y, R, L, v, V);
      },
      setGraphCenter: function(y, $) {
        var c = $.shape, R = $.style, L = c.x, v = c.y, V = c.w, X = c.h;
        R.graphCenter = [L + V / 2, v + X / 2];
      },
      move: function(y, $) {
        var c = y.movementX, R = y.movementY, L = $.shape;
        this.attr("shape", {
          x: L.x + c,
          y: L.y + R
        });
      }
    };
    e.rect = U;
    var F = {
      shape: {
        rx: 0,
        ry: 0,
        r: 0
      },
      validator: function(y) {
        var $ = y.shape, c = $.rx, R = $.ry, L = $.r;
        return typeof c != "number" || typeof R != "number" || typeof L != "number" ? (console.error("Ring shape configuration is abnormal!"), false) : true;
      },
      draw: function(y, $) {
        var c = y.ctx, R = $.shape;
        c.beginPath();
        var L = R.rx, v = R.ry, V = R.r;
        c.arc(L, v, V > 0 ? V : 0.01, 0, Math.PI * 2), c.stroke(), c.closePath();
      },
      hoverCheck: function(y, $) {
        var c = $.shape, R = $.style, L = c.rx, v = c.ry, V = c.r, X = R.lineWidth, Z = X / 2, u = V - Z, m = V + Z, h2 = (0, o.getTwoPointDistance)(y, [L, v]);
        return h2 >= u && h2 <= m;
      },
      setGraphCenter: function(y, $) {
        var c = $.shape, R = $.style, L = c.rx, v = c.ry;
        R.graphCenter = [L, v];
      },
      move: function(y, $) {
        var c = y.movementX, R = y.movementY, L = $.shape;
        this.attr("shape", {
          rx: L.rx + c,
          ry: L.ry + R
        });
      }
    };
    e.ring = F;
    var S = {
      shape: {
        rx: 0,
        ry: 0,
        r: 0,
        startAngle: 0,
        endAngle: 0,
        clockWise: true
      },
      validator: function(y) {
        var $ = y.shape, c = ["rx", "ry", "r", "startAngle", "endAngle"];
        return c.find(function(R) {
          return typeof $[R] != "number";
        }) ? (console.error("Arc shape configuration is abnormal!"), false) : true;
      },
      draw: function(y, $) {
        var c = y.ctx, R = $.shape;
        c.beginPath();
        var L = R.rx, v = R.ry, V = R.r, X = R.startAngle, Z = R.endAngle, u = R.clockWise;
        c.arc(L, v, V > 0 ? V : 1e-3, X, Z, !u), c.stroke(), c.closePath();
      },
      hoverCheck: function(y, $) {
        var c = $.shape, R = $.style, L = c.rx, v = c.ry, V = c.r, X = c.startAngle, Z = c.endAngle, u = c.clockWise, m = R.lineWidth, h2 = m / 2, P = V - h2, z = V + h2;
        return !(0, o.checkPointIsInSector)(y, L, v, P, X, Z, u) && (0, o.checkPointIsInSector)(y, L, v, z, X, Z, u);
      },
      setGraphCenter: function(y, $) {
        var c = $.shape, R = $.style, L = c.rx, v = c.ry;
        R.graphCenter = [L, v];
      },
      move: function(y, $) {
        var c = y.movementX, R = y.movementY, L = $.shape;
        this.attr("shape", {
          rx: L.rx + c,
          ry: L.ry + R
        });
      }
    };
    e.arc = S;
    var d = {
      shape: {
        rx: 0,
        ry: 0,
        r: 0,
        startAngle: 0,
        endAngle: 0,
        clockWise: true
      },
      validator: function(y) {
        var $ = y.shape, c = ["rx", "ry", "r", "startAngle", "endAngle"];
        return c.find(function(R) {
          return typeof $[R] != "number";
        }) ? (console.error("Sector shape configuration is abnormal!"), false) : true;
      },
      draw: function(y, $) {
        var c = y.ctx, R = $.shape;
        c.beginPath();
        var L = R.rx, v = R.ry, V = R.r, X = R.startAngle, Z = R.endAngle, u = R.clockWise;
        c.arc(L, v, V > 0 ? V : 0.01, X, Z, !u), c.lineTo(L, v), c.closePath(), c.stroke(), c.fill();
      },
      hoverCheck: function(y, $) {
        var c = $.shape, R = c.rx, L = c.ry, v = c.r, V = c.startAngle, X = c.endAngle, Z = c.clockWise;
        return (0, o.checkPointIsInSector)(y, R, L, v, V, X, Z);
      },
      setGraphCenter: function(y, $) {
        var c = $.shape, R = $.style, L = c.rx, v = c.ry;
        R.graphCenter = [L, v];
      },
      move: function(y, $) {
        var c = y.movementX, R = y.movementY, L = $.shape, v = L.rx, V = L.ry;
        this.attr("shape", {
          rx: v + c,
          ry: V + R
        });
      }
    };
    e.sector = d;
    var T = {
      shape: {
        rx: 0,
        ry: 0,
        r: 0,
        side: 0
      },
      validator: function(y) {
        var $ = y.shape, c = $.side, R = ["rx", "ry", "r", "side"];
        return R.find(function(L) {
          return typeof $[L] != "number";
        }) ? (console.error("RegPolygon shape configuration is abnormal!"), false) : c < 3 ? (console.error("RegPolygon at least trigon!"), false) : true;
      },
      draw: function(y, $) {
        var c = y.ctx, R = $.shape, L = $.cache;
        c.beginPath();
        var v = R.rx, V = R.ry, X = R.r, Z = R.side;
        if (!L.points || L.rx !== v || L.ry !== V || L.r !== X || L.side !== Z) {
          var u = (0, o.getRegularPolygonPoints)(v, V, X, Z);
          Object.assign(L, {
            points: u,
            rx: v,
            ry: V,
            r: X,
            side: Z
          });
        }
        var m = L.points;
        (0, l.drawPolylinePath)(c, m), c.closePath(), c.stroke(), c.fill();
      },
      hoverCheck: function(y, $) {
        var c = $.cache, R = c.points;
        return (0, o.checkPointIsInPolygon)(y, R);
      },
      setGraphCenter: function(y, $) {
        var c = $.shape, R = $.style, L = c.rx, v = c.ry;
        R.graphCenter = [L, v];
      },
      move: function(y, $) {
        var c = y.movementX, R = y.movementY, L = $.shape, v = $.cache, V = L.rx, X = L.ry;
        v.rx += c, v.ry += R, this.attr("shape", {
          rx: V + c,
          ry: X + R
        }), v.points = v.points.map(function(Z) {
          var u = (0, t.default)(Z, 2), m = u[0], h2 = u[1];
          return [m + c, h2 + R];
        });
      }
    };
    e.regPolygon = T;
    var E = {
      shape: {
        points: [],
        close: false
      },
      validator: function(y) {
        var $ = y.shape, c = $.points;
        return c instanceof Array ? true : (console.error("Polyline points should be an array!"), false);
      },
      draw: function(y, $) {
        var c = y.ctx, R = $.shape, L = $.style.lineWidth;
        c.beginPath();
        var v = R.points, V = R.close;
        L === 1 && (v = (0, o.eliminateBlur)(v)), (0, l.drawPolylinePath)(c, v), V && (c.closePath(), c.fill()), c.stroke();
      },
      hoverCheck: function(y, $) {
        var c = $.shape, R = $.style, L = c.points, v = c.close, V = R.lineWidth;
        return v ? (0, o.checkPointIsInPolygon)(y, L) : (0, o.checkPointIsNearPolyline)(y, L, V);
      },
      setGraphCenter: function(y, $) {
        var c = $.shape, R = $.style, L = c.points;
        R.graphCenter = L[0];
      },
      move: function(y, $) {
        var c = y.movementX, R = y.movementY, L = $.shape, v = L.points, V = v.map(function(X) {
          var Z = (0, t.default)(X, 2), u = Z[0], m = Z[1];
          return [u + c, m + R];
        });
        this.attr("shape", {
          points: V
        });
      }
    };
    e.polyline = E;
    var q = {
      shape: {
        points: [],
        close: false
      },
      validator: function(y) {
        var $ = y.shape, c = $.points;
        return c instanceof Array ? true : (console.error("Smoothline points should be an array!"), false);
      },
      draw: function(y, $) {
        var c = y.ctx, R = $.shape, L = $.cache, v = R.points, V = R.close;
        if (!L.points || L.points.toString() !== v.toString()) {
          var X = C(v, V), Z = x(X);
          Object.assign(L, {
            points: (0, o.deepClone)(v, true),
            bezierCurve: X,
            hoverPoints: Z
          });
        }
        var u = L.bezierCurve;
        c.beginPath(), (0, l.drawBezierCurvePath)(c, u.slice(1), u[0]), V && (c.closePath(), c.fill()), c.stroke();
      },
      hoverCheck: function(y, $) {
        var c = $.cache, R = $.shape, L = $.style, v = c.hoverPoints, V = R.close, X = L.lineWidth;
        return V ? (0, o.checkPointIsInPolygon)(y, v) : (0, o.checkPointIsNearPolyline)(y, v, X);
      },
      setGraphCenter: function(y, $) {
        var c = $.shape, R = $.style, L = c.points;
        R.graphCenter = L[0];
      },
      move: function(y, $) {
        var c = y.movementX, R = y.movementY, L = $.shape, v = $.cache, V = L.points, X = V.map(function(P) {
          var z = (0, t.default)(P, 2), K = z[0], ee = z[1];
          return [K + c, ee + R];
        });
        v.points = X;
        var Z = (0, t.default)(v.bezierCurve[0], 2), u = Z[0], m = Z[1], h2 = v.bezierCurve.slice(1);
        v.bezierCurve = [[u + c, m + R]].concat((0, n.default)(h2.map(function(P) {
          return P.map(function(z) {
            var K = (0, t.default)(z, 2), ee = K[0], ae = K[1];
            return [ee + c, ae + R];
          });
        }))), v.hoverPoints = v.hoverPoints.map(function(P) {
          var z = (0, t.default)(P, 2), K = z[0], ee = z[1];
          return [K + c, ee + R];
        }), this.attr("shape", {
          points: X
        });
      }
    };
    e.smoothline = q;
    var N = {
      shape: {
        points: [],
        close: false
      },
      validator: function(y) {
        var $ = y.shape, c = $.points;
        return c instanceof Array ? true : (console.error("BezierCurve points should be an array!"), false);
      },
      draw: function(y, $) {
        var c = y.ctx, R = $.shape, L = $.cache, v = R.points, V = R.close;
        if (!L.points || L.points.toString() !== v.toString()) {
          var X = x(v, 20);
          Object.assign(L, {
            points: (0, o.deepClone)(v, true),
            hoverPoints: X
          });
        }
        c.beginPath(), (0, l.drawBezierCurvePath)(c, v.slice(1), v[0]), V && (c.closePath(), c.fill()), c.stroke();
      },
      hoverCheck: function(y, $) {
        var c = $.cache, R = $.shape, L = $.style, v = c.hoverPoints, V = R.close, X = L.lineWidth;
        return V ? (0, o.checkPointIsInPolygon)(y, v) : (0, o.checkPointIsNearPolyline)(y, v, X);
      },
      setGraphCenter: function(y, $) {
        var c = $.shape, R = $.style, L = c.points;
        R.graphCenter = L[0];
      },
      move: function(y, $) {
        var c = y.movementX, R = y.movementY, L = $.shape, v = $.cache, V = L.points, X = (0, t.default)(V[0], 2), Z = X[0], u = X[1], m = V.slice(1), h2 = [[Z + c, u + R]].concat((0, n.default)(m.map(function(P) {
          return P.map(function(z) {
            var K = (0, t.default)(z, 2), ee = K[0], ae = K[1];
            return [ee + c, ae + R];
          });
        })));
        v.points = h2, v.hoverPoints = v.hoverPoints.map(function(P) {
          var z = (0, t.default)(P, 2), K = z[0], ee = z[1];
          return [K + c, ee + R];
        }), this.attr("shape", {
          points: h2
        });
      }
    };
    e.bezierCurve = N;
    var g = {
      shape: {
        content: "",
        position: [],
        maxWidth: void 0,
        rowGap: 0
      },
      validator: function(y) {
        var $ = y.shape, c = $.content, R = $.position, L = $.rowGap;
        return typeof c != "string" ? (console.error("Text content should be a string!"), false) : R instanceof Array ? typeof L != "number" ? (console.error("Text rowGap should be a number!"), false) : true : (console.error("Text position should be an array!"), false);
      },
      draw: function(y, $) {
        var c = y.ctx, R = $.shape, L = R.content, v = R.position, V = R.maxWidth, X = R.rowGap, Z = c.textBaseline, u = c.font, m = parseInt(u.replace(/\D/g, "")), h2 = v, P = (0, t.default)(h2, 2), z = P[0], K = P[1];
        L = L.split(`
`);
        var ee = L.length, ae = m + X, le = ee * ae - X, ve = 0;
        Z === "middle" && (ve = le / 2, K += m / 2), Z === "bottom" && (ve = le, K += m), v = new Array(ee).fill(0).map(function(Q, ie) {
          return [z, K + ie * ae - ve];
        }), c.beginPath(), L.forEach(function(Q, ie) {
          c.fillText.apply(c, [Q].concat((0, n.default)(v[ie]), [V])), c.strokeText.apply(c, [Q].concat((0, n.default)(v[ie]), [V]));
        }), c.closePath();
      },
      hoverCheck: function(y, $) {
        return $.shape, $.style, false;
      },
      setGraphCenter: function(y, $) {
        var c = $.shape, R = $.style, L = c.position;
        R.graphCenter = (0, n.default)(L);
      },
      move: function(y, $) {
        var c = y.movementX, R = y.movementY, L = $.shape, v = (0, t.default)(L.position, 2), V = v[0], X = v[1];
        this.attr("shape", {
          position: [V + c, X + R]
        });
      }
    };
    e.text = g;
    var _ = /* @__PURE__ */ new Map([["circle", I], ["ellipse", W], ["rect", U], ["ring", F], ["arc", S], ["sector", d], ["regPolygon", T], ["polyline", E], ["smoothline", q], ["bezierCurve", N], ["text", g]]), f = _;
    e.default = f;
    function G(k, y) {
      if (!k || !y) {
        console.error("ExtendNewGraph Missing Parameters!");
        return;
      }
      if (!y.shape) {
        console.error("Required attribute of shape to extendNewGraph!");
        return;
      }
      if (!y.validator) {
        console.error("Required function of validator to extendNewGraph!");
        return;
      }
      if (!y.draw) {
        console.error("Required function of draw to extendNewGraph!");
        return;
      }
      _.set(k, y);
    }
  }(ur)), ur;
}
var fr = {};
var dr = { exports: {} };
var Mn;
function ko() {
  return Mn || (Mn = 1, function(e) {
    var r = function(n) {
      var t = Object.prototype, a = t.hasOwnProperty, o, l = typeof Symbol == "function" ? Symbol : {}, C = l.iterator || "@@iterator", x = l.asyncIterator || "@@asyncIterator", I = l.toStringTag || "@@toStringTag";
      function W(m, h2, P) {
        return Object.defineProperty(m, h2, {
          value: P,
          enumerable: true,
          configurable: true,
          writable: true
        }), m[h2];
      }
      try {
        W({}, "");
      } catch {
        W = function(h2, P, z) {
          return h2[P] = z;
        };
      }
      function U(m, h2, P, z) {
        var K = h2 && h2.prototype instanceof N ? h2 : N, ee = Object.create(K.prototype), ae = new X(z || []);
        return ee._invoke = R(m, P, ae), ee;
      }
      n.wrap = U;
      function F(m, h2, P) {
        try {
          return { type: "normal", arg: m.call(h2, P) };
        } catch (z) {
          return { type: "throw", arg: z };
        }
      }
      var S = "suspendedStart", d = "suspendedYield", T = "executing", E = "completed", q = {};
      function N() {
      }
      function g() {
      }
      function _() {
      }
      var f = {};
      W(f, C, function() {
        return this;
      });
      var G = Object.getPrototypeOf, k = G && G(G(Z([])));
      k && k !== t && a.call(k, C) && (f = k);
      var y = _.prototype = N.prototype = Object.create(f);
      g.prototype = _, W(y, "constructor", _), W(_, "constructor", g), g.displayName = W(
        _,
        I,
        "GeneratorFunction"
      );
      function $(m) {
        ["next", "throw", "return"].forEach(function(h2) {
          W(m, h2, function(P) {
            return this._invoke(h2, P);
          });
        });
      }
      n.isGeneratorFunction = function(m) {
        var h2 = typeof m == "function" && m.constructor;
        return h2 ? h2 === g || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (h2.displayName || h2.name) === "GeneratorFunction" : false;
      }, n.mark = function(m) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(m, _) : (m.__proto__ = _, W(m, I, "GeneratorFunction")), m.prototype = Object.create(y), m;
      }, n.awrap = function(m) {
        return { __await: m };
      };
      function c(m, h2) {
        function P(ee, ae, le, ve) {
          var Q = F(m[ee], m, ae);
          if (Q.type === "throw")
            ve(Q.arg);
          else {
            var ie = Q.arg, ce = ie.value;
            return ce && typeof ce == "object" && a.call(ce, "__await") ? h2.resolve(ce.__await).then(function(fe) {
              P("next", fe, le, ve);
            }, function(fe) {
              P("throw", fe, le, ve);
            }) : h2.resolve(ce).then(function(fe) {
              ie.value = fe, le(ie);
            }, function(fe) {
              return P("throw", fe, le, ve);
            });
          }
        }
        var z;
        function K(ee, ae) {
          function le() {
            return new h2(function(ve, Q) {
              P(ee, ae, ve, Q);
            });
          }
          return z = // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          z ? z.then(
            le,
            // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            le
          ) : le();
        }
        this._invoke = K;
      }
      $(c.prototype), W(c.prototype, x, function() {
        return this;
      }), n.AsyncIterator = c, n.async = function(m, h2, P, z, K) {
        K === void 0 && (K = Promise);
        var ee = new c(
          U(m, h2, P, z),
          K
        );
        return n.isGeneratorFunction(h2) ? ee : ee.next().then(function(ae) {
          return ae.done ? ae.value : ee.next();
        });
      };
      function R(m, h2, P) {
        var z = S;
        return function(ee, ae) {
          if (z === T)
            throw new Error("Generator is already running");
          if (z === E) {
            if (ee === "throw")
              throw ae;
            return u();
          }
          for (P.method = ee, P.arg = ae; ; ) {
            var le = P.delegate;
            if (le) {
              var ve = L(le, P);
              if (ve) {
                if (ve === q)
                  continue;
                return ve;
              }
            }
            if (P.method === "next")
              P.sent = P._sent = P.arg;
            else if (P.method === "throw") {
              if (z === S)
                throw z = E, P.arg;
              P.dispatchException(P.arg);
            } else
              P.method === "return" && P.abrupt("return", P.arg);
            z = T;
            var Q = F(m, h2, P);
            if (Q.type === "normal") {
              if (z = P.done ? E : d, Q.arg === q)
                continue;
              return {
                value: Q.arg,
                done: P.done
              };
            } else
              Q.type === "throw" && (z = E, P.method = "throw", P.arg = Q.arg);
          }
        };
      }
      function L(m, h2) {
        var P = m.iterator[h2.method];
        if (P === o) {
          if (h2.delegate = null, h2.method === "throw") {
            if (m.iterator.return && (h2.method = "return", h2.arg = o, L(m, h2), h2.method === "throw"))
              return q;
            h2.method = "throw", h2.arg = new TypeError(
              "The iterator does not provide a 'throw' method"
            );
          }
          return q;
        }
        var z = F(P, m.iterator, h2.arg);
        if (z.type === "throw")
          return h2.method = "throw", h2.arg = z.arg, h2.delegate = null, q;
        var K = z.arg;
        if (!K)
          return h2.method = "throw", h2.arg = new TypeError("iterator result is not an object"), h2.delegate = null, q;
        if (K.done)
          h2[m.resultName] = K.value, h2.next = m.nextLoc, h2.method !== "return" && (h2.method = "next", h2.arg = o);
        else
          return K;
        return h2.delegate = null, q;
      }
      $(y), W(y, I, "Generator"), W(y, C, function() {
        return this;
      }), W(y, "toString", function() {
        return "[object Generator]";
      });
      function v(m) {
        var h2 = { tryLoc: m[0] };
        1 in m && (h2.catchLoc = m[1]), 2 in m && (h2.finallyLoc = m[2], h2.afterLoc = m[3]), this.tryEntries.push(h2);
      }
      function V(m) {
        var h2 = m.completion || {};
        h2.type = "normal", delete h2.arg, m.completion = h2;
      }
      function X(m) {
        this.tryEntries = [{ tryLoc: "root" }], m.forEach(v, this), this.reset(true);
      }
      n.keys = function(m) {
        var h2 = [];
        for (var P in m)
          h2.push(P);
        return h2.reverse(), function z() {
          for (; h2.length; ) {
            var K = h2.pop();
            if (K in m)
              return z.value = K, z.done = false, z;
          }
          return z.done = true, z;
        };
      };
      function Z(m) {
        if (m) {
          var h2 = m[C];
          if (h2)
            return h2.call(m);
          if (typeof m.next == "function")
            return m;
          if (!isNaN(m.length)) {
            var P = -1, z = function K() {
              for (; ++P < m.length; )
                if (a.call(m, P))
                  return K.value = m[P], K.done = false, K;
              return K.value = o, K.done = true, K;
            };
            return z.next = z;
          }
        }
        return { next: u };
      }
      n.values = Z;
      function u() {
        return { value: o, done: true };
      }
      return X.prototype = {
        constructor: X,
        reset: function(m) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = o, this.done = false, this.delegate = null, this.method = "next", this.arg = o, this.tryEntries.forEach(V), !m)
            for (var h2 in this)
              h2.charAt(0) === "t" && a.call(this, h2) && !isNaN(+h2.slice(1)) && (this[h2] = o);
        },
        stop: function() {
          this.done = true;
          var m = this.tryEntries[0], h2 = m.completion;
          if (h2.type === "throw")
            throw h2.arg;
          return this.rval;
        },
        dispatchException: function(m) {
          if (this.done)
            throw m;
          var h2 = this;
          function P(ve, Q) {
            return ee.type = "throw", ee.arg = m, h2.next = ve, Q && (h2.method = "next", h2.arg = o), !!Q;
          }
          for (var z = this.tryEntries.length - 1; z >= 0; --z) {
            var K = this.tryEntries[z], ee = K.completion;
            if (K.tryLoc === "root")
              return P("end");
            if (K.tryLoc <= this.prev) {
              var ae = a.call(K, "catchLoc"), le = a.call(K, "finallyLoc");
              if (ae && le) {
                if (this.prev < K.catchLoc)
                  return P(K.catchLoc, true);
                if (this.prev < K.finallyLoc)
                  return P(K.finallyLoc);
              } else if (ae) {
                if (this.prev < K.catchLoc)
                  return P(K.catchLoc, true);
              } else if (le) {
                if (this.prev < K.finallyLoc)
                  return P(K.finallyLoc);
              } else
                throw new Error("try statement without catch or finally");
            }
          }
        },
        abrupt: function(m, h2) {
          for (var P = this.tryEntries.length - 1; P >= 0; --P) {
            var z = this.tryEntries[P];
            if (z.tryLoc <= this.prev && a.call(z, "finallyLoc") && this.prev < z.finallyLoc) {
              var K = z;
              break;
            }
          }
          K && (m === "break" || m === "continue") && K.tryLoc <= h2 && h2 <= K.finallyLoc && (K = null);
          var ee = K ? K.completion : {};
          return ee.type = m, ee.arg = h2, K ? (this.method = "next", this.next = K.finallyLoc, q) : this.complete(ee);
        },
        complete: function(m, h2) {
          if (m.type === "throw")
            throw m.arg;
          return m.type === "break" || m.type === "continue" ? this.next = m.arg : m.type === "return" ? (this.rval = this.arg = m.arg, this.method = "return", this.next = "end") : m.type === "normal" && h2 && (this.next = h2), q;
        },
        finish: function(m) {
          for (var h2 = this.tryEntries.length - 1; h2 >= 0; --h2) {
            var P = this.tryEntries[h2];
            if (P.finallyLoc === m)
              return this.complete(P.completion, P.afterLoc), V(P), q;
          }
        },
        catch: function(m) {
          for (var h2 = this.tryEntries.length - 1; h2 >= 0; --h2) {
            var P = this.tryEntries[h2];
            if (P.tryLoc === m) {
              var z = P.completion;
              if (z.type === "throw") {
                var K = z.arg;
                V(P);
              }
              return K;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function(m, h2, P) {
          return this.delegate = {
            iterator: Z(m),
            resultName: h2,
            nextLoc: P
          }, this.method === "next" && (this.arg = o), q;
        }
      }, n;
    }(
      // If this script is executing as a CommonJS module, use module.exports
      // as the regeneratorRuntime namespace. Otherwise create a new empty
      // object. Either way, the resulting object will be used to initialize
      // the regeneratorRuntime variable at the top of this file.
      e.exports
    );
    try {
      regeneratorRuntime = r;
    } catch {
      typeof globalThis == "object" ? globalThis.regeneratorRuntime = r : Function("r", "regeneratorRuntime = r")(r);
    }
  }(dr)), dr.exports;
}
var hr;
var Rn;
function Ao() {
  return Rn || (Rn = 1, hr = ko()), hr;
}
var vr = { exports: {} };
var Dn;
function Lo() {
  return Dn || (Dn = 1, function(e) {
    function r(t, a, o, l, C, x, I) {
      try {
        var W = t[x](I), U = W.value;
      } catch (F) {
        o(F);
        return;
      }
      W.done ? a(U) : Promise.resolve(U).then(l, C);
    }
    function n(t) {
      return function() {
        var a = this, o = arguments;
        return new Promise(function(l, C) {
          var x = t.apply(a, o);
          function I(U) {
            r(x, l, C, I, W, "next", U);
          }
          function W(U) {
            r(x, l, C, I, W, "throw", U);
          }
          I(void 0);
        });
      };
    }
    e.exports = n, e.exports.__esModule = true, e.exports.default = e.exports;
  }(vr)), vr.exports;
}
var pr = {};
var Tn;
function So() {
  return Tn || (Tn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: true
    }), e.default = void 0;
    var n = r(Te()), t = r(mt()), a = yt, o = Be(), l = function S(d) {
      (0, t.default)(this, S), this.colorProcessor(d);
      var T = {
        /**
         * @description Rgba value of graph fill color
         * @type {Array}
         * @default fill = [0, 0, 0, 1]
         */
        fill: [0, 0, 0, 1],
        /**
         * @description Rgba value of graph stroke color
         * @type {Array}
         * @default stroke = [0, 0, 0, 1]
         */
        stroke: [0, 0, 0, 0],
        /**
         * @description Opacity of graph
         * @type {Number}
         * @default opacity = 1
         */
        opacity: 1,
        /**
         * @description LineCap of Ctx
         * @type {String}
         * @default lineCap = null
         * @example lineCap = 'butt'|'round'|'square'
         */
        lineCap: null,
        /**
         * @description Linejoin of Ctx
         * @type {String}
         * @default lineJoin = null
         * @example lineJoin = 'round'|'bevel'|'miter'
         */
        lineJoin: null,
        /**
         * @description LineDash of Ctx
         * @type {Array}
         * @default lineDash = null
         * @example lineDash = [10, 10]
         */
        lineDash: null,
        /**
         * @description LineDashOffset of Ctx
         * @type {Number}
         * @default lineDashOffset = null
         * @example lineDashOffset = 10
         */
        lineDashOffset: null,
        /**
         * @description ShadowBlur of Ctx
         * @type {Number}
         * @default shadowBlur = 0
         */
        shadowBlur: 0,
        /**
         * @description Rgba value of graph shadow color
         * @type {Array}
         * @default shadowColor = [0, 0, 0, 0]
         */
        shadowColor: [0, 0, 0, 0],
        /**
         * @description ShadowOffsetX of Ctx
         * @type {Number}
         * @default shadowOffsetX = 0
         */
        shadowOffsetX: 0,
        /**
         * @description ShadowOffsetY of Ctx
         * @type {Number}
         * @default shadowOffsetY = 0
         */
        shadowOffsetY: 0,
        /**
         * @description LineWidth of Ctx
         * @type {Number}
         * @default lineWidth = 0
         */
        lineWidth: 0,
        /**
         * @description Center point of the graph
         * @type {Array}
         * @default graphCenter = null
         * @example graphCenter = [10, 10]
         */
        graphCenter: null,
        /**
         * @description Graph scale
         * @type {Array}
         * @default scale = null
         * @example scale = [1.5, 1.5]
         */
        scale: null,
        /**
         * @description Graph rotation degree
         * @type {Number}
         * @default rotate = null
         * @example rotate = 10
         */
        rotate: null,
        /**
         * @description Graph translate distance
         * @type {Array}
         * @default translate = null
         * @example translate = [10, 10]
         */
        translate: null,
        /**
         * @description Cursor status when hover
         * @type {String}
         * @default hoverCursor = 'pointer'
         * @example hoverCursor = 'default'|'pointer'|'auto'|'crosshair'|'move'|'wait'|...
         */
        hoverCursor: "pointer",
        /**
         * @description Font style of Ctx
         * @type {String}
         * @default fontStyle = 'normal'
         * @example fontStyle = 'normal'|'italic'|'oblique'
         */
        fontStyle: "normal",
        /**
         * @description Font varient of Ctx
         * @type {String}
         * @default fontVarient = 'normal'
         * @example fontVarient = 'normal'|'small-caps'
         */
        fontVarient: "normal",
        /**
         * @description Font weight of Ctx
         * @type {String|Number}
         * @default fontWeight = 'normal'
         * @example fontWeight = 'normal'|'bold'|'bolder'|'lighter'|Number
         */
        fontWeight: "normal",
        /**
         * @description Font size of Ctx
         * @type {Number}
         * @default fontSize = 10
         */
        fontSize: 10,
        /**
         * @description Font family of Ctx
         * @type {String}
         * @default fontFamily = 'Arial'
         */
        fontFamily: "Arial",
        /**
         * @description TextAlign of Ctx
         * @type {String}
         * @default textAlign = 'center'
         * @example textAlign = 'start'|'end'|'left'|'right'|'center'
         */
        textAlign: "center",
        /**
         * @description TextBaseline of Ctx
         * @type {String}
         * @default textBaseline = 'middle'
         * @example textBaseline = 'top'|'bottom'|'middle'|'alphabetic'|'hanging'
         */
        textBaseline: "middle",
        /**
         * @description The color used to create the gradient
         * @type {Array}
         * @default gradientColor = null
         * @example gradientColor = ['#000', '#111', '#222']
         */
        gradientColor: null,
        /**
         * @description Gradient type
         * @type {String}
         * @default gradientType = 'linear'
         * @example gradientType = 'linear' | 'radial'
         */
        gradientType: "linear",
        /**
         * @description Gradient params
         * @type {Array}
         * @default gradientParams = null
         * @example gradientParams = [x0, y0, x1, y1] (Linear Gradient)
         * @example gradientParams = [x0, y0, r0, x1, y1, r1] (Radial Gradient)
         */
        gradientParams: null,
        /**
         * @description When to use gradients
         * @type {String}
         * @default gradientWith = 'stroke'
         * @example gradientWith = 'stroke' | 'fill'
         */
        gradientWith: "stroke",
        /**
         * @description Gradient color stops
         * @type {String}
         * @default gradientStops = 'auto'
         * @example gradientStops = 'auto' | [0, .2, .3, 1]
         */
        gradientStops: "auto",
        /**
         * @description Extended color that supports animation transition
         * @type {Array|Object}
         * @default colors = null
         * @example colors = ['#000', '#111', '#222', 'red' ]
         * @example colors = { a: '#000', b: '#111' }
         */
        colors: null
      };
      Object.assign(this, T, d);
    };
    e.default = l, l.prototype.colorProcessor = function(S) {
      var d = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false, T = d ? a.getColorFromRgbValue : a.getRgbaValue, E = ["fill", "stroke", "shadowColor"], q = Object.keys(S), N = q.filter(function(G) {
        return E.find(function(k) {
          return k === G;
        });
      });
      N.forEach(function(G) {
        return S[G] = T(S[G]);
      });
      var g = S.gradientColor, _ = S.colors;
      if (g && (S.gradientColor = g.map(function(G) {
        return T(G);
      })), _) {
        var f = Object.keys(_);
        f.forEach(function(G) {
          return _[G] = T(_[G]);
        });
      }
    }, l.prototype.initStyle = function(S) {
      C(S, this), I(S, this), W(S, this);
    };
    function C(S, d) {
      S.save();
      var T = d.graphCenter, E = d.rotate, q = d.scale, N = d.translate;
      T instanceof Array && (S.translate.apply(S, (0, n.default)(T)), E && S.rotate(E * Math.PI / 180), q instanceof Array && S.scale.apply(S, (0, n.default)(q)), N && S.translate.apply(S, (0, n.default)(N)), S.translate(-T[0], -T[1]));
    }
    var x = ["lineCap", "lineJoin", "lineDashOffset", "shadowOffsetX", "shadowOffsetY", "lineWidth", "textAlign", "textBaseline"];
    function I(S, d) {
      var T = d.fill, E = d.stroke, q = d.shadowColor, N = d.opacity;
      x.forEach(function(c) {
        (c || typeof c == "number") && (S[c] = d[c]);
      }), T = (0, n.default)(T), E = (0, n.default)(E), q = (0, n.default)(q), T[3] *= N, E[3] *= N, q[3] *= N, S.fillStyle = (0, a.getColorFromRgbValue)(T), S.strokeStyle = (0, a.getColorFromRgbValue)(E), S.shadowColor = (0, a.getColorFromRgbValue)(q);
      var g = d.lineDash, _ = d.shadowBlur;
      g && (g = g.map(function(c) {
        return c >= 0 ? c : 0;
      }), S.setLineDash(g)), typeof _ == "number" && (S.shadowBlur = _ > 0 ? _ : 1e-3);
      var f = d.fontStyle, G = d.fontVarient, k = d.fontWeight, y = d.fontSize, $ = d.fontFamily;
      S.font = f + " " + G + " " + k + " " + y + "px " + $;
    }
    function W(S, d) {
      if (U(d)) {
        var T = d.gradientColor, E = d.gradientParams, q = d.gradientType, N = d.gradientWith, g = d.gradientStops, _ = d.opacity;
        T = T.map(function(G) {
          var k = G[3] * _, y = (0, n.default)(G);
          return y[3] = k, y;
        }), T = T.map(function(G) {
          return (0, a.getColorFromRgbValue)(G);
        }), g === "auto" && (g = F(T));
        var f = S["create".concat(q.slice(0, 1).toUpperCase() + q.slice(1), "Gradient")].apply(S, (0, n.default)(E));
        g.forEach(function(G, k) {
          return f.addColorStop(G, T[k]);
        }), S["".concat(N, "Style")] = f;
      }
    }
    function U(S) {
      var d = S.gradientColor, T = S.gradientParams, E = S.gradientType, q = S.gradientWith, N = S.gradientStops;
      if (!d || !T)
        return false;
      if (d.length === 1)
        return console.warn("The gradient needs to provide at least two colors"), false;
      if (E !== "linear" && E !== "radial")
        return console.warn("GradientType only supports linear or radial, current value is " + E), false;
      var g = T.length;
      return E === "linear" && g !== 4 || E === "radial" && g !== 6 ? (console.warn("The expected length of gradientParams is " + (E === "linear" ? "4" : "6")), false) : q !== "fill" && q !== "stroke" ? (console.warn("GradientWith only supports fill or stroke, current value is " + q), false) : N !== "auto" && !(N instanceof Array) ? (console.warn("gradientStops only supports 'auto' or Number Array ([0, .5, 1]), current value is " + N), false) : true;
    }
    function F(S) {
      var d = 1 / (S.length - 1);
      return S.map(function(T, E) {
        return d * E;
      });
    }
    l.prototype.restoreTransform = function(S) {
      S.restore();
    }, l.prototype.update = function(S) {
      this.colorProcessor(S), Object.assign(this, S);
    }, l.prototype.getStyle = function() {
      var S = (0, o.deepClone)(this, true);
      return this.colorProcessor(S, true), S;
    };
  }(pr)), pr;
}
var gr = {};
var mr = {};
var Bn;
function Oo() {
  return Bn || (Bn = 1, function(e) {
    Object.defineProperty(e, "__esModule", {
      value: true
    }), e.default = e.easeInOutBounce = e.easeOutBounce = e.easeInBounce = e.easeInOutElastic = e.easeOutElastic = e.easeInElastic = e.easeInOutBack = e.easeOutBack = e.easeInBack = e.easeInOutQuint = e.easeOutQuint = e.easeInQuint = e.easeInOutQuart = e.easeOutQuart = e.easeInQuart = e.easeInOutCubic = e.easeOutCubic = e.easeInCubic = e.easeInOutQuad = e.easeOutQuad = e.easeInQuad = e.easeInOutSine = e.easeOutSine = e.easeInSine = e.linear = void 0;
    var r = [[[0, 1], "", [0.33, 0.67]], [[1, 0], [0.67, 0.33]]];
    e.linear = r;
    var n = [[[0, 1]], [[0.538, 0.564], [0.169, 0.912], [0.88, 0.196]], [[1, 0]]];
    e.easeInSine = n;
    var t = [[[0, 1]], [[0.444, 0.448], [0.169, 0.736], [0.718, 0.16]], [[1, 0]]];
    e.easeOutSine = t;
    var a = [[[0, 1]], [[0.5, 0.5], [0.2, 1], [0.8, 0]], [[1, 0]]];
    e.easeInOutSine = a;
    var o = [[[0, 1]], [[0.55, 0.584], [0.231, 0.904], [0.868, 0.264]], [[1, 0]]];
    e.easeInQuad = o;
    var l = [[[0, 1]], [[0.413, 0.428], [0.065, 0.816], [0.76, 0.04]], [[1, 0]]];
    e.easeOutQuad = l;
    var C = [[[0, 1]], [[0.5, 0.5], [0.3, 0.9], [0.7, 0.1]], [[1, 0]]];
    e.easeInOutQuad = C;
    var x = [[[0, 1]], [[0.679, 0.688], [0.366, 0.992], [0.992, 0.384]], [[1, 0]]];
    e.easeInCubic = x;
    var I = [[[0, 1]], [[0.321, 0.312], [8e-3, 0.616], [0.634, 8e-3]], [[1, 0]]];
    e.easeOutCubic = I;
    var W = [[[0, 1]], [[0.5, 0.5], [0.3, 1], [0.7, 0]], [[1, 0]]];
    e.easeInOutCubic = W;
    var U = [[[0, 1]], [[0.812, 0.74], [0.611, 0.988], [1.013, 0.492]], [[1, 0]]];
    e.easeInQuart = U;
    var F = [[[0, 1]], [[0.152, 0.244], [1e-3, 0.448], [0.285, -0.02]], [[1, 0]]];
    e.easeOutQuart = F;
    var S = [[[0, 1]], [[0.5, 0.5], [0.4, 1], [0.6, 0]], [[1, 0]]];
    e.easeInOutQuart = S;
    var d = [[[0, 1]], [[0.857, 0.856], [0.714, 1], [1, 0.712]], [[1, 0]]];
    e.easeInQuint = d;
    var T = [[[0, 1]], [[0.108, 0.2], [1e-3, 0.4], [0.214, -0.012]], [[1, 0]]];
    e.easeOutQuint = T;
    var E = [[[0, 1]], [[0.5, 0.5], [0.5, 1], [0.5, 0]], [[1, 0]]];
    e.easeInOutQuint = E;
    var q = [[[0, 1]], [[0.667, 0.896], [0.38, 1.184], [0.955, 0.616]], [[1, 0]]];
    e.easeInBack = q;
    var N = [[[0, 1]], [[0.335, 0.028], [0.061, 0.22], [0.631, -0.18]], [[1, 0]]];
    e.easeOutBack = N;
    var g = [[[0, 1]], [[0.5, 0.5], [0.4, 1.4], [0.6, -0.4]], [[1, 0]]];
    e.easeInOutBack = g;
    var _ = [[[0, 1]], [[0.474, 0.964], [0.382, 0.988], [0.557, 0.952]], [[0.619, 1.076], [0.565, 1.088], [0.669, 1.08]], [[0.77, 0.916], [0.712, 0.924], [0.847, 0.904]], [[0.911, 1.304], [0.872, 1.316], [0.961, 1.34]], [[1, 0]]];
    e.easeInElastic = _;
    var f = [[[0, 1]], [[0.073, -0.32], [0.034, -0.328], [0.104, -0.344]], [[0.191, 0.092], [0.11, 0.06], [0.256, 0.08]], [[0.31, -0.076], [0.26, -0.068], [0.357, -0.076]], [[0.432, 0.032], [0.362, 0.028], [0.683, -4e-3]], [[1, 0]]];
    e.easeOutElastic = f;
    var G = [[[0, 1]], [[0.21, 0.94], [0.167, 0.884], [0.252, 0.98]], [[0.299, 1.104], [0.256, 1.092], [0.347, 1.108]], [[0.5, 0.496], [0.451, 0.672], [0.548, 0.324]], [[0.696, -0.108], [0.652, -0.112], [0.741, -0.124]], [[0.805, 0.064], [0.756, 0.012], [0.866, 0.096]], [[1, 0]]];
    e.easeInOutElastic = G;
    var k = [[[0, 1]], [[0.148, 1], [0.075, 0.868], [0.193, 0.848]], [[0.326, 1], [0.276, 0.836], [0.405, 0.712]], [[0.6, 1], [0.511, 0.708], [0.671, 0.348]], [[1, 0]]];
    e.easeInBounce = k;
    var y = [[[0, 1]], [[0.357, 4e-3], [0.27, 0.592], [0.376, 0.252]], [[0.604, -4e-3], [0.548, 0.312], [0.669, 0.184]], [[0.82, 0], [0.749, 0.184], [0.905, 0.132]], [[1, 0]]];
    e.easeOutBounce = y;
    var $ = [[[0, 1]], [[0.102, 1], [0.05, 0.864], [0.117, 0.86]], [[0.216, 0.996], [0.208, 0.844], [0.227, 0.808]], [[0.347, 0.996], [0.343, 0.8], [0.48, 0.292]], [[0.635, 4e-3], [0.511, 0.676], [0.656, 0.208]], [[0.787, 0], [0.76, 0.2], [0.795, 0.144]], [[0.905, -4e-3], [0.899, 0.164], [0.944, 0.144]], [[1, 0]]];
    e.easeInOutBounce = $;
    var c = /* @__PURE__ */ new Map([["linear", r], ["easeInSine", n], ["easeOutSine", t], ["easeInOutSine", a], ["easeInQuad", o], ["easeOutQuad", l], ["easeInOutQuad", C], ["easeInCubic", x], ["easeOutCubic", I], ["easeInOutCubic", W], ["easeInQuart", U], ["easeOutQuart", F], ["easeInOutQuart", S], ["easeInQuint", d], ["easeOutQuint", T], ["easeInOutQuint", E], ["easeInBack", q], ["easeOutBack", N], ["easeInOutBack", g], ["easeInElastic", _], ["easeOutElastic", f], ["easeInOutElastic", G], ["easeInBounce", k], ["easeOutBounce", y], ["easeInOutBounce", $]]);
    e.default = c;
  }(mr)), mr;
}
var Fn;
function Go() {
  return Fn || (Fn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: true
    }), e.transition = l, e.injectNewCurve = g, e.default = void 0;
    var n = r(Fe()), t = r(je()), a = r(Oo()), o = "linear";
    function l(f) {
      var G = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, k = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null, y = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 30, $ = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      if (!C.apply(void 0, arguments))
        return false;
      try {
        var c = x(f), R = I(c, y);
        return !$ || typeof k == "number" ? d(G, k, R) : N(G, k, R);
      } catch {
        return console.warn("Transition parameter may be abnormal!"), [k];
      }
    }
    function C(f) {
      var G = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false, k = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false, y = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 30;
      if (!f || G === false || k === false || !y)
        return console.error("transition: Missing Parameters!"), false;
      if ((0, t.default)(G) !== (0, t.default)(k))
        return console.error("transition: Inconsistent Status Types!"), false;
      var $ = (0, t.default)(k);
      return $ === "string" || $ === "boolean" || !f.length ? (console.error("transition: Unsupported Data Type of State!"), false) : (!a.default.has(f) && !(f instanceof Array) && console.warn("transition: Transition curve not found, default curve will be used!"), true);
    }
    function x(f) {
      var G = "";
      return a.default.has(f) ? G = a.default.get(f) : f instanceof Array ? G = f : G = a.default.get(o), G;
    }
    function I(f, G) {
      var k = 1 / (G - 1), y = new Array(G).fill(0).map(function(c, R) {
        return R * k;
      }), $ = y.map(function(c) {
        return W(f, c);
      });
      return $;
    }
    function W(f, G) {
      var k = U(f, G), y = F(k, G);
      return S(k, y);
    }
    function U(f, G) {
      var k = f.length - 1, y = "", $ = "";
      f.findIndex(function(V, X) {
        if (X !== k) {
          y = V, $ = f[X + 1];
          var Z = y[0][0], u = $[0][0];
          return G >= Z && G < u;
        }
      });
      var c = y[0], R = y[2] || y[0], L = $[1] || $[0], v = $[0];
      return [c, R, L, v];
    }
    function F(f, G) {
      var k = f[0][0], y = f[3][0], $ = y - k, c = G - k;
      return c / $;
    }
    function S(f, G) {
      var k = (0, n.default)(f, 4), y = (0, n.default)(k[0], 2), $ = y[1], c = (0, n.default)(k[1], 2), R = c[1], L = (0, n.default)(k[2], 2), v = L[1], V = (0, n.default)(k[3], 2), X = V[1], Z = Math.pow, u = 1 - G, m = $ * Z(u, 3), h2 = 3 * R * G * Z(u, 2), P = 3 * v * Z(G, 2) * u, z = X * Z(G, 3);
      return 1 - (m + h2 + P + z);
    }
    function d(f, G, k) {
      var y = "object";
      return typeof f == "number" && (y = "number"), f instanceof Array && (y = "array"), y === "number" ? T(f, G, k) : y === "array" ? E(f, G, k) : y === "object" ? q(f, G, k) : k.map(function($) {
        return G;
      });
    }
    function T(f, G, k) {
      var y = G - f;
      return k.map(function($) {
        return f + y * $;
      });
    }
    function E(f, G, k) {
      var y = G.map(function($, c) {
        return typeof $ != "number" ? false : $ - f[c];
      });
      return k.map(function($) {
        return y.map(function(c, R) {
          return c === false ? G[R] : f[R] + c * $;
        });
      });
    }
    function q(f, G, k) {
      var y = Object.keys(G), $ = y.map(function(L) {
        return f[L];
      }), c = y.map(function(L) {
        return G[L];
      }), R = E($, c, k);
      return R.map(function(L) {
        var v = {};
        return L.forEach(function(V, X) {
          return v[y[X]] = V;
        }), v;
      });
    }
    function N(f, G, k) {
      var y = d(f, G, k), $ = function(v) {
        var V = f[v], X = G[v];
        if ((0, t.default)(X) !== "object")
          return "continue";
        var Z = N(V, X, k);
        y.forEach(function(u, m) {
          return u[v] = Z[m];
        });
      };
      for (var c in G)
        var R = $(c);
      return y;
    }
    function g(f, G) {
      if (!f || !G) {
        console.error("InjectNewCurve Missing Parameters!");
        return;
      }
      a.default.set(f, G);
    }
    var _ = l;
    e.default = _;
  }(gr)), gr;
}
var Nn;
function Mo() {
  return Nn || (Nn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: true
    }), e.default = void 0;
    var n = r(Ao()), t = r(Lo()), a = r(je()), o = r(Te()), l = r(mt()), C = r(So()), x = r(Go()), I = Be(), W = function F(S, d) {
      (0, l.default)(this, F), d = (0, I.deepClone)(d, true);
      var T = {
        /**
         * @description Weather to render graph
         * @type {Boolean}
         * @default visible = true
         */
        visible: true,
        /**
         * @description Whether to enable drag
         * @type {Boolean}
         * @default drag = false
         */
        drag: false,
        /**
         * @description Whether to enable hover
         * @type {Boolean}
         * @default hover = false
         */
        hover: false,
        /**
         * @description Graph rendering index
         *  Give priority to index high graph in rendering
         * @type {Number}
         * @example index = 1
         */
        index: 1,
        /**
         * @description Animation delay time(ms)
         * @type {Number}
         * @default animationDelay = 0
         */
        animationDelay: 0,
        /**
         * @description Number of animation frames
         * @type {Number}
         * @default animationFrame = 30
         */
        animationFrame: 30,
        /**
         * @description Animation dynamic curve (Supported by transition)
         * @type {String}
         * @default animationCurve = 'linear'
         * @link https://github.com/jiaming743/Transition
         */
        animationCurve: "linear",
        /**
         * @description Weather to pause graph animation
         * @type {Boolean}
         * @default animationPause = false
         */
        animationPause: false,
        /**
         * @description Rectangular hover detection zone
         *  Use this method for hover detection first
         * @type {Null|Array}
         * @default hoverRect = null
         * @example hoverRect = [0, 0, 100, 100] // [Rect start x, y, Rect width, height]
         */
        hoverRect: null,
        /**
         * @description Mouse enter event handler
         * @type {Function|Null}
         * @default mouseEnter = null
         */
        mouseEnter: null,
        /**
         * @description Mouse outer event handler
         * @type {Function|Null}
         * @default mouseOuter = null
         */
        mouseOuter: null,
        /**
         * @description Mouse click event handler
         * @type {Function|Null}
         * @default click = null
         */
        click: null
      }, E = {
        status: "static",
        animationRoot: [],
        animationKeys: [],
        animationFrameState: [],
        cache: {}
      };
      d.shape || (d.shape = {}), d.style || (d.style = {});
      var q = Object.assign({}, S.shape, d.shape);
      Object.assign(T, d, E), Object.assign(this, S, T), this.shape = q, this.style = new C.default(d.style), this.addedProcessor();
    };
    e.default = W, W.prototype.addedProcessor = function() {
      typeof this.setGraphCenter == "function" && this.setGraphCenter(null, this), typeof this.added == "function" && this.added(this);
    }, W.prototype.drawProcessor = function(F, S) {
      var d = F.ctx;
      S.style.initStyle(d), typeof this.beforeDraw == "function" && this.beforeDraw(this, F), S.draw(F, S), typeof this.drawed == "function" && this.drawed(this, F), S.style.restoreTransform(d);
    }, W.prototype.hoverCheckProcessor = function(F, S) {
      var d = S.hoverRect, T = S.style, E = S.hoverCheck, q = T.graphCenter, N = T.rotate, g = T.scale, _ = T.translate;
      return q && (N && (F = (0, I.getRotatePointPos)(-N, F, q)), g && (F = (0, I.getScalePointPos)(g.map(function(f) {
        return 1 / f;
      }), F, q)), _ && (F = (0, I.getTranslatePointPos)(_.map(function(f) {
        return f * -1;
      }), F))), d ? I.checkPointIsInRect.apply(void 0, [F].concat((0, o.default)(d))) : E(F, this);
    }, W.prototype.moveProcessor = function(F) {
      this.move(F, this), typeof this.beforeMove == "function" && this.beforeMove(F, this), typeof this.setGraphCenter == "function" && this.setGraphCenter(F, this), typeof this.moved == "function" && this.moved(F, this);
    }, W.prototype.attr = function(F) {
      var S = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
      if (!F || S === void 0)
        return false;
      var d = (0, a.default)(this[F]) === "object";
      d && (S = (0, I.deepClone)(S, true));
      var T = this.render;
      F === "style" ? this.style.update(S) : d ? Object.assign(this[F], S) : this[F] = S, F === "index" && T.sortGraphsByIndex(), T.drawAllGraph();
    }, W.prototype.animation = function() {
      var F = (0, t.default)(
        n.default.mark(function S(d, T) {
          var E, q, N, g, _, f, G, k, y, $ = arguments;
          return n.default.wrap(function(R) {
            for (; ; )
              switch (R.prev = R.next) {
                case 0:
                  if (E = $.length > 2 && $[2] !== void 0 ? $[2] : false, !(d !== "shape" && d !== "style")) {
                    R.next = 4;
                    break;
                  }
                  return console.error("Only supported shape and style animation!"), R.abrupt("return");
                case 4:
                  if (T = (0, I.deepClone)(T, true), d === "style" && this.style.colorProcessor(T), q = this[d], N = Object.keys(T), g = {}, N.forEach(function(L) {
                    return g[L] = q[L];
                  }), _ = this.animationFrame, f = this.animationCurve, G = this.animationDelay, k = (0, x.default)(f, g, T, _, true), this.animationRoot.push(q), this.animationKeys.push(N), this.animationFrameState.push(k), !E) {
                    R.next = 17;
                    break;
                  }
                  return R.abrupt("return");
                case 17:
                  if (!(G > 0)) {
                    R.next = 20;
                    break;
                  }
                  return R.next = 20, U(G);
                case 20:
                  return y = this.render, R.abrupt("return", new Promise(
                    function() {
                      var L = (0, t.default)(
                        n.default.mark(function v(V) {
                          return n.default.wrap(function(Z) {
                            for (; ; )
                              switch (Z.prev = Z.next) {
                                case 0:
                                  return Z.next = 2, y.launchAnimation();
                                case 2:
                                  V();
                                case 3:
                                case "end":
                                  return Z.stop();
                              }
                          }, v);
                        })
                      );
                      return function(v) {
                        return L.apply(this, arguments);
                      };
                    }()
                  ));
                case 22:
                case "end":
                  return R.stop();
              }
          }, S, this);
        })
      );
      return function(S, d) {
        return F.apply(this, arguments);
      };
    }(), W.prototype.turnNextAnimationFrame = function(F) {
      var S = this.animationDelay, d = this.animationRoot, T = this.animationKeys, E = this.animationFrameState, q = this.animationPause;
      q || Date.now() - F < S || (d.forEach(function(N, g) {
        T[g].forEach(function(_) {
          N[_] = E[g][0][_];
        });
      }), E.forEach(function(N, g) {
        N.shift();
        var _ = N.length === 0;
        _ && (d[g] = null), _ && (T[g] = null);
      }), this.animationFrameState = E.filter(function(N) {
        return N.length;
      }), this.animationRoot = d.filter(function(N) {
        return N;
      }), this.animationKeys = T.filter(function(N) {
        return N;
      }));
    }, W.prototype.animationEnd = function() {
      var F = this.animationFrameState, S = this.animationKeys, d = this.animationRoot, T = this.render;
      return d.forEach(function(E, q) {
        var N = S[q], g = F[q].pop();
        N.forEach(function(_) {
          return E[_] = g[_];
        });
      }), this.animationFrameState = [], this.animationKeys = [], this.animationRoot = [], T.drawAllGraph();
    }, W.prototype.pauseAnimation = function() {
      this.attr("animationPause", true);
    }, W.prototype.playAnimation = function() {
      var F = this.render;
      return this.attr("animationPause", false), new Promise(
        function() {
          var S = (0, t.default)(
            n.default.mark(function d(T) {
              return n.default.wrap(function(q) {
                for (; ; )
                  switch (q.prev = q.next) {
                    case 0:
                      return q.next = 2, F.launchAnimation();
                    case 2:
                      T();
                    case 3:
                    case "end":
                      return q.stop();
                  }
              }, d);
            })
          );
          return function(d) {
            return S.apply(this, arguments);
          };
        }()
      );
    }, W.prototype.delProcessor = function(F) {
      var S = this, d = F.graphs, T = d.findIndex(function(E) {
        return E === S;
      });
      T !== -1 && (typeof this.beforeDelete == "function" && this.beforeDelete(this), d.splice(T, 1, null), typeof this.deleted == "function" && this.deleted(this));
    };
    function U(F) {
      return new Promise(function(S) {
        setTimeout(S, F);
      });
    }
  }(fr)), fr;
}
var Wn;
function Ro() {
  return Wn || (Wn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: true
    }), e.default = void 0;
    var n = r(Ve()), t = r(Te()), a = r(mt()), o = r(yt), l = r(sn()), C = Be(), x = r(un()), I = r(Mo());
    function W(N, g) {
      var _ = Object.keys(N);
      if (Object.getOwnPropertySymbols) {
        var f = Object.getOwnPropertySymbols(N);
        g && (f = f.filter(function(G) {
          return Object.getOwnPropertyDescriptor(N, G).enumerable;
        })), _.push.apply(_, f);
      }
      return _;
    }
    function U(N) {
      for (var g = 1; g < arguments.length; g++) {
        var _ = arguments[g] != null ? arguments[g] : {};
        g % 2 ? W(_, true).forEach(function(f) {
          (0, n.default)(N, f, _[f]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(N, Object.getOwnPropertyDescriptors(_)) : W(_).forEach(function(f) {
          Object.defineProperty(N, f, Object.getOwnPropertyDescriptor(_, f));
        });
      }
      return N;
    }
    var F = function N(g) {
      if ((0, a.default)(this, N), !g) {
        console.error("CRender Missing parameters!");
        return;
      }
      var _ = g.getContext("2d"), f = g.clientWidth, G = g.clientHeight, k = [f, G];
      g.setAttribute("width", f), g.setAttribute("height", G), this.ctx = _, this.area = k, this.animationStatus = false, this.graphs = [], this.color = o.default, this.bezierCurve = l.default, g.addEventListener("mousedown", T.bind(this)), g.addEventListener("mousemove", E.bind(this)), g.addEventListener("mouseup", q.bind(this));
    };
    e.default = F, F.prototype.clearArea = function() {
      var N, g = this.area;
      (N = this.ctx).clearRect.apply(N, [0, 0].concat((0, t.default)(g)));
    }, F.prototype.add = function() {
      var N = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, g = N.name;
      if (!g) {
        console.error("add Missing parameters!");
        return;
      }
      var _ = x.default.get(g);
      if (!_) {
        console.warn("No corresponding graph configuration found!");
        return;
      }
      var f = new I.default(_, N);
      if (f.validator(f))
        return f.render = this, this.graphs.push(f), this.sortGraphsByIndex(), this.drawAllGraph(), f;
    }, F.prototype.sortGraphsByIndex = function() {
      var N = this.graphs;
      N.sort(function(g, _) {
        if (g.index > _.index)
          return 1;
        if (g.index === _.index)
          return 0;
        if (g.index < _.index)
          return -1;
      });
    }, F.prototype.delGraph = function(N) {
      typeof N.delProcessor == "function" && (N.delProcessor(this), this.graphs = this.graphs.filter(function(g) {
        return g;
      }), this.drawAllGraph());
    }, F.prototype.delAllGraph = function() {
      var N = this;
      this.graphs.forEach(function(g) {
        return g.delProcessor(N);
      }), this.graphs = this.graphs.filter(function(g) {
        return g;
      }), this.drawAllGraph();
    }, F.prototype.drawAllGraph = function() {
      var N = this;
      this.clearArea(), this.graphs.filter(function(g) {
        return g && g.visible;
      }).forEach(function(g) {
        return g.drawProcessor(N, g);
      });
    }, F.prototype.launchAnimation = function() {
      var N = this, g = this.animationStatus;
      if (!g)
        return this.animationStatus = true, new Promise(function(_) {
          S.call(N, function() {
            N.animationStatus = false, _();
          }, Date.now());
        });
    };
    function S(N, g) {
      var _ = this.graphs;
      if (!d(_)) {
        N();
        return;
      }
      _.forEach(function(f) {
        return f.turnNextAnimationFrame(g);
      }), this.drawAllGraph(), requestAnimationFrame(S.bind(this, N, g));
    }
    function d(N) {
      return N.find(function(g) {
        return !g.animationPause && g.animationFrameState.length;
      });
    }
    function T(N) {
      var g = this.graphs, _ = g.find(function(f) {
        return f.status === "hover";
      });
      _ && (_.status = "active");
    }
    function E(N) {
      var g = N.offsetX, _ = N.offsetY, f = [g, _], G = this.graphs, k = G.find(function(v) {
        return v.status === "active" || v.status === "drag";
      });
      if (k) {
        if (!k.drag)
          return;
        if (typeof k.move != "function") {
          console.error("No move method is provided, cannot be dragged!");
          return;
        }
        k.moveProcessor(N), k.status = "drag";
        return;
      }
      var y = G.find(function(v) {
        return v.status === "hover";
      }), $ = G.filter(function(v) {
        return v.hover && (typeof v.hoverCheck == "function" || v.hoverRect);
      }), c = $.find(function(v) {
        return v.hoverCheckProcessor(f, v);
      });
      c ? document.body.style.cursor = c.style.hoverCursor : document.body.style.cursor = "default";
      var R = false, L = false;
      if (y && (R = typeof y.mouseOuter == "function"), c && (L = typeof c.mouseEnter == "function"), !(!c && !y)) {
        if (!c && y) {
          R && y.mouseOuter(N, y), y.status = "static";
          return;
        }
        if (!(c && c === y)) {
          if (c && !y) {
            L && c.mouseEnter(N, c), c.status = "hover";
            return;
          }
          c && y && c !== y && (R && y.mouseOuter(N, y), y.status = "static", L && c.mouseEnter(N, c), c.status = "hover");
        }
      }
    }
    function q(N) {
      var g = this.graphs, _ = g.find(function(G) {
        return G.status === "active";
      }), f = g.find(function(G) {
        return G.status === "drag";
      });
      _ && typeof _.click == "function" && _.click(N, _), g.forEach(function(G) {
        return G && (G.status = "static");
      }), _ && (_.status = "hover"), f && (f.status = "hover");
    }
    F.prototype.clone = function(N) {
      var g = N.style.getStyle(), _ = U({}, N, {
        style: g
      });
      return delete _.render, _ = (0, C.deepClone)(_, true), this.add(_);
    };
  }(Ht)), Ht;
}
(function(e) {
  var r = we;
  Object.defineProperty(e, "__esModule", {
    value: true
  }), Object.defineProperty(e, "CRender", {
    enumerable: true,
    get: function() {
      return n.default;
    }
  }), Object.defineProperty(e, "extendNewGraph", {
    enumerable: true,
    get: function() {
      return t.extendNewGraph;
    }
  }), e.default = void 0;
  var n = r(Ro()), t = un(), a = n.default;
  e.default = a;
})(Et);
var Aa = _a(Et);
var Do = { class: "dv-water-pond-level" };
var To = { key: 0 };
var Bo = ["id"];
var Fo = ["offset", "stop-color"];
var No = ["stroke", "fill", "x", "y"];
var Wo = ["cx", "cy", "rx", "ry", "stroke"];
var Eo = ["rx", "ry", "width", "height", "stroke"];
var jo = {
  __name: "index",
  props: {
    config: Object,
    default: () => ({})
  },
  setup(e) {
    const r = e, n = He(), t = ref(null), a = reactive({
      gradientId: `water-level-pond-${n}`,
      defaultConfig: {
        /**
             * @description Data
             * @type {Array<Number>}
             * @default data = []
             * @example data = [60, 40]
             */
        data: [],
        /**
             * @description Shape of wanter level pond
             * @type {String}
             * @default shape = 'rect'
             * @example shape = 'rect' | 'roundRect' | 'round'
             */
        shape: "rect",
        /**
             * @description Water wave number
             * @type {Number}
             * @default waveNum = 3
             */
        waveNum: 3,
        /**
             * @description Water wave height (px)
             * @type {Number}
             * @default waveHeight = 40
             */
        waveHeight: 40,
        /**
             * @description Wave opacity
             * @type {Number}
             * @default waveOpacity = 0.4
             */
        waveOpacity: 0.4,
        /**
             * @description Colors (hex|rgb|rgba|color keywords)
             * @type {Array<String>}
             * @default colors = ['#00BAFF', '#3DE7C9']
             * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']
             */
        colors: ["#3DE7C9", "#00BAFF"],
        /**
             * @description Formatter
             * @type {String}
             * @default formatter = '{value}%'
             */
        formatter: "{value}%"
      },
      mergedConfig: {},
      renderer: null,
      svgBorderGradient: [],
      details: "",
      waves: [],
      animation: false
    }), o = computed(() => {
      const { shape: g } = a.mergedConfig;
      return g === "round" ? "50%" : g === "rect" ? "0" : g === "roundRect" ? "10px" : "0";
    }), l = computed(() => {
      const { shape: g } = a.mergedConfig;
      return g || "rect";
    });
    watch(() => r.config, () => {
      a.renderer.delAllGraph(), a.waves = [], setTimeout(I, 0);
    }, {
      deep: true
    }), onMounted(() => {
      C();
    }), onBeforeUnmount(() => {
      a.renderer.delAllGraph(), a.waves = [];
    });
    function C() {
      x(), r.config && I();
    }
    function x() {
      a.renderer = new Aa(t.value);
    }
    function I() {
      W(), U(), F(), S(), N();
    }
    function W() {
      a.mergedConfig = xe(_e(a.defaultConfig, true), r.config);
    }
    function U() {
      const { colors: g } = a.mergedConfig, f = 100 / (g.length - 1);
      a.svgBorderGradient = g.map((G, k) => [f * k, G]);
    }
    function F() {
      const { data: g, formatter: _ } = a.mergedConfig;
      if (!g.length) {
        a.details = "";
        return;
      }
      const f = Math.max(...g);
      a.details = _.replace("{value}", f);
    }
    function S() {
      const g = d(), _ = E();
      a.waves = g.map((f) => a.renderer.add({
        name: "smoothline",
        animationFrame: 300,
        shape: f,
        style: _,
        drawed: q
      }));
    }
    function d() {
      const { waveNum: g, waveHeight: _, data: f } = a.mergedConfig, [G, k] = a.renderer.area, y = g * 4 + 4, $ = G / g / 2;
      return f.map((c) => {
        let R = new Array(y).fill(0).map((L, v) => {
          const V = G - $ * v, X = (1 - c / 100) * k, Z = v % 2 === 0 ? X : X - _;
          return [V, Z];
        });
        return R = R.map((L) => T(L, [$ * 2, 0])), { points: R };
      });
    }
    function T([g, _], [f, G]) {
      return [g + f, _ + G];
    }
    function E() {
      const g = a.renderer.area[1];
      return {
        gradientColor: a.mergedConfig.colors,
        gradientType: "linear",
        gradientParams: [0, 0, 0, g],
        gradientWith: "fill",
        opacity: a.mergedConfig.waveOpacity,
        translate: [0, 0]
      };
    }
    function q({ shape: { points: g } }, { ctx: _, area: f }) {
      const G = g[0], k = g.slice(-1)[0], y = f[1];
      _.lineTo(k[0], y), _.lineTo(G[0], y), _.closePath(), _.fill();
    }
    async function N(g = 1) {
      if (a.animation)
        return;
      a.animation = true;
      const _ = a.renderer.area[0];
      a.waves.forEach((f) => {
        f.attr("style", { translate: [0, 0] }), f.animation("style", {
          translate: [_, 0]
        }, true);
      }), await a.renderer.launchAnimation(), a.animation = false, a.renderer.graphs.length && N(g + 1);
    }
    return (g, _) => (openBlock(), createElementBlock("div", Do, [
      unref(a).renderer ? (openBlock(), createElementBlock("svg", To, [
        createBaseVNode("defs", null, [
          createBaseVNode("linearGradient", {
            id: unref(a).gradientId,
            x1: "0%",
            y1: "0%",
            x2: "0%",
            y2: "100%"
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(a).svgBorderGradient, (f) => (openBlock(), createElementBlock("stop", {
              key: f[0],
              offset: f[0],
              "stop-color": f[1]
            }, null, 8, Fo))), 128))
          ], 8, Bo)
        ]),
        unref(a).renderer ? (openBlock(), createElementBlock("text", {
          key: 0,
          stroke: `url(#${unref(a).gradientId})`,
          fill: `url(#${unref(a).gradientId})`,
          x: unref(a).renderer.area[0] / 2 + 8,
          y: unref(a).renderer.area[1] / 2 + 8
        }, toDisplayString(unref(a).details), 9, No)) : createCommentVNode("", true),
        !unref(l) || unref(l) === "round" ? (openBlock(), createElementBlock("ellipse", {
          key: 1,
          cx: unref(a).renderer.area[0] / 2 + 8,
          cy: unref(a).renderer.area[1] / 2 + 8,
          rx: unref(a).renderer.area[0] / 2 + 5,
          ry: unref(a).renderer.area[1] / 2 + 5,
          stroke: `url(#${unref(a).gradientId})`
        }, null, 8, Wo)) : (openBlock(), createElementBlock("rect", {
          key: 2,
          x: "2",
          y: "2",
          rx: unref(l) === "roundRect" ? 10 : 0,
          ry: unref(l) === "roundRect" ? 10 : 0,
          width: unref(a).renderer.area[0] + 12,
          height: unref(a).renderer.area[1] + 12,
          stroke: `url(#${unref(a).gradientId})`
        }, null, 8, Eo))
      ])) : createCommentVNode("", true),
      createBaseVNode("canvas", {
        ref_key: "waterPondLevel",
        ref: t,
        style: normalizeStyle(`border-radius: ${unref(o)};`)
      }, null, 4)
    ]));
  }
};
var yr = {
  install(e) {
    e.component("DvWaterLevelPond", jo);
  }
};
var zo = {};
var qo = { class: "dv-loading" };
var Io = createStaticVNode('<svg width="50px" height="50px"><circle cx="25" cy="25" r="20" fill="transparent" stroke-width="3" stroke-dasharray="31.415, 31.415" stroke="#02bcfe" stroke-linecap="round"><animateTransform attributeName="transform" type="rotate" values="0, 25 25;360, 25 25" dur="1.5s" repeatCount="indefinite"></animateTransform><animate attributeName="stroke" values="#02bcfe;#3be6cb;#02bcfe" dur="3s" repeatCount="indefinite"></animate></circle><circle cx="25" cy="25" r="10" fill="transparent" stroke-width="3" stroke-dasharray="15.7, 15.7" stroke="#3be6cb" stroke-linecap="round"><animateTransform attributeName="transform" type="rotate" values="360, 25 25;0, 25 25" dur="1.5s" repeatCount="indefinite"></animateTransform><animate attributeName="stroke" values="#3be6cb;#02bcfe;#3be6cb" dur="3s" repeatCount="indefinite"></animate></circle></svg>', 1);
var Ho = { class: "loading-tip" };
function Vo(e, r) {
  return openBlock(), createElementBlock("div", qo, [
    Io,
    createBaseVNode("div", Ho, [
      renderSlot(e.$slots, "default")
    ])
  ]);
}
var Uo = Ke(zo, [["render", Vo]]);
var br = {
  install(e) {
    e.component("DvLoading", Uo);
  }
};
var Xo = ["width", "height"];
var Qo = ["id"];
var Yo = createBaseVNode("stop", {
  offset: "0%",
  "stop-color": "#fff",
  "stop-opacity": "1"
}, null, -1);
var Ko = createBaseVNode("stop", {
  offset: "100%",
  "stop-color": "#fff",
  "stop-opacity": "0"
}, null, -1);
var Jo = [
  Yo,
  Ko
];
var Zo = ["id"];
var el = createBaseVNode("stop", {
  offset: "0%",
  "stop-color": "#fff",
  "stop-opacity": "0"
}, null, -1);
var tl = createBaseVNode("stop", {
  offset: "100%",
  "stop-color": "#fff",
  "stop-opacity": "1"
}, null, -1);
var rl = [
  el,
  tl
];
var nl = ["id", "cx", "cy"];
var al = ["values", "dur"];
var il = ["dur"];
var ol = ["id"];
var ll = ["xlink:href", "fill"];
var sl = ["xlink:href", "fill", "mask"];
var ul = ["xlink:href", "width", "height", "x", "y"];
var cl = ["fill", "x", "y"];
var fl = ["id", "d"];
var dl = ["xlink:href", "stroke-width", "stroke"];
var hl = ["id"];
var vl = ["r", "fill"];
var pl = ["dur", "path"];
var gl = ["xlink:href", "stroke-width", "stroke", "mask"];
var ml = ["from", "to", "dur"];
var yl = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    },
    dev: {
      type: Boolean,
      default: false
    }
  },
  setup(e) {
    const r = e, n = He(), t = ref(null), { width: a, height: o } = Ce(t, I, x), l = reactive({
      unique: Math.random(),
      flylineGradientId: `flyline-gradient-id-${n}`,
      haloGradientId: `halo-gradient-id-${n}`,
      /**
           * @description Type Declaration
           *
           * interface Halo {
           *    show?: boolean
           *    duration?: [number, number]
           *    color?: string
           *    radius?: number
           * }
           *
           * interface Text {
           *    show?: boolean
           *    offset?: [number, number]
           *    color?: string
           *    fontSize?: number
           * }
           *
           * interface Icon {
           *    show?: boolean
           *    src?: string
           *    width?: number
           *    height?: number
           * }
           *
           * interface Point {
           *    name: string
           *    coordinate: [number, number]
           *    halo?: Halo
           *    text?: Text
           *    icon?: Icon
           * }
           *
           * interface Line {
           *    width?: number
           *    color?: string
           *    orbitColor?: string
           *    duration?: [number, number]
           *    radius?: string
           * }
           *
           * interface Flyline extends Line {
           *    source: string
           *    target: string
           * }
           *
           * interface FlylineWithPath extends Flyline {
           *    d: string
           *    path: [[number, number], [number, number], [number, number]]
           *    key: string
           * }
           */
      defaultConfig: {
        /**
             * @description Flyline chart points
             * @type {FlylineChartPoint[]}
             * @default points = []
             */
        points: [],
        /**
             * @description Lines
             * @type {Flyline[]}
             * @default lines = []
             */
        lines: [],
        /**
             * @description Global halo configuration
             * @type {Halo}
             */
        halo: {
          /**
               * @description Whether to show halo
               * @type {Boolean}
               * @default show = false
               */
          show: false,
          /**
               * @description Halo animation duration (1s = 10)
               * @type {[number, number]}
               */
          duration: [20, 30],
          /**
               * @description Halo color
               * @type {String}
               * @default color = '#fb7293'
               */
          color: "#fb7293",
          /**
               * @description Halo radius
               * @type {Number}
               * @default radius = 120
               */
          radius: 120
        },
        /**
             * @description Global text configuration
             * @type {Text}
             */
        text: {
          /**
               * @description Whether to show text
               * @type {Boolean}
               * @default show = false
               */
          show: false,
          /**
               * @description Text offset
               * @type {[number, number]}
               * @default offset = [0, 15]
               */
          offset: [0, 15],
          /**
               * @description Text color
               * @type {String}
               * @default color = '#ffdb5c'
               */
          color: "#ffdb5c",
          /**
               * @description Text font size
               * @type {Number}
               * @default fontSize = 12
               */
          fontSize: 12
        },
        /**
             * @description Global icon configuration
             * @type {Icon}
             */
        icon: {
          /**
               * @description Whether to show icon
               * @type {Boolean}
               * @default show = false
               */
          show: false,
          /**
               * @description Icon src
               * @type {String}
               * @default src = ''
               */
          src: "",
          /**
               * @description Icon width
               * @type {Number}
               * @default width = 15
               */
          width: 15,
          /**
               * @description Icon height
               * @type {Number}
               * @default width = 15
               */
          height: 15
        },
        /**
             * @description Global line configuration
             * @type {Line}
             */
        line: {
          /**
               * @description Line width
               * @type {Number}
               * @default width = 1
               */
          width: 1,
          /**
               * @description Flyline color
               * @type {String}
               * @default color = '#ffde93'
               */
          color: "#ffde93",
          /**
               * @description Orbit color
               * @type {String}
               * @default orbitColor = 'rgba(103, 224, 227, .2)'
               */
          orbitColor: "rgba(103, 224, 227, .2)",
          /**
               * @description Flyline animation duration
               * @type {[number, number]}
               * @default duration = [20, 30]
               */
          duration: [20, 30],
          /**
               * @description Flyline radius
               * @type {Number}
               * @default radius = 100
               */
          radius: 100
        },
        /**
             * @description Back ground image url
             * @type {String}
             * @default bgImgSrc = ''
             */
        bgImgSrc: "",
        /**
             * @description K value
             * @type {Number}
             * @default k = -0.5
             * @example k = -1 ~ 1
             */
        k: -0.5,
        /**
             * @description Flyline curvature
             * @type {Number}
             * @default curvature = 5
             */
        curvature: 5,
        /**
             * @description Relative points position
             * @type {Boolean}
             * @default relative = true
             */
        relative: true
      },
      /**
           * @description Fly line data
           * @type {FlylineWithPath[]}
           * @default flylines = []
           */
      flylines: [],
      /**
           * @description Fly line lengths
           * @type {Number[]}
           * @default flylineLengths = []
           */
      flylineLengths: [],
      /**
           * @description Fly line points
           * @default flylinePoints = []
           */
      flylinePoints: [],
      mergedConfig: null
    });
    let C;
    onMounted(() => {
      C = getCurrentInstance();
    }), watch(() => r.config, () => {
      W();
    }, {
      deep: true
    });
    function x() {
      W();
    }
    function I() {
      W();
    }
    async function W() {
      U(), F(), S(), await q();
    }
    function U() {
      const g = xe(_e(l.defaultConfig, true), r.config || {}), { points: _, lines: f, halo: G, text: k, icon: y, line: $ } = g;
      g.points = _.map((c) => (c.halo = xe(_e(G, true), c.halo || {}), c.text = xe(_e(k, true), c.text || {}), c.icon = xe(_e(y, true), c.icon || {}), c)), g.lines = f.map((c) => xe(_e($, true), c)), l.mergedConfig = g;
    }
    function F() {
      const { relative: g, points: _ } = l.mergedConfig;
      l.flylinePoints = _.map((f, G) => {
        const { coordinate: [k, y], halo: $, icon: c, text: R } = f;
        g && (f.coordinate = [k * a.value, y * o.value]), f.halo.time = ht(...$.duration) / 10;
        const { width: L, height: v } = c;
        f.icon.x = f.coordinate[0] - L / 2, f.icon.y = f.coordinate[1] - v / 2;
        const [V, X] = R.offset;
        return f.text.x = f.coordinate[0] + V, f.text.y = f.coordinate[1] + X, f.key = `${f.coordinate.toString()}${G}`, f;
      });
    }
    function S() {
      const { points: g, lines: _ } = l.mergedConfig;
      l.flylines = _.map((f) => {
        const { source: G, target: k, duration: y } = f, $ = g.find(({ name: X }) => X === G).coordinate, c = g.find(({ name: X }) => X === k).coordinate, R = d($, c).map((X) => X.map((Z) => parseFloat(Z.toFixed(10)))), L = `M${R[0].toString()} Q${R[1].toString()} ${R[2].toString()}`, v = `path${R.toString()}`, V = ht(...y) / 10;
        return { ...f, path: R, key: v, d: L, time: V };
      });
    }
    function d(g, _) {
      const f = T(g, _);
      return [g, f, _];
    }
    function T([g, _], [f, G]) {
      const { curvature: k, k: y } = l.mergedConfig, [$, c] = [(g + f) / 2, (_ + G) / 2], L = Dt([g, _], [f, G]) / k, v = L / 2;
      let [V, X] = [$, c];
      do
        V += v, X = E(y, [$, c], V)[1];
      while (Dt([$, c], [V, X]) < L);
      return [V, X];
    }
    function E(g, [_, f], G) {
      const k = f - g * _ + g * G;
      return [G, k];
    }
    async function q() {
      await nextTick(), l.flylineLengths = l.flylines.map(({ key: g }) => C.proxy.$refs[g][0].getTotalLength());
    }
    function N({ offsetX: g, offsetY: _ }) {
      if (!r.dev)
        return;
      const f = (g / a.value).toFixed(2), G = (_ / o.value).toFixed(2);
      console.warn(`dv-flyline-chart-enhanced DEV: 
 Click Position is [${g}, ${_}] 
 Relative Position is [${f}, ${G}]`);
    }
    return (g, _) => (openBlock(), createElementBlock("div", {
      ref_key: "flylineChartEnhanced",
      ref: t,
      class: "dv-flyline-chart-enhanced",
      style: normalizeStyle(`background-image: url(${unref(l).mergedConfig ? unref(l).mergedConfig.bgImgSrc : ""})`),
      onClick: N
    }, [
      unref(l).flylines.length ? (openBlock(), createElementBlock("svg", {
        key: 0,
        width: unref(a),
        height: unref(o)
      }, [
        createBaseVNode("defs", null, [
          createBaseVNode("radialGradient", {
            id: unref(l).flylineGradientId,
            cx: "50%",
            cy: "50%",
            r: "50%"
          }, Jo, 8, Qo),
          createBaseVNode("radialGradient", {
            id: unref(l).haloGradientId,
            cx: "50%",
            cy: "50%",
            r: "50%"
          }, rl, 8, Zo)
        ]),
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(l).flylinePoints, (f) => (openBlock(), createElementBlock("g", {
          key: f.key + Math.random()
        }, [
          createBaseVNode("defs", null, [
            f.halo.show ? (openBlock(), createElementBlock("circle", {
              key: 0,
              id: `halo${unref(l).unique}${f.key}`,
              cx: f.coordinate[0],
              cy: f.coordinate[1]
            }, [
              createBaseVNode("animate", {
                attributeName: "r",
                values: `1;${f.halo.radius}`,
                dur: `${f.halo.time}s`,
                repeatCount: "indefinite"
              }, null, 8, al),
              createBaseVNode("animate", {
                attributeName: "opacity",
                values: "1;0",
                dur: `${f.halo.time}s`,
                repeatCount: "indefinite"
              }, null, 8, il)
            ], 8, nl)) : createCommentVNode("", true)
          ]),
          createBaseVNode("mask", {
            id: `mask${unref(l).unique}${f.key}`
          }, [
            f.halo.show ? (openBlock(), createElementBlock("use", {
              key: 0,
              "xlink:href": `#halo${unref(l).unique}${f.key}`,
              fill: `url(#${unref(l).haloGradientId})`
            }, null, 8, ll)) : createCommentVNode("", true)
          ], 8, ol),
          f.halo.show ? (openBlock(), createElementBlock("use", {
            key: 0,
            "xlink:href": `#halo${unref(l).unique}${f.key}`,
            fill: f.halo.color,
            mask: `url(#mask${unref(l).unique}${f.key})`
          }, null, 8, sl)) : createCommentVNode("", true),
          f.icon.show ? (openBlock(), createElementBlock("image", {
            key: 1,
            "xlink:href": f.icon.src,
            width: f.icon.width,
            height: f.icon.height,
            x: f.icon.x,
            y: f.icon.y
          }, null, 8, ul)) : createCommentVNode("", true),
          f.text.show ? (openBlock(), createElementBlock("text", {
            key: 2,
            style: normalizeStyle(`fontSize:${f.text.fontSize}px;color:${f.text.color}`),
            fill: f.text.color,
            x: f.text.x,
            y: f.text.y
          }, toDisplayString(f.name), 13, cl)) : createCommentVNode("", true)
        ]))), 128)),
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(l).flylines, (f, G) => (openBlock(), createElementBlock("g", {
          key: f.key + Math.random()
        }, [
          createBaseVNode("defs", null, [
            createBaseVNode("path", {
              id: f.key,
              ref_for: true,
              ref: f.key,
              d: f.d,
              fill: "transparent"
            }, null, 8, fl)
          ]),
          createBaseVNode("use", {
            "xlink:href": `#${f.key}`,
            "stroke-width": f.width,
            stroke: f.orbitColor
          }, null, 8, dl),
          createBaseVNode("mask", {
            id: `mask${unref(l).unique}${f.key}`
          }, [
            createBaseVNode("circle", {
              cx: "0",
              cy: "0",
              r: f.radius,
              fill: `url(#${unref(l).flylineGradientId})`
            }, [
              createBaseVNode("animateMotion", {
                dur: f.time,
                path: f.d,
                rotate: "auto",
                repeatCount: "indefinite"
              }, null, 8, pl)
            ], 8, vl)
          ], 8, hl),
          unref(l).flylineLengths[G] ? (openBlock(), createElementBlock("use", {
            key: 0,
            "xlink:href": `#${f.key}`,
            "stroke-width": f.width,
            stroke: f.color,
            mask: `url(#mask${unref(l).unique}${f.key})`
          }, [
            createBaseVNode("animate", {
              attributeName: "stroke-dasharray",
              from: `0, ${unref(l).flylineLengths[G]}`,
              to: `${unref(l).flylineLengths[G]}, 0`,
              dur: f.time,
              repeatCount: "indefinite"
            }, null, 8, ml)
          ], 8, gl)) : createCommentVNode("", true)
        ]))), 128))
      ], 8, Xo)) : createCommentVNode("", true)
    ], 4));
  }
};
var Cr = {
  install(e) {
    e.component("DvFlylineChartEnhanced", yl);
  }
};
var bl = ["width", "height"];
var Cl = ["id"];
var xl = createBaseVNode("stop", {
  offset: "0%",
  "stop-color": "#fff",
  "stop-opacity": "1"
}, null, -1);
var $l = createBaseVNode("stop", {
  offset: "100%",
  "stop-color": "#fff",
  "stop-opacity": "0"
}, null, -1);
var _l = [
  xl,
  $l
];
var Pl = ["id"];
var wl = createBaseVNode("stop", {
  offset: "0%",
  "stop-color": "#fff",
  "stop-opacity": "0"
}, null, -1);
var kl = createBaseVNode("stop", {
  offset: "100%",
  "stop-color": "#fff",
  "stop-opacity": "1"
}, null, -1);
var Al = [
  wl,
  kl
];
var Ll = ["id", "cx", "cy"];
var Sl = ["values", "dur"];
var Ol = ["dur"];
var Gl = ["xlink:href", "width", "height", "x", "y"];
var Ml = ["id"];
var Rl = ["xlink:href", "fill"];
var Dl = ["xlink:href", "fill", "mask"];
var Tl = ["id", "d"];
var Bl = ["xlink:href", "stroke-width", "stroke"];
var Fl = ["xlink:href", "stroke-width", "stroke", "mask"];
var Nl = ["from", "to", "dur"];
var Wl = ["id"];
var El = ["r", "fill"];
var jl = ["dur", "path"];
var zl = ["xlink:href", "width", "height", "x", "y"];
var ql = ["fill", "x", "y"];
var Il = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    },
    dev: {
      type: Boolean,
      default: false
    }
  },
  setup(e) {
    const r = e, n = He(), t = ref(null), { width: a, height: o } = Ce(t, I, x), l = reactive({
      unique: Math.random(),
      maskId: `flyline-mask-id-${n}`,
      maskCircleId: `mask-circle-id-${n}`,
      gradientId: `gradient-id-${n}`,
      gradient2Id: `gradient2-id-${n}`,
      defaultConfig: {
        /**
             * @description Flyline chart center point
             * @type {Array<Number>}
             * @default centerPoint = [0, 0]
             */
        centerPoint: [0, 0],
        /**
             * @description Flyline start points
             * @type {Array<Array<Number>>}
             * @default points = []
             * @example points = [[10, 10], [100, 100]]
             */
        points: [],
        /**
             * @description Flyline width
             * @type {Number}
             * @default lineWidth = 1
             */
        lineWidth: 1,
        /**
             * @description Orbit color
             * @type {String}
             * @default orbitColor = 'rgba(103, 224, 227, .2)'
             */
        orbitColor: "rgba(103, 224, 227, .2)",
        /**
             * @description Flyline color
             * @type {String}
             * @default orbitColor = '#ffde93'
             */
        flylineColor: "#ffde93",
        /**
             * @description K value
             * @type {Number}
             * @default k = -0.5
             * @example k = -1 ~ 1
             */
        k: -0.5,
        /**
             * @description Flyline curvature
             * @type {Number}
             * @default curvature = 5
             */
        curvature: 5,
        /**
             * @description Flyline radius
             * @type {Number}
             * @default flylineRadius = 100
             */
        flylineRadius: 100,
        /**
             * @description Flyline animation duration
             * @type {Array<Number>}
             * @default duration = [20, 30]
             */
        duration: [20, 30],
        /**
             * @description Relative points position
             * @type {Boolean}
             * @default relative = true
             */
        relative: true,
        /**
             * @description Back ground image url
             * @type {String}
             * @default bgImgUrl = ''
             * @example bgImgUrl = './img/bg.jpg'
             */
        bgImgUrl: "",
        /**
             * @description Text configuration
             * @type {Object}
             */
        text: {
          /**
               * @description Text offset
               * @type {Array<Number>}
               * @default offset = [0, 15]
               */
          offset: [0, 15],
          /**
               * @description Text color
               * @type {String}
               * @default color = '#ffdb5c'
               */
          color: "#ffdb5c",
          /**
               * @description Text font size
               * @type {Number}
               * @default fontSize = 12
               */
          fontSize: 12
        },
        /**
             * @description Halo configuration
             * @type {Object}
             */
        halo: {
          /**
               * @description Weather to show halo
               * @type {Boolean}
               * @default show = true
               * @example show = true | false
               */
          show: true,
          /**
               * @description Halo animation duration (10 = 1s)
               * @type {Number}
               * @default duration = 30
               */
          duration: 30,
          /**
               * @description Halo color
               * @type {String}
               * @default color = '#fb7293'
               */
          color: "#fb7293",
          /**
               * @description Halo max radius
               * @type {Number}
               * @default radius = 120
               */
          radius: 120
        },
        /**
             * @description Center point img configuration
             * @type {Object}
             */
        centerPointImg: {
          /**
               * @description Center point img width
               * @type {Number}
               * @default width = 40
               */
          width: 40,
          /**
               * @description Center point img height
               * @type {Number}
               * @default height = 40
               */
          height: 40,
          /**
               * @description Center point img url
               * @type {String}
               * @default url = ''
               */
          url: ""
        },
        /**
             * @description Points img configuration
             * @type {Object}
             * @default radius = 120
             */
        pointsImg: {
          /**
               * @description Points img width
               * @type {Number}
               * @default width = 15
               */
          width: 15,
          /**
               * @description Points img height
               * @type {Number}
               * @default height = 15
               */
          height: 15,
          /**
               * @description Points img url
               * @type {String}
               * @default url = ''
               */
          url: ""
        }
      },
      mergedConfig: null,
      paths: [],
      lengths: [],
      times: [],
      texts: []
    });
    let C;
    onMounted(() => {
      C = getCurrentInstance();
    }), watch(() => r.config, () => {
      W();
    }, {
      deep: true
    });
    function x() {
      W();
    }
    function I() {
      W();
    }
    async function W() {
      U(), F(), await E(), q(), N();
    }
    function U() {
      const _ = xe(_e(l.defaultConfig, true), r.config || {}), { points: f } = _;
      _.points = f.map((G) => G instanceof Array ? { position: G, text: "" } : G), l.mergedConfig = _;
    }
    function F() {
      let { centerPoint: _, points: f } = l.mergedConfig;
      const { relative: G } = l.mergedConfig;
      f = f.map(({ position: k }) => k), G && (_ = [a.value * _[0], o.value * _[1]], f = f.map(([k, y]) => [a.value * k, o.value * y])), l.paths = f.map((k) => S(_, k));
    }
    function S(_, f) {
      const G = d(_, f);
      return [f, G, _];
    }
    function d([_, f], [G, k]) {
      const { curvature: y, k: $ } = l.mergedConfig, [c, R] = [(_ + G) / 2, (f + k) / 2], v = Dt([_, f], [G, k]) / y, V = v / 2;
      let [X, Z] = [c, R];
      do
        X += V, Z = T($, [c, R], X)[1];
      while (Dt([c, R], [X, Z]) < v);
      return [X, Z];
    }
    function T(_, [f, G], k) {
      const y = G - _ * f + _ * k;
      return [k, y];
    }
    async function E() {
      await nextTick(), l.lengths = l.paths.map((_, f) => C.proxy.$refs[`path${f}`][0].getTotalLength());
    }
    function q() {
      const { duration: _, points: f } = l.mergedConfig;
      l.times = f.map((G) => ht(..._) / 10);
    }
    function N() {
      const { points: _ } = l.mergedConfig;
      l.texts = _.map(({ text: f }) => f);
    }
    function g({ offsetX: _, offsetY: f }) {
      if (!r.dev)
        return;
      const G = (_ / a.value).toFixed(2), k = (f / o.value).toFixed(2);
      console.warn(`dv-flyline-chart DEV: 
 Click Position is [${_}, ${f}] 
 Relative Position is [${G}, ${k}]`);
    }
    return (_, f) => (openBlock(), createElementBlock("div", {
      ref_key: "flylineChart",
      ref: t,
      class: "dv-flyline-chart",
      style: normalizeStyle(`background-image: url(${unref(l).mergedConfig ? unref(l).mergedConfig.bgImgUrl : ""})`),
      onClick: g
    }, [
      unref(l).mergedConfig ? (openBlock(), createElementBlock("svg", {
        key: 0,
        width: unref(a),
        height: unref(o)
      }, [
        createBaseVNode("defs", null, [
          createBaseVNode("radialGradient", {
            id: unref(l).gradientId,
            cx: "50%",
            cy: "50%",
            r: "50%"
          }, _l, 8, Cl),
          createBaseVNode("radialGradient", {
            id: unref(l).gradient2Id,
            cx: "50%",
            cy: "50%",
            r: "50%"
          }, Al, 8, Pl),
          unref(l).paths[0] ? (openBlock(), createElementBlock("circle", {
            key: 0,
            id: `circle${unref(l).paths[0].toString()}`,
            cx: unref(l).paths[0][2][0],
            cy: unref(l).paths[0][2][1]
          }, [
            createBaseVNode("animate", {
              attributeName: "r",
              values: `1;${unref(l).mergedConfig.halo.radius}`,
              dur: unref(l).mergedConfig.halo.duration / 10 + "s",
              repeatCount: "indefinite"
            }, null, 8, Sl),
            createBaseVNode("animate", {
              attributeName: "opacity",
              values: "1;0",
              dur: unref(l).mergedConfig.halo.duration / 10 + "s",
              repeatCount: "indefinite"
            }, null, 8, Ol)
          ], 8, Ll)) : createCommentVNode("", true)
        ]),
        unref(l).paths[0] ? (openBlock(), createElementBlock("image", {
          key: 0,
          "xlink:href": unref(l).mergedConfig.centerPointImg.url,
          width: unref(l).mergedConfig.centerPointImg.width,
          height: unref(l).mergedConfig.centerPointImg.height,
          x: unref(l).paths[0][2][0] - unref(l).mergedConfig.centerPointImg.width / 2,
          y: unref(l).paths[0][2][1] - unref(l).mergedConfig.centerPointImg.height / 2
        }, null, 8, Gl)) : createCommentVNode("", true),
        createBaseVNode("mask", {
          id: `maskhalo${unref(l).paths[0].toString()}`
        }, [
          unref(l).paths[0] ? (openBlock(), createElementBlock("use", {
            key: 0,
            "xlink:href": `#circle${unref(l).paths[0].toString()}`,
            fill: `url(#${unref(l).gradient2Id})`
          }, null, 8, Rl)) : createCommentVNode("", true)
        ], 8, Ml),
        unref(l).paths[0] && unref(l).mergedConfig.halo.show ? (openBlock(), createElementBlock("use", {
          key: 1,
          "xlink:href": `#circle${unref(l).paths[0].toString()}`,
          fill: unref(l).mergedConfig.halo.color,
          mask: `url(#maskhalo${unref(l).paths[0].toString()})`
        }, null, 8, Dl)) : createCommentVNode("", true),
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(l).paths, (G, k) => (openBlock(), createElementBlock("g", { key: k }, [
          createBaseVNode("defs", null, [
            createBaseVNode("path", {
              id: `path${G.toString()}`,
              ref_for: true,
              ref: `path${k}`,
              d: `M${G[0].toString()} Q${G[1].toString()} ${G[2].toString()}`,
              fill: "transparent"
            }, null, 8, Tl)
          ]),
          createBaseVNode("use", {
            "xlink:href": `#path${G.toString()}`,
            "stroke-width": unref(l).mergedConfig.lineWidth,
            stroke: unref(l).mergedConfig.orbitColor
          }, null, 8, Bl),
          unref(l).lengths[k] ? (openBlock(), createElementBlock("use", {
            key: 0,
            "xlink:href": `#path${G.toString()}`,
            "stroke-width": unref(l).mergedConfig.lineWidth,
            stroke: unref(l).mergedConfig.flylineColor,
            mask: `url(#mask${unref(l).unique}${G.toString()})`
          }, [
            createBaseVNode("animate", {
              attributeName: "stroke-dasharray",
              from: `0, ${unref(l).lengths[k]}`,
              to: `${unref(l).lengths[k]}, 0`,
              dur: unref(l).times[k] || 0,
              repeatCount: "indefinite"
            }, null, 8, Nl)
          ], 8, Fl)) : createCommentVNode("", true),
          createBaseVNode("mask", {
            id: `mask${unref(l).unique}${G.toString()}`
          }, [
            createBaseVNode("circle", {
              cx: "0",
              cy: "0",
              r: unref(l).mergedConfig.flylineRadius,
              fill: `url(#${unref(l).gradientId})`
            }, [
              createBaseVNode("animateMotion", {
                dur: unref(l).times[k] || 0,
                path: `M${G[0].toString()} Q${G[1].toString()} ${G[2].toString()}`,
                rotate: "auto",
                repeatCount: "indefinite"
              }, null, 8, jl)
            ], 8, El)
          ], 8, Wl),
          createBaseVNode("image", {
            "xlink:href": unref(l).mergedConfig.pointsImg.url,
            width: unref(l).mergedConfig.pointsImg.width,
            height: unref(l).mergedConfig.pointsImg.height,
            x: G[0][0] - unref(l).mergedConfig.pointsImg.width / 2,
            y: G[0][1] - unref(l).mergedConfig.pointsImg.height / 2
          }, null, 8, zl),
          createBaseVNode("text", {
            style: normalizeStyle(`fontSize:${unref(l).mergedConfig.text.fontSize}px;`),
            fill: unref(l).mergedConfig.text.color,
            x: G[0][0] + unref(l).mergedConfig.text.offset[0],
            y: G[0][1] + unref(l).mergedConfig.text.offset[1]
          }, toDisplayString(unref(l).texts[k]), 13, ql)
        ]))), 128))
      ], 8, bl)) : createCommentVNode("", true)
    ], 4));
  }
};
var xr = {
  install(e) {
    e.component("DvFlylineChart", Il);
  }
};
var Hl = (e) => (pushScopeId("data-v-282cb432"), e = e(), popScopeId(), e);
var Vl = { class: "ranking-info" };
var Ul = { class: "rank" };
var Xl = ["innerHTML"];
var Ql = { class: "ranking-value" };
var Yl = { class: "ranking-column" };
var Kl = Hl(() => createBaseVNode("div", { class: "shine" }, null, -1));
var Jl = [
  Kl
];
var Zl = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    }
  },
  setup(e) {
    useCssVars((g) => ({
      "2801d2f6": unref(C),
      "5c86b458": unref(l),
      "6524ce8e": unref(I),
      "65ae9c69": unref(x)
    }));
    const r = e, n = ref(null), { width: t, height: a } = Ce(n, U, W), o = reactive({
      defaultConfig: {
        /**
             * @description Board data
             * @type {Array<Object>}
             * @default data = []
             */
        data: [],
        /**
             * @description Row num
             * @type {Number}
             * @default rowNum = 5
             */
        rowNum: 5,
        /**
             * @description Scroll wait time
             * @type {Number}
             * @default waitTime = 2000
             */
        waitTime: 2e3,
        /**
             * @description Carousel type
             * @type {String}
             * @default carousel = 'single'
             * @example carousel = 'single' | 'page'
             */
        carousel: "single",
        /**
             * @description Value unit
             * @type {String}
             * @default unit = ''
             * @example unit = 'ton'
             */
        unit: "",
        /**
             * @description Auto sort by value
             * @type {Boolean}
             * @default sort = true
             */
        sort: true,
        /**
             * @description Value formatter
             * @type {Function}
             * @default valueFormatter = null
             */
        valueFormatter: null,
        /**
             * @description Text color
             * @type {String}
             * @default textColor = '#fff'
             */
        textColor: "#fff",
        /**
             * @description Main theme color
             * @type {String}
             * @default color = '#1370fb'
             */
        color: "#1370fb",
        /**
             * @description Font size
             * @type {Number}
             * @default fontSize = 13
             */
        fontSize: 13
      },
      mergedConfig: null,
      rowsData: [],
      rows: [],
      heights: [],
      avgHeight: 0,
      animationIndex: 0,
      animationHandler: "",
      updater: 0
    });
    watch(() => r.config, () => {
      N(), F();
    }, {
      deep: true
    });
    const l = computed(() => r.config.textColor ? r.config.textColor : o.defaultConfig.textColor), C = computed(() => r.config.color ? r.config.color : o.defaultConfig.color), x = computed(() => De(C.value, 50)), I = computed(() => `${r.config.fontSize ? r.config.fontSize : o.defaultConfig.fontSize}px`);
    onUnmounted(() => {
      N();
    });
    function W() {
      F();
    }
    function U() {
      o.mergedConfig && T(true);
    }
    function F() {
      S(), d(), T(), q(true);
    }
    function S() {
      o.mergedConfig = xe(_e(o.defaultConfig, true), r.config || {});
    }
    function d() {
      let { data: g } = o.mergedConfig;
      const { rowNum: _, sort: f } = o.mergedConfig;
      f && g.sort(({ value: L }, { value: v }) => L > v ? -1 : L < v ? 1 : 0);
      const G = g.map(({ value: L }) => L), k = Math.min(...G) || 0, y = Math.abs(k), c = (Math.max(...G) || 0) + y;
      g = g.map((L, v) => ({ ...L, ranking: v + 1, percent: (L.value + y) / c * 100 }));
      const R = g.length;
      R > _ && R < 2 * _ && (g = [...g, ...g]), g = g.map((L, v) => ({ ...L, scroll: v })), o.rowsData = g, o.rows = g;
    }
    function T(g = false) {
      const { rowNum: _, data: f } = o.mergedConfig, G = a.value / _;
      o.avgHeight = G, g || (o.heights = new Array(f.length).fill(G));
    }
    const E = computed(() => o.mergedConfig.carousel === "single");
    async function q(g = false) {
      const { waitTime: _, rowNum: f } = o.mergedConfig, G = o.rowsData.length;
      if (f >= G)
        return;
      const { updater: k } = o;
      if (g && (await new Promise((R) => setTimeout(R, _)), k !== o.updater))
        return;
      const y = E.value ? 1 : f, $ = o.rowsData.slice(o.animationIndex);
      if ($.push(...o.rowsData.slice(0, o.animationIndex)), o.rows = $.slice(0, E.value ? f + 1 : f * 2), o.heights = new Array(G).fill(o.avgHeight), await new Promise((R) => setTimeout(R, 300)), k !== o.updater)
        return;
      o.heights.fill(0, 0, y), o.animationIndex += y;
      const c = o.animationIndex - G;
      c >= 0 && (o.animationIndex = c), o.animationHandler = setTimeout(q, _ - 300);
    }
    function N() {
      o.updater = (o.updater + 1) % 999999, o.animationHandler && clearTimeout(o.animationHandler);
    }
    return (g, _) => (openBlock(), createElementBlock("div", {
      ref_key: "scrollRankingBoard",
      ref: n,
      class: "dv-scroll-ranking-board"
    }, [
      (openBlock(true), createElementBlock(Fragment, null, renderList(unref(o).rows, (f, G) => (openBlock(), createElementBlock("div", {
        key: f.toString() + f.scroll,
        class: "row-item",
        style: normalizeStyle(`height: ${unref(o).heights[G]}px;`)
      }, [
        createBaseVNode("div", Vl, [
          createBaseVNode("div", Ul, " No." + toDisplayString(f.ranking), 1),
          createBaseVNode("div", {
            class: "info-name",
            innerHTML: f.name
          }, null, 8, Xl),
          createBaseVNode("div", Ql, toDisplayString(unref(o).mergedConfig.valueFormatter ? unref(o).mergedConfig.valueFormatter(f) : f.value + unref(o).mergedConfig.unit), 1)
        ]),
        createBaseVNode("div", Yl, [
          createBaseVNode("div", {
            class: "inside-column",
            style: normalizeStyle(`width: ${f.percent}%;`)
          }, Jl, 4)
        ])
      ], 4))), 128))
    ], 512));
  }
};
var es = Ke(Zl, [["__scopeId", "data-v-282cb432"]]);
var $r = {
  install(e) {
    e.component("DvScrollRankingBoard", es);
  }
};
var ts = ["align", "innerHTML"];
var rs = ["align", "onClick", "onMouseenter", "innerHTML"];
var ns = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    }
  },
  emits: ["mouseover", "click", "getFirstRow"],
  setup(e, { expose: r, emit: n }) {
    const t = e, a = n, o = ref(null), { width: l, height: C } = Ce(o, F, U), x = reactive({
      defaultConfig: {
        /**
             * @description Board header
             * @type {Array<String>}
             * @default header = []
             * @example header = ['column1', 'column2', 'column3']
             */
        header: [],
        /**
             * @description Board data
             * @type {Array<Array>}
             * @default data = []
             */
        data: [],
        /**
             * @description Row num
             * @type {Number}
             * @default rowNum = 5
             */
        rowNum: 5,
        /**
             * @description Header background color
             * @type {String}
             * @default headerBGC = '#00BAFF'
             */
        headerBGC: "#00BAFF",
        /**
             * @description Odd row background color
             * @type {String}
             * @default oddRowBGC = '#003B51'
             */
        oddRowBGC: "#003B51",
        /**
             * @description Even row background color
             * @type {String}
             * @default evenRowBGC = '#003B51'
             */
        evenRowBGC: "#0A2732",
        /**
             * @description Scroll wait time
             * @type {Number}
             * @default waitTime = 2000
             */
        waitTime: 2e3,
        /**
             * @description Header height
             * @type {Number}
             * @default headerHeight = 35
             */
        headerHeight: 35,
        /**
             * @description Column width
             * @type {Array<Number>}
             * @default columnWidth = []
             */
        columnWidth: [],
        /**
             * @description Column align
             * @type {Array<String>}
             * @default align = []
             * @example align = ['left', 'center', 'right']
             */
        align: [],
        /**
             * @description Show index
             * @type {Boolean}
             * @default index = false
             */
        index: false,
        /**
             * @description index Header
             * @type {String}
             * @default indexHeader = '#'
             */
        indexHeader: "#",
        /**
             * @description Carousel type
             * @type {String}
             * @default carousel = 'single'
             * @example carousel = 'single' | 'page'
             */
        carousel: "single",
        /**
             * @description Pause scroll when mouse hovered
             * @type {Boolean}
             * @default hoverPause = true
             * @example hoverPause = true | false
             */
        hoverPause: true
      },
      mergedConfig: null,
      header: [],
      rowsData: [],
      rows: [],
      widths: [],
      heights: [],
      avgHeight: 0,
      aligns: [],
      animationIndex: 0,
      animationHandler: "",
      updater: 0,
      needCalc: false
    });
    watch(() => t.config, (k) => {
      f(), S();
    }, { deep: true }), onUnmounted(() => {
      f();
    }), r({
      updateRows: G
    });
    function I(k, y, $, c) {
      const { ceils: R, rowIndex: L } = $;
      a("click", {
        row: R,
        ceil: c,
        rowIndex: L,
        columnIndex: y
      });
    }
    function W(k, y, $, c, R) {
      if (k) {
        const { ceils: L, rowIndex: v } = c;
        a("mouseover", {
          row: L,
          ceil: R,
          rowIndex: v,
          columnIndex: $
        });
      }
      x.mergedConfig.hoverPause && (k ? f() : _(true));
    }
    function U() {
      S();
    }
    function F() {
      x.mergedConfig && (q(), N());
    }
    function S() {
      d(), T(), E(), q(), N(), g(), _(true);
    }
    function d() {
      x.mergedConfig = xe(_e(x.defaultConfig, true), t.config || {});
    }
    function T() {
      let { header: k } = x.mergedConfig;
      const { index: y, indexHeader: $ } = x.mergedConfig;
      if (!k.length) {
        k = [];
        return;
      }
      k = [...k], y && k.unshift($), x.header = k;
    }
    function E() {
      let { data: k } = x.mergedConfig;
      const { index: y, headerBGC: $, rowNum: c } = x.mergedConfig;
      y && (k = k.map((L, v) => {
        L = [...L];
        const V = `<span class="index" style="background-color: ${$};">${v + 1}</span>`;
        return L.unshift(V), L;
      })), k = k.map((L, v) => ({ ceils: L, rowIndex: v }));
      const R = k.length;
      R > c && R < 2 * c && (k = [...k, ...k]), k = k.map((L, v) => ({ ...L, scroll: v })), x.rowsData = k, x.rows = k;
    }
    function q() {
      const { columnWidth: k, header: y } = x.mergedConfig, $ = k.reduce((v, V) => v + V, 0);
      let c = 0;
      x.rowsData[0] ? c = x.rowsData[0].ceils.length : y.length && (c = y.length);
      const R = (l.value - $) / (c - k.length), L = new Array(c).fill(R);
      x.widths = xe(L, k);
    }
    function N(k = false) {
      const { headerHeight: y, rowNum: $, data: c } = x.mergedConfig;
      let R = C.value;
      x.header.length && (R -= y);
      const L = R / $;
      x.avgHeight = L, k || (x.heights = new Array(c.length).fill(L));
    }
    function g() {
      const k = x.header.length, y = new Array(k).fill("left"), { align: $ } = x.mergedConfig;
      x.aligns = xe(y, $);
    }
    async function _(k = false) {
      x.needCalc && (E(), N(), x.needCalc = false);
      const { waitTime: y, carousel: $, rowNum: c } = x.mergedConfig, { updater: R } = x, L = x.rowsData.length;
      if (c >= L || (k && await new Promise((Z) => setTimeout(Z, y)), R !== x.updater))
        return;
      const v = $ === "single" ? 1 : c, V = x.rowsData.slice(x.animationIndex);
      if (V.push(...x.rowsData.slice(0, x.animationIndex)), x.rows = V.slice(0, $ === "page" ? c * 2 : c + 1), x.heights = new Array(L).fill(x.avgHeight), await new Promise((Z) => setTimeout(Z, 300)), R !== x.updater)
        return;
      x.heights.splice(0, v, ...new Array(v).fill(0)), x.animationIndex += v;
      const X = x.animationIndex - L;
      X >= 0 && (x.animationIndex = X), x.animationHandler = setTimeout(_, y - 300), a("getFirstRow", V[1]);
    }
    function f() {
      x.updater = (x.updater + 1) % 999999, x.animationHandler && clearTimeout(x.animationHandler);
    }
    function G(k, y) {
      x.mergedConfig = {
        ...x.mergedConfig,
        data: [...k]
      }, x.needCalc = true, typeof y == "number" && (x.animationIndex = y), x.animationHandler || _(true);
    }
    return (k, y) => (openBlock(), createElementBlock("div", {
      ref_key: "scrollBoard",
      ref: o,
      class: "dv-scroll-board"
    }, [
      unref(x).header.length && unref(x).mergedConfig ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: "header",
        style: normalizeStyle(`background-color: ${unref(x).mergedConfig.headerBGC};`)
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(x).header, ($, c) => (openBlock(), createElementBlock("div", {
          key: `${$}${c}`,
          class: "header-item",
          style: normalizeStyle(`
          height: ${unref(x).mergedConfig.headerHeight}px;
          line-height: ${unref(x).mergedConfig.headerHeight}px;
          width: ${unref(x).widths[c]}px;
        `),
          align: unref(x).aligns[c],
          innerHTML: $
        }, null, 12, ts))), 128))
      ], 4)) : createCommentVNode("", true),
      unref(x).mergedConfig ? (openBlock(), createElementBlock("div", {
        key: 1,
        class: "rows",
        style: normalizeStyle(`height: ${unref(C) - (unref(x).header.length ? unref(x).mergedConfig.headerHeight : 0)}px;`)
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(x).rows, ($, c) => (openBlock(), createElementBlock("div", {
          key: `${$.toString()}${$.scroll}`,
          class: "row-item",
          style: normalizeStyle(`
          height: ${unref(x).heights[c]}px;
          line-height: ${unref(x).heights[c]}px;
          background-color: ${unref(x).mergedConfig[$.rowIndex % 2 === 0 ? "evenRowBGC" : "oddRowBGC"]};
        `)
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList($.ceils, (R, L) => (openBlock(), createElementBlock("div", {
            key: `${R}${c}${L}`,
            class: "ceil",
            style: normalizeStyle(`width: ${unref(x).widths[L]}px;`),
            align: unref(x).aligns[L],
            onClick: (v) => I(c, L, $, R),
            onMouseenter: (v) => W(true, c, L, $, R),
            onMouseleave: y[0] || (y[0] = (v) => W(false)),
            innerHTML: R
          }, null, 44, rs))), 128))
        ], 4))), 128))
      ], 4)) : createCommentVNode("", true)
    ], 512));
  }
};
var _r = {
  install(e) {
    e.component("DvScrollBoard", ns);
  }
};
var La = {};
var Pr = {};
var We = {};
var En;
function ze() {
  if (En)
    return We;
  En = 1;
  var e = we;
  Object.defineProperty(We, "__esModule", {
    value: true
  }), We.filterNonNumber = a, We.deepMerge = o, We.mulAdd = l, We.mergeSameStackData = C, We.getTwoPointDistance = x, We.getLinearGradientColor = I, We.getPolylineLength = W, We.getPointToLineDistance = U, We.initNeedSeries = F, We.radianToAngle = S;
  var r = e(Te()), n = e(je()), t = Be();
  function a(d) {
    return d.filter(function(T) {
      return typeof T == "number";
    });
  }
  function o(d, T) {
    for (var E in T) {
      if (d[E] && (0, n.default)(d[E]) === "object") {
        o(d[E], T[E]);
        continue;
      }
      if ((0, n.default)(T[E]) === "object") {
        d[E] = (0, t.deepClone)(T[E], true);
        continue;
      }
      d[E] = T[E];
    }
    return d;
  }
  function l(d) {
    return d = a(d), d.reduce(function(T, E) {
      return T + E;
    }, 0);
  }
  function C(d, T) {
    var E = d.stack;
    if (!E)
      return (0, r.default)(d.data);
    var q = T.filter(function(f) {
      var G = f.stack;
      return G === E;
    }), N = q.findIndex(function(f) {
      var G = f.data;
      return G === d.data;
    }), g = q.splice(0, N + 1).map(function(f) {
      var G = f.data;
      return G;
    }), _ = g[0].length;
    return new Array(_).fill(0).map(function(f, G) {
      return l(g.map(function(k) {
        return k[G];
      }));
    });
  }
  function x(d, T) {
    var E = Math.abs(d[0] - T[0]), q = Math.abs(d[1] - T[1]);
    return Math.sqrt(E * E + q * q);
  }
  function I(d, T, E, q) {
    if (!(!d || !T || !E || !q.length)) {
      var N = q;
      typeof N == "string" && (N = [q, q]);
      var g = d.createLinearGradient.apply(d, (0, r.default)(T).concat((0, r.default)(E))), _ = 1 / (N.length - 1);
      return N.forEach(function(f, G) {
        return g.addColorStop(_ * G, f);
      }), g;
    }
  }
  function W(d) {
    var T = new Array(d.length - 1).fill(0).map(function(q, N) {
      return [d[N], d[N + 1]];
    }), E = T.map(function(q) {
      return x.apply(void 0, (0, r.default)(q));
    });
    return l(E);
  }
  function U(d, T, E) {
    var q = x(d, T), N = x(d, E), g = x(T, E);
    return 0.5 * Math.sqrt((q + N + g) * (q + N - g) * (q + g - N) * (N + g - q)) / g;
  }
  function F(d, T, E) {
    return d = d.filter(function(q) {
      var N = q.type;
      return N === E;
    }), d = d.map(function(q) {
      return o((0, t.deepClone)(T, true), q);
    }), d.filter(function(q) {
      var N = q.show;
      return N;
    });
  }
  function S(d) {
    return d / Math.PI * 180;
  }
  return We;
}
var Sa = we;
var as = Sa(Ve());
var jn = Sa(Te());
var jt = Et;
var is = un();
var vt = Be();
var os = yt;
var ls = ze();
function zn(e, r) {
  var n = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var t = Object.getOwnPropertySymbols(e);
    r && (t = t.filter(function(a) {
      return Object.getOwnPropertyDescriptor(e, a).enumerable;
    })), n.push.apply(n, t);
  }
  return n;
}
function qn(e) {
  for (var r = 1; r < arguments.length; r++) {
    var n = arguments[r] != null ? arguments[r] : {};
    r % 2 ? zn(Object(n), true).forEach(function(t) {
      (0, as.default)(e, t, n[t]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : zn(Object(n)).forEach(function(t) {
      Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));
    });
  }
  return e;
}
var ss = {
  shape: {
    rx: 0,
    ry: 0,
    ir: 0,
    or: 0,
    startAngle: 0,
    endAngle: 0,
    clockWise: true
  },
  validator: function(r) {
    var n = r.shape, t = ["rx", "ry", "ir", "or", "startAngle", "endAngle"];
    return t.find(function(a) {
      return typeof n[a] != "number";
    }) ? (console.error("Pie shape configuration is abnormal!"), false) : true;
  },
  draw: function(r, n) {
    var t = r.ctx, a = n.shape;
    t.beginPath();
    var o = a.rx, l = a.ry, C = a.ir, x = a.or, I = a.startAngle, W = a.endAngle, U = a.clockWise;
    o = parseInt(o) + 0.5, l = parseInt(l) + 0.5, t.arc(o, l, C > 0 ? C : 0, I, W, !U);
    var F = (0, vt.getCircleRadianPoint)(o, l, x, W).map(function(d) {
      return parseInt(d) + 0.5;
    }), S = (0, vt.getCircleRadianPoint)(o, l, C, I).map(function(d) {
      return parseInt(d) + 0.5;
    });
    t.lineTo.apply(t, (0, jn.default)(F)), t.arc(o, l, x > 0 ? x : 0, W, I, U), t.lineTo.apply(t, (0, jn.default)(S)), t.closePath(), t.stroke(), t.fill();
  }
};
var us = {
  shape: {
    rx: 0,
    ry: 0,
    r: 0,
    startAngle: 0,
    endAngle: 0,
    gradientStartAngle: null,
    gradientEndAngle: null
  },
  validator: function(r) {
    var n = r.shape, t = ["rx", "ry", "r", "startAngle", "endAngle"];
    return t.find(function(a) {
      return typeof n[a] != "number";
    }) ? (console.error("AgArc shape configuration is abnormal!"), false) : true;
  },
  draw: function(r, n) {
    var t = r.ctx, a = n.shape, o = n.style, l = o.gradient;
    l = l.map(function(k) {
      return (0, os.getColorFromRgbValue)(k);
    }), l.length === 1 && (l = [l[0], l[0]]);
    var C = l.length - 1, x = a.gradientStartAngle, I = a.gradientEndAngle, W = a.startAngle, U = a.endAngle, F = a.r, S = a.rx, d = a.ry;
    x === null && (x = W), I === null && (I = U);
    var T = (I - x) / C;
    T === Math.PI * 2 && (T = Math.PI * 2 - 1e-3);
    for (var E = 0; E < C; E++) {
      t.beginPath();
      var q = (0, vt.getCircleRadianPoint)(S, d, F, W + T * E), N = (0, vt.getCircleRadianPoint)(S, d, F, W + T * (E + 1)), g = (0, ls.getLinearGradientColor)(t, q, N, [l[E], l[E + 1]]), _ = W + T * E, f = W + T * (E + 1), G = false;
      if (f > U && (f = U, G = true), t.arc(S, d, F, _, f), t.strokeStyle = g, t.stroke(), G)
        break;
    }
  }
};
var cs = {
  shape: {
    number: [],
    content: "",
    position: [0, 0],
    toFixed: 0,
    rowGap: 0,
    formatter: null
  },
  validator: function(r) {
    var n = r.shape, t = n.number, a = n.content, o = n.position;
    return !(t instanceof Array) || typeof a != "string" || !(o instanceof Array) ? (console.error("NumberText shape configuration is abnormal!"), false) : true;
  },
  draw: function(r, n) {
    var t = r.ctx, a = n.shape, o = a.number, l = a.content, C = a.toFixed, x = a.rowGap, I = a.formatter, W = l.split("{nt}"), U = "";
    W.forEach(function(F, S) {
      var d = o[S];
      typeof d != "number" && (d = ""), typeof d == "number" && (d = d.toFixed(C), typeof I == "function" && (d = I(d))), U += F + (d || "");
    }), is.text.draw({
      ctx: t
    }, {
      shape: qn(qn({}, a), {}, {
        content: U,
        rowGap: x
      })
    });
  }
};
var fs = {
  shape: {
    x: 0,
    y: 0,
    w: 0,
    h: 0
  },
  validator: function(r) {
    var n = r.shape, t = n.x, a = n.y, o = n.w, l = n.h;
    return typeof t != "number" || typeof a != "number" || typeof o != "number" || typeof l != "number" ? (console.error("lineIcon shape configuration is abnormal!"), false) : true;
  },
  draw: function(r, n) {
    var t = r.ctx, a = n.shape;
    t.beginPath();
    var o = a.x, l = a.y, C = a.w, x = a.h, I = x / 2;
    t.strokeStyle = t.fillStyle, t.moveTo(o, l + I), t.lineTo(o + C, l + I), t.lineWidth = 1, t.stroke(), t.beginPath();
    var W = I - 5 * 2;
    W <= 0 && (W = 3), t.arc(o + C / 2, l + I, W, 0, Math.PI * 2), t.lineWidth = 5, t.stroke(), t.fillStyle = "#fff", t.fill();
  },
  hoverCheck: function(r, n) {
    var t = n.shape, a = t.x, o = t.y, l = t.w, C = t.h;
    return (0, vt.checkPointIsInRect)(r, a, o, l, C);
  },
  setGraphCenter: function(r, n) {
    var t = n.shape, a = n.style, o = t.x, l = t.y, C = t.w, x = t.h;
    a.graphCenter = [o + C / 2, l + x / 2];
  }
};
(0, jt.extendNewGraph)("pie", ss);
(0, jt.extendNewGraph)("agArc", us);
(0, jt.extendNewGraph)("numberText", cs);
(0, jt.extendNewGraph)("lineIcon", fs);
var wr = {};
var xt = {};
var kr = {};
var rt = {};
var In;
function ds() {
  if (In)
    return rt;
  In = 1, Object.defineProperty(rt, "__esModule", {
    value: true
  }), rt.colorConfig = void 0;
  var e = ["#37a2da", "#32c5e9", "#67e0e3", "#9fe6b8", "#ffdb5c", "#ff9f7f", "#fb7293", "#e062ae", "#e690d1", "#e7bcf3", "#9d96f5", "#8378ea", "#96bfff"];
  return rt.colorConfig = e, rt;
}
var nt = {};
var Hn;
function hs() {
  if (Hn)
    return nt;
  Hn = 1, Object.defineProperty(nt, "__esModule", {
    value: true
  }), nt.gridConfig = void 0;
  var e = {
    /**
     * @description Grid left margin
     * @type {String|Number}
     * @default left = '10%'
     * @example left = '10%' | 10
     */
    left: "10%",
    /**
     * @description Grid right margin
     * @type {String|Number}
     * @default right = '10%'
     * @example right = '10%' | 10
     */
    right: "10%",
    /**
     * @description Grid top margin
     * @type {String|Number}
     * @default top = 60
     * @example top = '10%' | 60
     */
    top: 60,
    /**
     * @description Grid bottom margin
     * @type {String|Number}
     * @default bottom = 60
     * @example bottom = '10%' | 60
     */
    bottom: 60,
    /**
     * @description Grid default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    style: {
      fill: "rgba(0, 0, 0, 0)"
    },
    /**
     * @description Grid render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = -30
     */
    rLevel: -30,
    /**
     * @description Grid animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Grid animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 30
  };
  return nt.gridConfig = e, nt;
}
var Ze = {};
var Vn;
function vs() {
  if (Vn)
    return Ze;
  Vn = 1, Object.defineProperty(Ze, "__esModule", {
    value: true
  }), Ze.yAxisConfig = Ze.xAxisConfig = void 0;
  var e = {
    /**
     * @description Axis name
     * @type {String}
     * @default name = ''
     */
    name: "",
    /**
     * @description Whether to display this axis
     * @type {Boolean}
     * @default show = true
     */
    show: true,
    /**
     * @description Axis position
     * @type {String}
     * @default position = 'bottom'
     * @example position = 'bottom' | 'top'
     */
    position: "bottom",
    /**
     * @description Name gap
     * @type {Number}
     * @default nameGap = 15
     */
    nameGap: 15,
    /**
     * @description Name location
     * @type {String}
     * @default nameLocation = 'end'
     * @example nameLocation = 'end' | 'center' | 'start'
     */
    nameLocation: "end",
    /**
     * @description Name default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    nameTextStyle: {
      fill: "#333",
      fontSize: 10
    },
    /**
     * @description Axis min value
     * @type {String|Number}
     * @default min = '20%'
     * @example min = '20%' | 0
     */
    min: "20%",
    /**
     * @description Axis max value
     * @type {String|Number}
     * @default max = '20%'
     * @example max = '20%' | 0
     */
    max: "20%",
    /**
     * @description Axis value interval
     * @type {Number}
     * @default interval = null
     * @example interval = 100
     */
    interval: null,
    /**
     * @description Min interval
     * @type {Number}
     * @default minInterval = null
     * @example minInterval = 1
     */
    minInterval: null,
    /**
     * @description Max interval
     * @type {Number}
     * @default maxInterval = null
     * @example maxInterval = 100
     */
    maxInterval: null,
    /**
     * @description Boundary gap
     * @type {Boolean}
     * @default boundaryGap = null
     * @example boundaryGap = true
     */
    boundaryGap: null,
    /**
     * @description Axis split number
     * @type {Number}
     * @default splitNumber = 5
     */
    splitNumber: 5,
    /**
     * @description Axis line configuration
     * @type {Object}
     */
    axisLine: {
      /**
       * @description Whether to display axis line
       * @type {Boolean}
       * @default show = true
       */
      show: true,
      /**
       * @description Axis line default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#333",
        lineWidth: 1
      }
    },
    /**
     * @description Axis tick configuration
     * @type {Object}
     */
    axisTick: {
      /**
       * @description Whether to display axis tick
       * @type {Boolean}
       * @default show = true
       */
      show: true,
      /**
       * @description Axis tick default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#333",
        lineWidth: 1
      }
    },
    /**
     * @description Axis label configuration
     * @type {Object}
     */
    axisLabel: {
      /**
       * @description Whether to display axis label
       * @type {Boolean}
       * @default show = true
       */
      show: true,
      /**
       * @description Axis label formatter
       * @type {String|Function}
       * @default formatter = null
       * @example formatter = '{value}件'
       * @example formatter = (dataItem) => (dataItem.value)
       */
      formatter: null,
      /**
       * @description Axis label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fill: "#333",
        fontSize: 10,
        rotate: 0
      }
    },
    /**
     * @description Axis split line configuration
     * @type {Object}
     */
    splitLine: {
      /**
       * @description Whether to display axis split line
       * @type {Boolean}
       * @default show = false
       */
      show: false,
      /**
       * @description Axis split line default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#d4d4d4",
        lineWidth: 1
      }
    },
    /**
     * @description X axis render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = -20
     */
    rLevel: -20,
    /**
     * @description X axis animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description X axis animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  Ze.xAxisConfig = e;
  var r = {
    /**
     * @description Axis name
     * @type {String}
     * @default name = ''
     */
    name: "",
    /**
     * @description Whether to display this axis
     * @type {Boolean}
     * @default show = true
     */
    show: true,
    /**
     * @description Axis position
     * @type {String}
     * @default position = 'left'
     * @example position = 'left' | 'right'
     */
    position: "left",
    /**
     * @description Name gap
     * @type {Number}
     * @default nameGap = 15
     */
    nameGap: 15,
    /**
     * @description Name location
     * @type {String}
     * @default nameLocation = 'end'
     * @example nameLocation = 'end' | 'center' | 'start'
     */
    nameLocation: "end",
    /**
     * @description name default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    nameTextStyle: {
      fill: "#333",
      fontSize: 10
    },
    /**
     * @description Axis min value
     * @type {String|Number}
     * @default min = '20%'
     * @example min = '20%' | 0
     */
    min: "20%",
    /**
     * @description Axis max value
     * @type {String|Number}
     * @default max = '20%'
     * @example max = '20%' | 0
     */
    max: "20%",
    /**
     * @description Axis value interval
     * @type {Number}
     * @default interval = null
     * @example interval = 100
     */
    interval: null,
    /**
     * @description Min interval
     * @type {Number}
     * @default minInterval = null
     * @example minInterval = 1
     */
    minInterval: null,
    /**
     * @description Max interval
     * @type {Number}
     * @default maxInterval = null
     * @example maxInterval = 100
     */
    maxInterval: null,
    /**
     * @description Boundary gap
     * @type {Boolean}
     * @default boundaryGap = null
     * @example boundaryGap = true
     */
    boundaryGap: null,
    /**
     * @description Axis split number
     * @type {Number}
     * @default splitNumber = 5
     */
    splitNumber: 5,
    /**
     * @description Axis line configuration
     * @type {Object}
     */
    axisLine: {
      /**
       * @description Whether to display axis line
       * @type {Boolean}
       * @default show = true
       */
      show: true,
      /**
       * @description Axis line default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#333",
        lineWidth: 1
      }
    },
    /**
     * @description Axis tick configuration
     * @type {Object}
     */
    axisTick: {
      /**
       * @description Whether to display axis tick
       * @type {Boolean}
       * @default show = true
       */
      show: true,
      /**
       * @description Axis tick default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#333",
        lineWidth: 1
      }
    },
    /**
     * @description Axis label configuration
     * @type {Object}
     */
    axisLabel: {
      /**
       * @description Whether to display axis label
       * @type {Boolean}
       * @default show = true
       */
      show: true,
      /**
       * @description Axis label formatter
       * @type {String|Function}
       * @default formatter = null
       * @example formatter = '{value}件'
       * @example formatter = (dataItem) => (dataItem.value)
       */
      formatter: null,
      /**
       * @description Axis label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fill: "#333",
        fontSize: 10,
        rotate: 0
      }
    },
    /**
     * @description Axis split line configuration
     * @type {Object}
     */
    splitLine: {
      /**
       * @description Whether to display axis split line
       * @type {Boolean}
       * @default show = true
       */
      show: true,
      /**
       * @description Axis split line default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#d4d4d4",
        lineWidth: 1
      }
    },
    /**
     * @description Y axis render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = -20
     */
    rLevel: -20,
    /**
     * @description Y axis animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Y axis animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  return Ze.yAxisConfig = r, Ze;
}
var at = {};
var Un;
function ps() {
  if (Un)
    return at;
  Un = 1, Object.defineProperty(at, "__esModule", {
    value: true
  }), at.titleConfig = void 0;
  var e = {
    /**
     * @description Whether to display title
     * @type {Boolean}
     * @default show = true
     */
    show: true,
    /**
     * @description Title text
     * @type {String}
     * @default text = ''
     */
    text: "",
    /**
     * @description Title offset
     * @type {Array}
     * @default offset = [0, -20]
     */
    offset: [0, -20],
    /**
     * @description Title default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    style: {
      fill: "#333",
      fontSize: 17,
      fontWeight: "bold",
      textAlign: "center",
      textBaseline: "bottom"
    },
    /**
     * @description Title render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = 20
     */
    rLevel: 20,
    /**
     * @description Title animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Title animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  return at.titleConfig = e, at;
}
var it = {};
var Xn;
function gs() {
  if (Xn)
    return it;
  Xn = 1, Object.defineProperty(it, "__esModule", {
    value: true
  }), it.lineConfig = void 0;
  var e = {
    /**
     * @description Whether to display this line chart
     * @type {Boolean}
     * @default show = true
     */
    show: true,
    /**
     * @description Legend name
     * @type {String}
     * @default name = ''
     */
    name: "",
    /**
     * @description Data stacking
     * The data value of the series element of the same stack
     * will be superimposed (the latter value will be superimposed on the previous value)
     * @type {String}
     * @default stack = ''
     */
    stack: "",
    /**
     * @description Smooth line
     * @type {Boolean}
     * @default smooth = false
     */
    smooth: false,
    /**
     * @description Line x axis index
     * @type {Number}
     * @default xAxisIndex = 0
     * @example xAxisIndex = 0 | 1
     */
    xAxisIndex: 0,
    /**
     * @description Line y axis index
     * @type {Number}
     * @default yAxisIndex = 0
     * @example yAxisIndex = 0 | 1
     */
    yAxisIndex: 0,
    /**
     * @description Line chart data
     * @type {Array}
     * @default data = []
     * @example data = [100, 200, 300]
     */
    data: [],
    /**
     * @description Line default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    lineStyle: {
      lineWidth: 1
    },
    /**
     * @description Line point configuration
     * @type {Object}
     */
    linePoint: {
      /**
       * @description Whether to display line point
       * @type {Boolean}
       * @default show = true
       */
      show: true,
      /**
       * @description Line point radius
       * @type {Number}
       * @default radius = 2
       */
      radius: 2,
      /**
       * @description Line point default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fill: "#fff",
        lineWidth: 1
      }
    },
    /**
     * @description Line area configuration
     * @type {Object}
     */
    lineArea: {
      /**
       * @description Whether to display line area
       * @type {Boolean}
       * @default show = false
       */
      show: false,
      /**
       * @description Line area gradient color (Hex|rgb|rgba)
       * @type {Array}
       * @default gradient = []
       */
      gradient: [],
      /**
       * @description Line area style default configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        opacity: 0.5
      }
    },
    /**
     * @description Line label configuration
     * @type {Object}
     */
    label: {
      /**
       * @description Whether to display line label
       * @type {Boolean}
       * @default show = false
       */
      show: false,
      /**
       * @description Line label position
       * @type {String}
       * @default position = 'top'
       * @example position = 'top' | 'center' | 'bottom'
       */
      position: "top",
      /**
       * @description Line label offset
       * @type {Array}
       * @default offset = [0, -10]
       */
      offset: [0, -10],
      /**
       * @description Line label formatter
       * @type {String|Function}
       * @default formatter = null
       * @example formatter = '{value}件'
       * @example formatter = (dataItem) => (dataItem.value)
       */
      formatter: null,
      /**
       * @description Line label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fontSize: 10
      }
    },
    /**
     * @description Line chart render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = 10
     */
    rLevel: 10,
    /**
     * @description Line animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Line animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  return it.lineConfig = e, it;
}
var ot = {};
var Qn;
function ms() {
  if (Qn)
    return ot;
  Qn = 1, Object.defineProperty(ot, "__esModule", {
    value: true
  }), ot.barConfig = void 0;
  var e = {
    /**
     * @description Whether to display this bar chart
     * @type {Boolean}
     * @default show = true
     */
    show: true,
    /**
     * @description Legend name
     * @type {String}
     * @default name = ''
     */
    name: "",
    /**
     * @description Data stacking
     * The data value of the series element of the same stack
     * will be superimposed (the latter value will be superimposed on the previous value)
     * @type {String}
     * @default stack = ''
     */
    stack: "",
    /**
     * @description Bar shape type
     * @type {String}
     * @default shapeType = 'normal'
     * @example shapeType = 'normal' | 'leftEchelon' | 'rightEchelon'
     */
    shapeType: "normal",
    /**
     * @description Echelon bar sharpness offset
     * @type {Number}
     * @default echelonOffset = 10
     */
    echelonOffset: 10,
    /**
     * @description Bar width
     * This property should be set on the last 'bar' series
     * in this coordinate system to take effect and will be in effect
     * for all 'bar' series in this coordinate system
     * @type {String|Number}
     * @default barWidth = 'auto'
     * @example barWidth = 'auto' | '10%' | 20
     */
    barWidth: "auto",
    /**
     * @description Bar gap
     * This property should be set on the last 'bar' series
     * in this coordinate system to take effect and will be in effect
     * for all 'bar' series in this coordinate system
     * @type {String|Number}
     * @default barGap = '30%'
     * @example barGap = '30%' | 30
     */
    barGap: "30%",
    /**
     * @description Bar category gap
     * This property should be set on the last 'bar' series
     * in this coordinate system to take effect and will be in effect
     * for all 'bar' series in this coordinate system
     * @type {String|Number}
     * @default barCategoryGap = '20%'
     * @example barCategoryGap = '20%' | 20
     */
    barCategoryGap: "20%",
    /**
     * @description Bar x axis index
     * @type {Number}
     * @default xAxisIndex = 0
     * @example xAxisIndex = 0 | 1
     */
    xAxisIndex: 0,
    /**
     * @description Bar y axis index
     * @type {Number}
     * @default yAxisIndex = 0
     * @example yAxisIndex = 0 | 1
     */
    yAxisIndex: 0,
    /**
     * @description Bar chart data
     * @type {Array}
     * @default data = []
     * @example data = [100, 200, 300]
     */
    data: [],
    /**
     * @description Background bar configuration
     * @type {Object}
     */
    backgroundBar: {
      /**
       * @description Whether to display background bar
       * @type {Boolean}
       * @default show = false
       */
      show: false,
      /**
       * @description Background bar width
       * @type {String|Number}
       * @default width = 'auto'
       * @example width = 'auto' | '30%' | 30
       */
      width: "auto",
      /**
       * @description Background bar default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fill: "rgba(200, 200, 200, .4)"
      }
    },
    /**
     * @description Bar label configuration
     * @type {Object}
     */
    label: {
      /**
       * @description Whether to display bar label
       * @type {Boolean}
       * @default show = false
       */
      show: false,
      /**
       * @description Bar label position
       * @type {String}
       * @default position = 'top'
       * @example position = 'top' | 'center' | 'bottom'
       */
      position: "top",
      /**
       * @description Bar label offset
       * @type {Array}
       * @default offset = [0, -10]
       */
      offset: [0, -10],
      /**
       * @description Bar label formatter
       * @type {String|Function}
       * @default formatter = null
       * @example formatter = '{value}件'
       * @example formatter = (dataItem) => (dataItem.value)
       */
      formatter: null,
      /**
       * @description Bar label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fontSize: 10
      }
    },
    /**
     * @description Bar gradient configuration
     * @type {Object}
     */
    gradient: {
      /**
       * @description Gradient color (Hex|rgb|rgba)
       * @type {Array}
       * @default color = []
       */
      color: [],
      /**
       * @description Local gradient
       * @type {Boolean}
       * @default local = true
       */
      local: true
    },
    /**
     * @description Bar style default configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    barStyle: {},
    /**
     * @description Independent color mode
     * When set to true, independent color mode is enabled
     * @type {Boolean}
     * @default independentColor = false
     */
    independentColor: false,
    /**
     * @description Independent colors
     * Only effective when independent color mode is enabled
     * Default value is the same as the color in the root configuration
     * Two-dimensional color array can produce gradient colors
     * @type {Array}
     * @example independentColor = ['#fff', '#000']
     * @example independentColor = [['#fff', '#000'], '#000']
     */
    independentColors: [],
    /**
     * @description Bar chart render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = 0
     */
    rLevel: 0,
    /**
     * @description Bar animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Bar animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  return ot.barConfig = e, ot;
}
var lt = {};
var Yn;
function Oa() {
  if (Yn)
    return lt;
  Yn = 1, Object.defineProperty(lt, "__esModule", {
    value: true
  }), lt.pieConfig = void 0;
  var e = {
    /**
     * @description Whether to display this pie chart
     * @type {Boolean}
     * @default show = true
     */
    show: true,
    /**
     * @description Legend name
     * @type {String}
     * @default name = ''
     */
    name: "",
    /**
     * @description Radius of pie
     * @type {String|Number}
     * @default radius = '50%'
     * @example radius = '50%' | 100
     */
    radius: "50%",
    /**
     * @description Center point of pie
     * @type {Array}
     * @default center = ['50%','50%']
     * @example center = ['50%','50%'] | [100, 100]
     */
    center: ["50%", "50%"],
    /**
     * @description Pie chart start angle
     * @type {Number}
     * @default startAngle = -Math.PI / 2
     * @example startAngle = -Math.PI
     */
    startAngle: -Math.PI / 2,
    /**
     * @description Whether to enable rose type
     * @type {Boolean}
     * @default roseType = false
     */
    roseType: false,
    /**
     * @description Automatic sorting in rose type
     * @type {Boolean}
     * @default roseSort = true
     */
    roseSort: true,
    /**
     * @description Rose radius increasing
     * @type {String|Number}
     * @default roseIncrement = 'auto'
     * @example roseIncrement = 'auto' | '10%' | 10
     */
    roseIncrement: "auto",
    /**
     * @description Pie chart data
     * @type {Array}
     * @default data = []
     */
    data: [],
    /**
     * @description Pie inside label configuration
     * @type {Object}
     */
    insideLabel: {
      /**
       * @description Whether to display inside label
       * @type {Boolean}
       * @default show = false
       */
      show: false,
      /**
       * @description Label formatter
       * @type {String|Function}
       * @default formatter = '{percent}%'
       * @example formatter = '${name}-{value}-{percent}%'
       * @example formatter = (dataItem) => (dataItem.name)
       */
      formatter: "{percent}%",
      /**
       * @description Label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fontSize: 10,
        fill: "#fff",
        textAlign: "center",
        textBaseline: "middle"
      }
    },
    /**
     * @description Pie Outside label configuration
     * @type {Object}
     */
    outsideLabel: {
      /**
       * @description Whether to display outside label
       * @type {Boolean}
       * @default show = false
       */
      show: true,
      /**
       * @description Label formatter
       * @type {String|Function}
       * @default formatter = '{name}'
       * @example formatter = '${name}-{value}-{percent}%'
       * @example formatter = (dataItem) => (dataItem.name)
       */
      formatter: "{name}",
      /**
       * @description Label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fontSize: 11
      },
      /**
       * @description Gap beteen label line bended place and pie
       * @type {String|Number}
       * @default labelLineBendGap = '20%'
       * @example labelLineBendGap = '20%' | 20
       */
      labelLineBendGap: "20%",
      /**
       * @description Label line end length
       * @type {Number}
       * @default labelLineEndLength = 50
       */
      labelLineEndLength: 50,
      /**
       * @description Label line default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      labelLineStyle: {
        lineWidth: 1
      }
    },
    /**
     * @description Pie default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    pieStyle: {},
    /**
     * @description Percentage fractional precision
     * @type {Number}
     * @default percentToFixed = 0
     */
    percentToFixed: 0,
    /**
     * @description Pie chart render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = 10
     */
    rLevel: 10,
    /**
     * @description Animation delay gap
     * @type {Number}
     * @default animationDelayGap = 60
     */
    animationDelayGap: 60,
    /**
     * @description Pie animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Pie start animation curve
     * @type {String}
     * @default startAnimationCurve = 'easeOutBack'
     */
    startAnimationCurve: "easeOutBack",
    /**
     * @description Pie animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  return lt.pieConfig = e, lt;
}
var st = {};
var Kn;
function ys() {
  if (Kn)
    return st;
  Kn = 1, Object.defineProperty(st, "__esModule", {
    value: true
  }), st.radarAxisConfig = void 0;
  var e = {
    /**
     * @description Whether to display this radar axis
     * @type {Boolean}
     * @default show = true
     */
    show: true,
    /**
     * @description Center point of radar axis
     * @type {Array}
     * @default center = ['50%','50%']
     * @example center = ['50%','50%'] | [100, 100]
     */
    center: ["50%", "50%"],
    /**
     * @description Radius of radar axis
     * @type {String|Number}
     * @default radius = '65%'
     * @example radius = '65%' | 100
     */
    radius: "65%",
    /**
     * @description Radar axis start angle
     * @type {Number}
     * @default startAngle = -Math.PI / 2
     * @example startAngle = -Math.PI
     */
    startAngle: -Math.PI / 2,
    /**
     * @description Radar axis split number
     * @type {Number}
     * @default splitNum = 5
     */
    splitNum: 5,
    /**
     * @description Whether to enable polygon radar axis
     * @type {Boolean}
     * @default polygon = false
     */
    polygon: false,
    /**
     * @description Axis label configuration
     * @type {Object}
     */
    axisLabel: {
      /**
       * @description Whether to display axis label
       * @type {Boolean}
       * @default show = true
       */
      show: true,
      /**
       * @description Label gap between label and radar axis
       * @type {Number}
       * @default labelGap = 15
       */
      labelGap: 15,
      /**
       * @description Label color (Hex|rgb|rgba), will cover style.fill
       * @type {Array}
       * @default color = []
       */
      color: [],
      /**
       * @description Axis label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fill: "#333"
      }
    },
    /**
     * @description Axis line configuration
     * @type {Object}
     */
    axisLine: {
      /**
       * @description Whether to display axis line
       * @type {Boolean}
       * @default show = true
       */
      show: true,
      /**
       * @description Line color (Hex|rgb|rgba), will cover style.stroke
       * @type {Array}
       * @default color = []
       */
      color: [],
      /**
       * @description Axis label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#999",
        lineWidth: 1
      }
    },
    /**
     * @description Split line configuration
     * @type {Object}
     */
    splitLine: {
      /**
       * @description Whether to display split line
       * @type {Boolean}
       * @default show = true
       */
      show: true,
      /**
       * @description Line color (Hex|rgb|rgba), will cover style.stroke
       * @type {Array}
       * @default color = []
       */
      color: [],
      /**
       * @description Split line default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#d4d4d4",
        lineWidth: 1
      }
    },
    /**
     * @description Split area configuration
     * @type {Object}
     */
    splitArea: {
      /**
       * @description Whether to display split area
       * @type {Boolean}
       * @default show = false
       */
      show: false,
      /**
       * @description Area color (Hex|rgb|rgba), will cover style.stroke
       * @type {Array}
       * @default color = []
       */
      color: ["#f5f5f5", "#e6e6e6"],
      /**
       * @description Split area default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {}
    },
    /**
     * @description Bar chart render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = -10
     */
    rLevel: -10,
    /**
     * @description Radar axis animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Radar axis animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrane: 50
  };
  return st.radarAxisConfig = e, st;
}
var ut = {};
var Jn;
function bs() {
  if (Jn)
    return ut;
  Jn = 1, Object.defineProperty(ut, "__esModule", {
    value: true
  }), ut.radarConfig = void 0;
  var e = {
    /**
     * @description Whether to display this radar
     * @type {Boolean}
     * @default show = true
     */
    show: true,
    /**
     * @description Legend name
     * @type {String}
     * @default name = ''
     */
    name: "",
    /**
     * @description Radar chart data
     * @type {Array}
     * @default data = []
     * @example data = [100, 200, 300]
     */
    data: [],
    /**
     * @description Radar default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    radarStyle: {
      lineWidth: 1
    },
    /**
     * @description Radar point configuration
     * @type {Object}
     */
    point: {
      /**
       * @description Whether to display radar point
       * @type {Boolean}
       * @default show = true
       */
      show: true,
      /**
       * @description Point radius
       * @type {Number}
       * @default radius = 2
       */
      radius: 2,
      /**
       * @description Radar point default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fill: "#fff"
      }
    },
    /**
     * @description Radar label configuration
     * @type {Object}
     */
    label: {
      /**
       * @description Whether to display radar label
       * @type {Boolean}
       * @default show = true
       */
      show: true,
      /**
       * @description Label position offset
       * @type {Array}
       * @default offset = [0, 0]
       */
      offset: [0, 0],
      /**
       * @description Label gap between label and radar
       * @type {Number}
       * @default labelGap = 5
       */
      labelGap: 5,
      /**
       * @description Label formatter
       * @type {String|Function}
       * @default formatter = null
       * @example formatter = 'Score-{value}'
       * @example formatter = (label) => (label)
       */
      formatter: null,
      /**
       * @description Radar label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fontSize: 10
      }
    },
    /**
     * @description Radar chart render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = 10
     */
    rLevel: 10,
    /**
     * @description Radar animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Radar animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrane: 50
  };
  return ut.radarConfig = e, ut;
}
var ct = {};
var Zn;
function Ga() {
  if (Zn)
    return ct;
  Zn = 1, Object.defineProperty(ct, "__esModule", {
    value: true
  }), ct.gaugeConfig = void 0;
  var e = {
    /**
     * @description Whether to display this gauge
     * @type {Boolean}
     * @default show = true
     */
    show: true,
    /**
     * @description Legend name
     * @type {String}
     * @default name = ''
     */
    name: "",
    /**
     * @description Radius of gauge
     * @type {String|Number}
     * @default radius = '60%'
     * @example radius = '60%' | 100
     */
    radius: "60%",
    /**
     * @description Center point of gauge
     * @type {Array}
     * @default center = ['50%','50%']
     * @example center = ['50%','50%'] | [100, 100]
     */
    center: ["50%", "50%"],
    /**
     * @description Gauge start angle
     * @type {Number}
     * @default startAngle = -(Math.PI / 4) * 5
     * @example startAngle = -Math.PI
     */
    startAngle: -(Math.PI / 4) * 5,
    /**
     * @description Gauge end angle
     * @type {Number}
     * @default endAngle = Math.PI / 4
     * @example endAngle = 0
     */
    endAngle: Math.PI / 4,
    /**
     * @description Gauge min value
     * @type {Number}
     * @default min = 0
     */
    min: 0,
    /**
     * @description Gauge max value
     * @type {Number}
     * @default max = 100
     */
    max: 100,
    /**
     * @description Gauge split number
     * @type {Number}
     * @default splitNum = 5
     */
    splitNum: 5,
    /**
     * @description Gauge arc line width
     * @type {Number}
     * @default arcLineWidth = 15
     */
    arcLineWidth: 15,
    /**
     * @description Gauge chart data
     * @type {Array}
     * @default data = []
     */
    data: [],
    /**
     * @description Data item arc default style configuration
     * @type {Object}
     * @default dataItemStyle = {Configuration Of Class Style}
     */
    dataItemStyle: {},
    /**
     * @description Axis tick configuration
     * @type {Object}
     */
    axisTick: {
      /**
       * @description Whether to display axis tick
       * @type {Boolean}
       * @default show = true
       */
      show: true,
      /**
       * @description Axis tick length
       * @type {Number}
       * @default tickLength = 6
       */
      tickLength: 6,
      /**
       * @description Axis tick default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#999",
        lineWidth: 1
      }
    },
    /**
     * @description Axis label configuration
     * @type {Object}
     */
    axisLabel: {
      /**
       * @description Whether to display axis label
       * @type {Boolean}
       * @default show = true
       */
      show: true,
      /**
       * @description Axis label data (Can be calculated automatically)
       * @type {Array}
       * @default data = [Number...]
       */
      data: [],
      /**
       * @description Axis label formatter
       * @type {String|Function}
       * @default formatter = null
       * @example formatter = '{value}%'
       * @example formatter = (labelItem) => (labelItem.value)
       */
      formatter: null,
      /**
       * @description Axis label gap between label and axis tick
       * @type {String|Function}
       * @default labelGap = 5
       */
      labelGap: 5,
      /**
       * @description Axis label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {}
    },
    /**
     * @description Gauge pointer configuration
     * @type {Object}
     */
    pointer: {
      /**
       * @description Whether to display pointer
       * @type {Boolean}
       * @default show = true
       */
      show: true,
      /**
       * @description Pointer value index of data
       * @type {Number}
       * @default valueIndex = 0 (pointer.value = data[0].value)
       */
      valueIndex: 0,
      /**
       * @description Pointer default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        scale: [1, 1],
        fill: "#fb7293"
      }
    },
    /**
     * @description Data item arc detail configuration
     * @type {Object}
     */
    details: {
      /**
       * @description Whether to display details
       * @type {Boolean}
       * @default show = false
       */
      show: false,
      /**
       * @description Details formatter
       * @type {String|Function}
       * @default formatter = null
       * @example formatter = '{value}%'
       * @example formatter = '{name}%'
       * @example formatter = (dataItem) => (dataItem.value)
       */
      formatter: null,
      /**
       * @description Details position offset
       * @type {Array}
       * @default offset = [0, 0]
       * @example offset = [10, 10]
       */
      offset: [0, 0],
      /**
       * @description Value fractional precision
       * @type {Number}
       * @default valueToFixed = 0
       */
      valueToFixed: 0,
      /**
       * @description Details position
       * @type {String}
       * @default position = 'center'
       * @example position = 'start' | 'center' | 'end'
       */
      position: "center",
      /**
       * @description Details default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fontSize: 20,
        fontWeight: "bold",
        textAlign: "center",
        textBaseline: "middle"
      }
    },
    /**
     * @description Gauge background arc configuration
     * @type {Object}
     */
    backgroundArc: {
      /**
       * @description Whether to display background arc
       * @type {Boolean}
       * @default show = true
       */
      show: true,
      /**
       * @description Background arc default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#e0e0e0"
      }
    },
    /**
     * @description Gauge chart render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = 10
     */
    rLevel: 10,
    /**
     * @description Gauge animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Gauge animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  return ct.gaugeConfig = e, ct;
}
var ft = {};
var ea;
function Cs() {
  if (ea)
    return ft;
  ea = 1, Object.defineProperty(ft, "__esModule", {
    value: true
  }), ft.legendConfig = void 0;
  var e = {
    /**
     * @description Whether to display legend
     * @type {Boolean}
     * @default show = true
     */
    show: true,
    /**
     * @description Legend orient
     * @type {String}
     * @default orient = 'horizontal'
     * @example orient = 'horizontal' | 'vertical'
     */
    orient: "horizontal",
    /**
     * @description Legend left
     * @type {String|Number}
     * @default left = 'auto'
     * @example left = 'auto' | '10%' | 10
     */
    left: "auto",
    /**
     * @description Legend right
     * @type {String|Number}
     * @default right = 'auto'
     * @example right = 'auto' | '10%' | 10
     */
    right: "auto",
    /**
     * @description Legend top
     * @type {String|Number}
     * @default top = 'auto'
     * @example top = 'auto' | '10%' | 10
     */
    top: "auto",
    /**
     * @description Legend bottom
     * @type {String|Number}
     * @default bottom = 'auto'
     * @example bottom = 'auto' | '10%' | 10
     */
    bottom: "auto",
    /**
     * @description Legend item gap
     * @type {Number}
     * @default itemGap = 10
     */
    itemGap: 10,
    /**
     * @description Icon width
     * @type {Number}
     * @default iconWidth = 25
     */
    iconWidth: 25,
    /**
     * @description Icon height
     * @type {Number}
     * @default iconHeight = 10
     */
    iconHeight: 10,
    /**
     * @description Whether legend is optional
     * @type {Boolean}
     * @default selectAble = true
     */
    selectAble: true,
    /**
     * @description Legend data
     * @type {Array}
     * @default data = []
     */
    data: [],
    /**
     * @description Legend text default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    textStyle: {
      fontFamily: "Arial",
      fontSize: 13,
      fill: "#000"
    },
    /**
     * @description Legend icon default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    iconStyle: {},
    /**
     * @description Legend text unselected default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    textUnselectedStyle: {
      fontFamily: "Arial",
      fontSize: 13,
      fill: "#999"
    },
    /**
     * @description Legend icon unselected default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    iconUnselectedStyle: {
      fill: "#999"
    },
    /**
     * @description Legend render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = 20
     */
    rLevel: 20,
    /**
     * @description Legend animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Legend animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  return ft.legendConfig = e, ft;
}
var ta;
function Ue() {
  return ta || (ta = 1, function(e) {
    Object.defineProperty(e, "__esModule", {
      value: true
    }), e.changeDefaultConfig = d, Object.defineProperty(e, "colorConfig", {
      enumerable: true,
      get: function() {
        return r.colorConfig;
      }
    }), Object.defineProperty(e, "gridConfig", {
      enumerable: true,
      get: function() {
        return n.gridConfig;
      }
    }), Object.defineProperty(e, "xAxisConfig", {
      enumerable: true,
      get: function() {
        return t.xAxisConfig;
      }
    }), Object.defineProperty(e, "yAxisConfig", {
      enumerable: true,
      get: function() {
        return t.yAxisConfig;
      }
    }), Object.defineProperty(e, "titleConfig", {
      enumerable: true,
      get: function() {
        return a.titleConfig;
      }
    }), Object.defineProperty(e, "lineConfig", {
      enumerable: true,
      get: function() {
        return o.lineConfig;
      }
    }), Object.defineProperty(e, "barConfig", {
      enumerable: true,
      get: function() {
        return l.barConfig;
      }
    }), Object.defineProperty(e, "pieConfig", {
      enumerable: true,
      get: function() {
        return C.pieConfig;
      }
    }), Object.defineProperty(e, "radarAxisConfig", {
      enumerable: true,
      get: function() {
        return x.radarAxisConfig;
      }
    }), Object.defineProperty(e, "radarConfig", {
      enumerable: true,
      get: function() {
        return I.radarConfig;
      }
    }), Object.defineProperty(e, "gaugeConfig", {
      enumerable: true,
      get: function() {
        return W.gaugeConfig;
      }
    }), Object.defineProperty(e, "legendConfig", {
      enumerable: true,
      get: function() {
        return U.legendConfig;
      }
    }), e.keys = void 0;
    var r = ds(), n = hs(), t = vs(), a = ps(), o = gs(), l = ms(), C = Oa(), x = ys(), I = bs(), W = Ga(), U = Cs(), F = ze(), S = {
      colorConfig: r.colorConfig,
      gridConfig: n.gridConfig,
      xAxisConfig: t.xAxisConfig,
      yAxisConfig: t.yAxisConfig,
      titleConfig: a.titleConfig,
      lineConfig: o.lineConfig,
      barConfig: l.barConfig,
      pieConfig: C.pieConfig,
      radarAxisConfig: x.radarAxisConfig,
      radarConfig: I.radarConfig,
      gaugeConfig: W.gaugeConfig,
      legendConfig: U.legendConfig
    };
    function d(E, q) {
      if (!S["".concat(E, "Config")]) {
        console.warn("Change default config Error - Invalid key!");
        return;
      }
      (0, F.deepMerge)(S["".concat(E, "Config")], q);
    }
    var T = ["color", "title", "legend", "xAxis", "yAxis", "grid", "radarAxis", "line", "bar", "pie", "radar", "gauge"];
    e.keys = T;
  }(kr)), kr;
}
var ra;
function xs() {
  if (ra)
    return xt;
  ra = 1, Object.defineProperty(xt, "__esModule", {
    value: true
  }), xt.mergeColor = t;
  var e = Ue(), r = Be(), n = ze();
  function t(a) {
    var o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, l = (0, r.deepClone)(e.colorConfig, true), C = o.color, x = o.series;
    if (x || (x = []), C || (C = []), o.color = C = (0, n.deepMerge)(l, C), !!x.length) {
      var I = C.length;
      x.forEach(function(S, d) {
        S.color || (S.color = C[d % I]);
      });
      var W = x.filter(function(S) {
        var d = S.type;
        return d === "pie";
      });
      W.forEach(function(S) {
        return S.data.forEach(function(d, T) {
          return d.color = C[T % I];
        });
      });
      var U = x.filter(function(S) {
        var d = S.type;
        return d === "gauge";
      });
      U.forEach(function(S) {
        return S.data.forEach(function(d, T) {
          return d.color = C[T % I];
        });
      });
      var F = x.filter(function(S) {
        var d = S.type, T = S.independentColor;
        return d === "bar" && T;
      });
      F.forEach(function(S) {
        S.independentColors || (S.independentColors = C);
      });
    }
  }
  return xt;
}
var $t = {};
var tt = {};
var na;
function Xe() {
  if (na)
    return tt;
  na = 1;
  var e = we;
  Object.defineProperty(tt, "__esModule", {
    value: true
  }), tt.doUpdate = W, tt.Updater = void 0;
  var r = e(Te()), n = e(je()), t = e(mt()), a = function U(F, S) {
    (0, t.default)(this, U);
    var d = F.chart, T = F.key, E = F.getGraphConfig;
    if (typeof E != "function") {
      console.warn("Updater need function getGraphConfig!");
      return;
    }
    d[T] || (this.graphs = d[T] = []), Object.assign(this, F), this.update(S);
  };
  tt.Updater = a, a.prototype.update = function(U) {
    var F = this, S = this.graphs, d = this.beforeUpdate;
    if (o(this, U), !!U.length) {
      var T = (0, n.default)(d);
      U.forEach(function(E, q) {
        T === "function" && d(S, E, q, F);
        var N = S[q];
        N ? l(N, E, q, F) : x(S, E, q, F);
      });
    }
  };
  function o(U, F) {
    var S = U.graphs, d = U.chart.render, T = S.length, E = F.length;
    if (T > E) {
      var q = S.splice(E);
      q.forEach(function(N) {
        return N.forEach(function(g) {
          return d.delGraph(g);
        });
      });
    }
  }
  function l(U, F, S, d) {
    var T = d.getGraphConfig, E = d.chart.render, q = d.beforeChange, N = T(F, d);
    C(U, N, E), U.forEach(function(g, _) {
      var f = N[_];
      typeof q == "function" && q(g, f), I(g, f);
    });
  }
  function C(U, F, S) {
    var d = U.length, T = F.length;
    if (T > d) {
      var E = U.slice(-1)[0], q = T - d, N = new Array(q).fill(0).map(function(_) {
        return S.clone(E);
      });
      U.push.apply(U, (0, r.default)(N));
    } else if (T < d) {
      var g = U.splice(T);
      g.forEach(function(_) {
        return S.delGraph(_);
      });
    }
  }
  function x(U, F, S, d) {
    var T = d.getGraphConfig, E = d.getStartGraphConfig, q = d.chart, N = q.render, g = null;
    typeof E == "function" && (g = E(F, d));
    var _ = T(F, d);
    if (_.length) {
      g ? (U[S] = g.map(function(G) {
        return N.add(G);
      }), U[S].forEach(function(G, k) {
        var y = _[k];
        I(G, y);
      })) : U[S] = _.map(function(G) {
        return N.add(G);
      });
      var f = d.afterAddGraph;
      typeof f == "function" && f(U[S]);
    }
  }
  function I(U, F) {
    var S = Object.keys(F);
    S.forEach(function(d) {
      d === "shape" || d === "style" ? U.animation(d, F[d], true) : U[d] = F[d];
    });
  }
  function W() {
    var U = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, F = U.chart, S = U.series, d = U.key, T = U.getGraphConfig, E = U.getStartGraphConfig, q = U.beforeChange, N = U.beforeUpdate, g = U.afterAddGraph;
    F[d] ? F[d].update(S) : F[d] = new a({
      chart: F,
      key: d,
      getGraphConfig: T,
      getStartGraphConfig: E,
      beforeChange: q,
      beforeUpdate: N,
      afterAddGraph: g
    }, S);
  }
  return tt;
}
var aa;
function $s() {
  if (aa)
    return $t;
  aa = 1;
  var e = we;
  Object.defineProperty($t, "__esModule", {
    value: true
  }), $t.title = l;
  var r = e(Fe()), n = Xe(), t = Be(), a = Ue(), o = ze();
  function l(W) {
    var U = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, F = [];
    U.title && (F[0] = (0, o.deepMerge)((0, t.deepClone)(a.titleConfig, true), U.title)), (0, n.doUpdate)({
      chart: W,
      series: F,
      key: "title",
      getGraphConfig: C
    });
  }
  function C(W, U) {
    var F = a.titleConfig.animationCurve, S = a.titleConfig.animationFrame, d = a.titleConfig.rLevel, T = x(W, U), E = I(W);
    return [{
      name: "text",
      index: d,
      visible: W.show,
      animationCurve: F,
      animationFrame: S,
      shape: T,
      style: E
    }];
  }
  function x(W, U) {
    var F = W.offset, S = W.text, d = U.chart.gridArea, T = d.x, E = d.y, q = d.w, N = (0, r.default)(F, 2), g = N[0], _ = N[1];
    return {
      content: S,
      position: [T + q / 2 + g, E + _]
    };
  }
  function I(W) {
    var U = W.style;
    return U;
  }
  return $t;
}
var _t = {};
var ia;
function _s() {
  if (ia)
    return _t;
  ia = 1;
  var e = we;
  Object.defineProperty(_t, "__esModule", {
    value: true
  }), _t.grid = I;
  var r = e(Fe()), n = e(Ve()), t = Xe(), a = Be(), o = Ue(), l = ze();
  function C(d, T) {
    var E = Object.keys(d);
    if (Object.getOwnPropertySymbols) {
      var q = Object.getOwnPropertySymbols(d);
      T && (q = q.filter(function(N) {
        return Object.getOwnPropertyDescriptor(d, N).enumerable;
      })), E.push.apply(E, q);
    }
    return E;
  }
  function x(d) {
    for (var T = 1; T < arguments.length; T++) {
      var E = arguments[T] != null ? arguments[T] : {};
      T % 2 ? C(Object(E), true).forEach(function(q) {
        (0, n.default)(d, q, E[q]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(d, Object.getOwnPropertyDescriptors(E)) : C(Object(E)).forEach(function(q) {
        Object.defineProperty(d, q, Object.getOwnPropertyDescriptor(E, q));
      });
    }
    return d;
  }
  function I(d) {
    var T = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, E = T.grid;
    E = (0, l.deepMerge)((0, a.deepClone)(o.gridConfig, true), E || {}), (0, t.doUpdate)({
      chart: d,
      series: [E],
      key: "grid",
      getGraphConfig: W
    });
  }
  function W(d, T) {
    var E = d.animationCurve, q = d.animationFrame, N = d.rLevel, g = U(d, T), _ = S(d);
    return T.chart.gridArea = x({}, g), [{
      name: "rect",
      index: N,
      animationCurve: E,
      animationFrame: q,
      shape: g,
      style: _
    }];
  }
  function U(d, T) {
    var E = (0, r.default)(T.chart.render.area, 2), q = E[0], N = E[1], g = F(d.left, q), _ = F(d.right, q), f = F(d.top, N), G = F(d.bottom, N), k = q - g - _, y = N - f - G;
    return {
      x: g,
      y: f,
      w: k,
      h: y
    };
  }
  function F(d, T) {
    return typeof d == "number" ? d : typeof d != "string" ? 0 : T * parseInt(d) / 100;
  }
  function S(d) {
    var T = d.style;
    return T;
  }
  return _t;
}
var Pt = {};
var oa;
function Ps() {
  if (oa)
    return Pt;
  oa = 1;
  var e = we;
  Object.defineProperty(Pt, "__esModule", {
    value: true
  }), Pt.axis = d;
  var r = e(je()), n = e(Fe()), t = e(Ve()), a = e(Te()), o = Xe(), l = Ue(), C = ze(), x = Be();
  function I(s, b) {
    var w = Object.keys(s);
    if (Object.getOwnPropertySymbols) {
      var M = Object.getOwnPropertySymbols(s);
      b && (M = M.filter(function(Y) {
        return Object.getOwnPropertyDescriptor(s, Y).enumerable;
      })), w.push.apply(w, M);
    }
    return w;
  }
  function W(s) {
    for (var b = 1; b < arguments.length; b++) {
      var w = arguments[b] != null ? arguments[b] : {};
      b % 2 ? I(Object(w), true).forEach(function(M) {
        (0, t.default)(s, M, w[M]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(s, Object.getOwnPropertyDescriptors(w)) : I(Object(w)).forEach(function(M) {
        Object.defineProperty(s, M, Object.getOwnPropertyDescriptor(w, M));
      });
    }
    return s;
  }
  var U = {
    xAxisConfig: l.xAxisConfig,
    yAxisConfig: l.yAxisConfig
  }, F = Math.abs, S = Math.pow;
  function d(s) {
    var b = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, w = b.xAxis, M = b.yAxis, Y = b.series, re = [];
    w && M && Y && (re = T(w, M), re = E(re), re = re.filter(function(ue) {
      var de = ue.show;
      return de;
    }), re = q(re), re = N(re, Y), re = X(re), re = Z(re, s), re = u(re), re = h2(re), re = P(re, s)), (0, o.doUpdate)({
      chart: s,
      series: re,
      key: "axisLine",
      getGraphConfig: z
    }), (0, o.doUpdate)({
      chart: s,
      series: re,
      key: "axisTick",
      getGraphConfig: ae
    }), (0, o.doUpdate)({
      chart: s,
      series: re,
      key: "axisLabel",
      getGraphConfig: Q
    }), (0, o.doUpdate)({
      chart: s,
      series: re,
      key: "axisName",
      getGraphConfig: A
    }), (0, o.doUpdate)({
      chart: s,
      series: re,
      key: "splitLine",
      getGraphConfig: te
    }), s.axisData = re;
  }
  function T(s, b) {
    var w = [], M = [];
    if (s instanceof Array) {
      var Y;
      (Y = w).push.apply(Y, (0, a.default)(s));
    } else
      w.push(s);
    if (b instanceof Array) {
      var re;
      (re = M).push.apply(re, (0, a.default)(b));
    } else
      M.push(b);
    return w.splice(2), M.splice(2), w = w.map(function(ue, de) {
      return W(W({}, ue), {}, {
        index: de,
        axis: "x"
      });
    }), M = M.map(function(ue, de) {
      return W(W({}, ue), {}, {
        index: de,
        axis: "y"
      });
    }), [].concat((0, a.default)(w), (0, a.default)(M));
  }
  function E(s) {
    var b = s.filter(function(M) {
      var Y = M.axis;
      return Y === "x";
    }), w = s.filter(function(M) {
      var Y = M.axis;
      return Y === "y";
    });
    return b = b.map(function(M) {
      return (0, C.deepMerge)((0, x.deepClone)(l.xAxisConfig), M);
    }), w = w.map(function(M) {
      return (0, C.deepMerge)((0, x.deepClone)(l.yAxisConfig), M);
    }), [].concat((0, a.default)(b), (0, a.default)(w));
  }
  function q(s) {
    var b = s.filter(function(M) {
      var Y = M.data;
      return Y === "value";
    }), w = s.filter(function(M) {
      var Y = M.data;
      return Y !== "value";
    });
    return b.forEach(function(M) {
      typeof M.boundaryGap != "boolean" && (M.boundaryGap = false);
    }), w.forEach(function(M) {
      typeof M.boundaryGap != "boolean" && (M.boundaryGap = true);
    }), [].concat((0, a.default)(b), (0, a.default)(w));
  }
  function N(s, b) {
    var w = s.filter(function(Y) {
      var re = Y.data;
      return re === "value";
    }), M = s.filter(function(Y) {
      var re = Y.data;
      return re instanceof Array;
    });
    return w = g(w, b), M = v(M), [].concat((0, a.default)(w), (0, a.default)(M));
  }
  function g(s, b) {
    return s.map(function(w) {
      var M = _(w, b), Y = k(w, M), re = (0, n.default)(Y, 2), ue = re[0], de = re[1], he = V(ue, de, w), pe = w.axisLabel.formatter, ge = [];
      return ue < 0 && de > 0 ? ge = c(ue, de, he) : ge = R(ue, de, he), ge = ge.map(function(ye) {
        return parseFloat(ye.toFixed(2));
      }), W(W({}, w), {}, {
        maxValue: ge.slice(-1)[0],
        minValue: ge[0],
        label: L(ge, pe)
      });
    });
  }
  function _(s, b) {
    if (b = b.filter(function(ue) {
      var de = ue.show, he = ue.type;
      return !(de === false || he === "pie");
    }), b.length === 0)
      return [0, 0];
    var w = s.index, M = s.axis;
    b = G(b);
    var Y = M + "Axis", re = b.filter(function(ue) {
      return ue[Y] === w;
    });
    return re.length || (re = b), f(re);
  }
  function f(s) {
    if (s) {
      var b = Math.min.apply(Math, (0, a.default)(s.map(function(M) {
        var Y = M.data;
        return Math.min.apply(Math, (0, a.default)((0, C.filterNonNumber)(Y)));
      }))), w = Math.max.apply(Math, (0, a.default)(s.map(function(M) {
        var Y = M.data;
        return Math.max.apply(Math, (0, a.default)((0, C.filterNonNumber)(Y)));
      })));
      return [b, w];
    }
  }
  function G(s) {
    var b = (0, x.deepClone)(s, true);
    return s.forEach(function(w, M) {
      var Y = (0, C.mergeSameStackData)(w, s);
      b[M].data = Y;
    }), b;
  }
  function k(s, b) {
    var w = s.min, M = s.max, Y = s.axis, re = (0, n.default)(b, 2), ue = re[0], de = re[1], he = (0, r.default)(w), pe = (0, r.default)(M);
    if ($(w) || (w = U[Y + "AxisConfig"].min, he = "string"), $(M) || (M = U[Y + "AxisConfig"].max, pe = "string"), he === "string") {
      w = parseInt(ue - F(ue * parseFloat(w) / 100));
      var ge = y(w);
      w = parseFloat((w / ge - 0.1).toFixed(1)) * ge;
    }
    if (pe === "string") {
      M = parseInt(de + F(de * parseFloat(M) / 100));
      var ye = y(M);
      M = parseFloat((M / ye + 0.1).toFixed(1)) * ye;
    }
    return [w, M];
  }
  function y(s) {
    var b = F(s).toString(), w = b.length, M = b.replace(/0*$/g, "").indexOf("0"), Y = w - 1;
    return M !== -1 && (Y -= M), S(10, Y);
  }
  function $(s) {
    var b = (0, r.default)(s), w = b === "string" && /^\d+%$/.test(s), M = b === "number";
    return w || M;
  }
  function c(s, b, w) {
    var M = [], Y = [], re = 0, ue = 0;
    do
      M.push(re -= w);
    while (re > s);
    do
      Y.push(ue += w);
    while (ue < b);
    return [].concat((0, a.default)(M.reverse()), [0], (0, a.default)(Y));
  }
  function R(s, b, w) {
    var M = [s], Y = s;
    do
      M.push(Y += w);
    while (Y < b);
    return M;
  }
  function L(s, b) {
    return b && (typeof b == "string" && (s = s.map(function(w) {
      return b.replace("{value}", w);
    })), typeof b == "function" && (s = s.map(function(w, M) {
      return b({
        value: w,
        index: M
      });
    }))), s;
  }
  function v(s) {
    return s.map(function(b) {
      var w = b.data, M = b.axisLabel.formatter;
      return W(W({}, b), {}, {
        label: L(w, M)
      });
    });
  }
  function V(s, b, w) {
    var M = w.interval, Y = w.minInterval, re = w.maxInterval, ue = w.splitNumber, de = w.axis, he = U[de + "AxisConfig"];
    if (typeof M != "number" && (M = he.interval), typeof Y != "number" && (Y = he.minInterval), typeof re != "number" && (re = he.maxInterval), typeof ue != "number" && (ue = he.splitNumber), typeof M == "number")
      return M;
    var pe = parseInt((b - s) / (ue - 1));
    return pe.toString().length > 1 && (pe = parseInt(pe.toString().replace(/\d$/, "0"))), pe === 0 && (pe = 1), typeof Y == "number" && pe < Y ? Y : typeof re == "number" && pe > re ? re : pe;
  }
  function X(s) {
    var b = s.filter(function(M) {
      var Y = M.axis;
      return Y === "x";
    }), w = s.filter(function(M) {
      var Y = M.axis;
      return Y === "y";
    });
    return b[0] && !b[0].position && (b[0].position = l.xAxisConfig.position), b[1] && !b[1].position && (b[1].position = b[0].position === "bottom" ? "top" : "bottom"), w[0] && !w[0].position && (w[0].position = l.yAxisConfig.position), w[1] && !w[1].position && (w[1].position = w[0].position === "left" ? "right" : "left"), [].concat((0, a.default)(b), (0, a.default)(w));
  }
  function Z(s, b) {
    var w = b.gridArea, M = w.x, Y = w.y, re = w.w, ue = w.h;
    return s = s.map(function(de) {
      var he = de.position, pe = [];
      return he === "left" ? pe = [[M, Y], [M, Y + ue]].reverse() : he === "right" ? pe = [[M + re, Y], [M + re, Y + ue]].reverse() : he === "top" ? pe = [[M, Y], [M + re, Y]] : he === "bottom" && (pe = [[M, Y + ue], [M + re, Y + ue]]), W(W({}, de), {}, {
        linePosition: pe
      });
    }), s;
  }
  function u(s, b) {
    return s.map(function(w) {
      var M = w.axis, Y = w.linePosition, re = w.position, ue = w.label, de = w.boundaryGap;
      typeof de != "boolean" && (de = U[M + "AxisConfig"].boundaryGap);
      var he = ue.length, pe = (0, n.default)(Y, 2), ge = (0, n.default)(pe[0], 2), ye = ge[0], Oe = ge[1], Qe = (0, n.default)(pe[1], 2), Je = Qe[0], Ye = Qe[1], Da = M === "x" ? Je - ye : Ye - Oe, bt = Da / (de ? he : he - 1), cn = new Array(he).fill(0).map(function(Of, Ct) {
        return M === "x" ? [ye + bt * (de ? Ct + 0.5 : Ct), Oe] : [ye, Oe + bt * (de ? Ct + 0.5 : Ct)];
      }), Ta = m(M, de, re, cn, bt);
      return W(W({}, w), {}, {
        tickPosition: cn,
        tickLinePosition: Ta,
        tickGap: bt
      });
    });
  }
  function m(s, b, w, M, Y) {
    var re = s === "x" ? 1 : 0, ue = 5;
    s === "x" && w === "top" && (ue = -5), s === "y" && w === "left" && (ue = -5);
    var de = M.map(function(he) {
      var pe = (0, x.deepClone)(he);
      return pe[re] += ue, [(0, x.deepClone)(he), pe];
    });
    return b && (re = s === "x" ? 0 : 1, ue = Y / 2, de.forEach(function(he) {
      var pe = (0, n.default)(he, 2), ge = pe[0], ye = pe[1];
      ge[re] += ue, ye[re] += ue;
    })), de;
  }
  function h2(s, b) {
    return s.map(function(w) {
      var M = w.nameGap, Y = w.nameLocation, re = w.position, ue = w.linePosition, de = (0, n.default)(ue, 2), he = de[0], pe = de[1], ge = (0, a.default)(he);
      Y === "end" && (ge = (0, a.default)(pe)), Y === "center" && (ge[0] = (he[0] + pe[0]) / 2, ge[1] = (he[1] + pe[1]) / 2);
      var ye = 0;
      re === "top" && Y === "center" && (ye = 1), re === "bottom" && Y === "center" && (ye = 1), re === "left" && Y !== "center" && (ye = 1), re === "right" && Y !== "center" && (ye = 1);
      var Oe = M;
      return re === "top" && Y !== "end" && (Oe *= -1), re === "left" && Y !== "start" && (Oe *= -1), re === "bottom" && Y === "start" && (Oe *= -1), re === "right" && Y === "end" && (Oe *= -1), ge[ye] += Oe, W(W({}, w), {}, {
        namePosition: ge
      });
    });
  }
  function P(s, b) {
    var w = b.gridArea, M = w.w, Y = w.h;
    return s.map(function(re) {
      var ue = re.tickLinePosition, de = re.position, he = re.boundaryGap, pe = 0, ge = M;
      (de === "top" || de === "bottom") && (pe = 1), (de === "top" || de === "bottom") && (ge = Y), (de === "right" || de === "bottom") && (ge *= -1);
      var ye = ue.map(function(Oe) {
        var Qe = (0, n.default)(Oe, 1), Je = Qe[0], Ye = (0, a.default)(Je);
        return Ye[pe] += ge, [(0, a.default)(Je), Ye];
      });
      return he || ye.shift(), W(W({}, re), {}, {
        splitLinePosition: ye
      });
    });
  }
  function z(s) {
    var b = s.animationCurve, w = s.animationFrame, M = s.rLevel;
    return [{
      name: "polyline",
      index: M,
      visible: s.axisLine.show,
      animationCurve: b,
      animationFrame: w,
      shape: K(s),
      style: ee(s)
    }];
  }
  function K(s) {
    var b = s.linePosition;
    return {
      points: b
    };
  }
  function ee(s) {
    return s.axisLine.style;
  }
  function ae(s) {
    var b = s.animationCurve, w = s.animationFrame, M = s.rLevel, Y = le(s), re = ve(s);
    return Y.map(function(ue) {
      return {
        name: "polyline",
        index: M,
        visible: s.axisTick.show,
        animationCurve: b,
        animationFrame: w,
        shape: ue,
        style: re
      };
    });
  }
  function le(s) {
    var b = s.tickLinePosition;
    return b.map(function(w) {
      return {
        points: w
      };
    });
  }
  function ve(s) {
    return s.axisTick.style;
  }
  function Q(s) {
    var b = s.animationCurve, w = s.animationFrame, M = s.rLevel, Y = ie(s), re = fe(s, Y);
    return Y.map(function(ue, de) {
      return {
        name: "text",
        index: M,
        visible: s.axisLabel.show,
        animationCurve: b,
        animationFrame: w,
        shape: ue,
        style: re[de],
        setGraphCenter: function() {
        }
      };
    });
  }
  function ie(s) {
    var b = s.label, w = s.tickPosition, M = s.position;
    return w.map(function(Y, re) {
      return {
        position: ce(Y, M),
        content: b[re].toString()
      };
    });
  }
  function ce(s, b) {
    var w = 0, M = 10;
    return (b === "top" || b === "bottom") && (w = 1), (b === "top" || b === "left") && (M = -10), s = (0, x.deepClone)(s), s[w] += M, s;
  }
  function fe(s, b) {
    var w = s.position, M = s.axisLabel.style, Y = B(w);
    M = (0, C.deepMerge)(Y, M);
    var re = b.map(function(ue) {
      var de = ue.position;
      return W(W({}, M), {}, {
        graphCenter: de
      });
    });
    return re;
  }
  function B(s) {
    if (s === "left")
      return {
        textAlign: "right",
        textBaseline: "middle"
      };
    if (s === "right")
      return {
        textAlign: "left",
        textBaseline: "middle"
      };
    if (s === "top")
      return {
        textAlign: "center",
        textBaseline: "bottom"
      };
    if (s === "bottom")
      return {
        textAlign: "center",
        textBaseline: "top"
      };
  }
  function A(s) {
    var b = s.animationCurve, w = s.animationFrame, M = s.rLevel;
    return [{
      name: "text",
      index: M,
      animationCurve: b,
      animationFrame: w,
      shape: O(s),
      style: D(s)
    }];
  }
  function O(s) {
    var b = s.name, w = s.namePosition;
    return {
      content: b,
      position: w
    };
  }
  function D(s) {
    var b = s.nameLocation, w = s.position, M = s.nameTextStyle, Y = H(w, b);
    return (0, C.deepMerge)(Y, M);
  }
  function H(s, b) {
    if (s === "top" && b === "start" || s === "bottom" && b === "start" || s === "left" && b === "center")
      return {
        textAlign: "right",
        textBaseline: "middle"
      };
    if (s === "top" && b === "end" || s === "bottom" && b === "end" || s === "right" && b === "center")
      return {
        textAlign: "left",
        textBaseline: "middle"
      };
    if (s === "top" && b === "center" || s === "left" && b === "end" || s === "right" && b === "end")
      return {
        textAlign: "center",
        textBaseline: "bottom"
      };
    if (s === "bottom" && b === "center" || s === "left" && b === "start" || s === "right" && b === "start")
      return {
        textAlign: "center",
        textBaseline: "top"
      };
  }
  function te(s) {
    var b = s.animationCurve, w = s.animationFrame, M = s.rLevel, Y = p(s), re = j(s);
    return Y.map(function(ue) {
      return {
        name: "polyline",
        index: M,
        visible: s.splitLine.show,
        animationCurve: b,
        animationFrame: w,
        shape: ue,
        style: re
      };
    });
  }
  function p(s) {
    var b = s.splitLinePosition;
    return b.map(function(w) {
      return {
        points: w
      };
    });
  }
  function j(s) {
    return s.splitLine.style;
  }
  return Pt;
}
var wt = {};
var la;
function ws() {
  if (la)
    return wt;
  la = 1;
  var e = we;
  Object.defineProperty(wt, "__esModule", {
    value: true
  }), wt.line = S;
  var r = e(je()), n = e(Fe()), t = e(Te()), a = e(Ve()), o = Xe(), l = Ue(), C = e(sn()), x = ze();
  function I(Q, ie) {
    var ce = Object.keys(Q);
    if (Object.getOwnPropertySymbols) {
      var fe = Object.getOwnPropertySymbols(Q);
      ie && (fe = fe.filter(function(B) {
        return Object.getOwnPropertyDescriptor(Q, B).enumerable;
      })), ce.push.apply(ce, fe);
    }
    return ce;
  }
  function W(Q) {
    for (var ie = 1; ie < arguments.length; ie++) {
      var ce = arguments[ie] != null ? arguments[ie] : {};
      ie % 2 ? I(Object(ce), true).forEach(function(fe) {
        (0, a.default)(Q, fe, ce[fe]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(Q, Object.getOwnPropertyDescriptors(ce)) : I(Object(ce)).forEach(function(fe) {
        Object.defineProperty(Q, fe, Object.getOwnPropertyDescriptor(ce, fe));
      });
    }
    return Q;
  }
  var U = C.default.polylineToBezierCurve, F = C.default.getBezierCurveLength;
  function S(Q) {
    var ie = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, ce = ie.xAxis, fe = ie.yAxis, B = ie.series, A = [];
    ce && fe && B && (A = (0, x.initNeedSeries)(B, l.lineConfig, "line"), A = d(A, Q)), (0, o.doUpdate)({
      chart: Q,
      series: A,
      key: "lineArea",
      getGraphConfig: g,
      getStartGraphConfig: y,
      beforeUpdate: $,
      beforeChange: c
    }), (0, o.doUpdate)({
      chart: Q,
      series: A,
      key: "line",
      getGraphConfig: R,
      getStartGraphConfig: X,
      beforeUpdate: $,
      beforeChange: c
    }), (0, o.doUpdate)({
      chart: Q,
      series: A,
      key: "linePoint",
      getGraphConfig: Z,
      getStartGraphConfig: h2
    }), (0, o.doUpdate)({
      chart: Q,
      series: A,
      key: "lineLabel",
      getGraphConfig: P
    });
  }
  function d(Q, ie) {
    var ce = ie.axisData;
    return Q.map(function(fe) {
      var B = (0, x.mergeSameStackData)(fe, Q);
      B = T(fe, B);
      var A = E(fe, ce), O = q(B, A), D = N(A);
      return W(W({}, fe), {}, {
        linePosition: O.filter(function(H) {
          return H;
        }),
        lineFillBottomPos: D
      });
    });
  }
  function T(Q, ie) {
    var ce = Q.data;
    return ie.map(function(fe, B) {
      return typeof ce[B] == "number" ? fe : null;
    });
  }
  function E(Q, ie) {
    var ce = Q.xAxisIndex, fe = Q.yAxisIndex, B = ie.find(function(O) {
      var D = O.axis, H = O.index;
      return D === "x" && H === ce;
    }), A = ie.find(function(O) {
      var D = O.axis, H = O.index;
      return D === "y" && H === fe;
    });
    return [B, A];
  }
  function q(Q, ie) {
    var ce = ie.findIndex(function(re) {
      var ue = re.data;
      return ue === "value";
    }), fe = ie[ce], B = ie[1 - ce], A = fe.linePosition, O = fe.axis, D = B.tickPosition, H = D.length, te = O === "x" ? 0 : 1, p = A[0][te], j = A[1][te], s = j - p, b = fe.maxValue, w = fe.minValue, M = b - w, Y = new Array(H).fill(0).map(function(re, ue) {
      var de = Q[ue];
      if (typeof de != "number")
        return null;
      var he = (de - w) / M;
      return M === 0 && (he = 0), he * s + p;
    });
    return Y.map(function(re, ue) {
      if (ue >= H || typeof re != "number")
        return null;
      var de = [re, D[ue][1 - te]];
      return te === 0 || de.reverse(), de;
    });
  }
  function N(Q) {
    var ie = Q.find(function(j) {
      var s = j.data;
      return s === "value";
    }), ce = ie.axis, fe = ie.linePosition, B = ie.minValue, A = ie.maxValue, O = ce === "x" ? 0 : 1, D = fe[0][O];
    if (B < 0 && A > 0) {
      var H = A - B, te = Math.abs(fe[0][O] - fe[1][O]), p = Math.abs(B) / H * te;
      ce === "y" && (p *= -1), D += p;
    }
    return {
      changeIndex: O,
      changeValue: D
    };
  }
  function g(Q) {
    var ie = Q.animationCurve, ce = Q.animationFrame, fe = Q.lineFillBottomPos, B = Q.rLevel;
    return [{
      name: L(Q),
      index: B,
      animationCurve: ie,
      animationFrame: ce,
      visible: Q.lineArea.show,
      lineFillBottomPos: fe,
      shape: _(Q),
      style: f(Q),
      drawed: k
    }];
  }
  function _(Q) {
    var ie = Q.linePosition;
    return {
      points: ie
    };
  }
  function f(Q) {
    var ie = Q.lineArea, ce = Q.color, fe = ie.gradient, B = ie.style, A = [B.fill || ce], O = (0, x.deepMerge)(A, fe);
    O.length === 1 && O.push(O[0]);
    var D = G(Q);
    return B = W(W({}, B), {}, {
      stroke: "rgba(0, 0, 0, 0)"
    }), (0, x.deepMerge)({
      gradientColor: O,
      gradientParams: D,
      gradientType: "linear",
      gradientWith: "fill"
    }, B);
  }
  function G(Q) {
    var ie = Q.lineFillBottomPos, ce = Q.linePosition, fe = ie.changeIndex, B = ie.changeValue, A = ce.map(function(te) {
      return te[fe];
    }), O = Math.max.apply(Math, (0, t.default)(A)), D = Math.min.apply(Math, (0, t.default)(A)), H = O;
    return fe === 1 && (H = D), fe === 1 ? [0, H, 0, B] : [H, 0, B, 0];
  }
  function k(Q, ie) {
    var ce = Q.lineFillBottomPos, fe = Q.shape, B = ie.ctx, A = fe.points, O = ce.changeIndex, D = ce.changeValue, H = (0, t.default)(A[A.length - 1]), te = (0, t.default)(A[0]);
    H[O] = D, te[O] = D, B.lineTo.apply(B, (0, t.default)(H)), B.lineTo.apply(B, (0, t.default)(te)), B.closePath(), B.fill();
  }
  function y(Q) {
    var ie = g(Q)[0], ce = W({}, ie.style);
    return ce.opacity = 0, ie.style = ce, [ie];
  }
  function $(Q, ie, ce, fe) {
    var B = Q[ce];
    if (B) {
      var A = L(ie), O = fe.chart.render, D = B[0].name, H = A !== D;
      H && (B.forEach(function(te) {
        return O.delGraph(te);
      }), Q[ce] = null);
    }
  }
  function c(Q, ie) {
    var ce = ie.shape.points, fe = Q.shape.points, B = fe.length, A = ce.length;
    if (A > B) {
      var O = fe.slice(-1)[0], D = new Array(A - B).fill(0).map(function(H) {
        return (0, t.default)(O);
      });
      fe.push.apply(fe, (0, t.default)(D));
    } else
      A < B && fe.splice(A);
  }
  function R(Q) {
    var ie = Q.animationCurve, ce = Q.animationFrame, fe = Q.rLevel;
    return [{
      name: L(Q),
      index: fe + 1,
      animationCurve: ie,
      animationFrame: ce,
      shape: _(Q),
      style: v(Q)
    }];
  }
  function L(Q) {
    var ie = Q.smooth;
    return ie ? "smoothline" : "polyline";
  }
  function v(Q) {
    var ie = Q.lineStyle, ce = Q.color, fe = Q.smooth, B = Q.linePosition, A = V(B, fe);
    return (0, x.deepMerge)({
      stroke: ce,
      lineDash: [A, 0]
    }, ie);
  }
  function V(Q) {
    var ie = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (!ie)
      return (0, x.getPolylineLength)(Q);
    var ce = U(Q);
    return F(ce);
  }
  function X(Q) {
    var ie = Q.lineStyle.lineDash, ce = R(Q)[0], fe = ce.style.lineDash;
    return ie ? fe = [0, 0] : fe = (0, t.default)(fe).reverse(), ce.style.lineDash = fe, [ce];
  }
  function Z(Q) {
    var ie = Q.animationCurve, ce = Q.animationFrame, fe = Q.rLevel, B = u(Q), A = m(Q);
    return B.map(function(O) {
      return {
        name: "circle",
        index: fe + 2,
        visible: Q.linePoint.show,
        animationCurve: ie,
        animationFrame: ce,
        shape: O,
        style: A
      };
    });
  }
  function u(Q) {
    var ie = Q.linePosition, ce = Q.linePoint.radius;
    return ie.map(function(fe) {
      var B = (0, n.default)(fe, 2), A = B[0], O = B[1];
      return {
        r: ce,
        rx: A,
        ry: O
      };
    });
  }
  function m(Q) {
    var ie = Q.color, ce = Q.linePoint.style;
    return (0, x.deepMerge)({
      stroke: ie
    }, ce);
  }
  function h2(Q) {
    var ie = Z(Q);
    return ie.forEach(function(ce) {
      ce.shape.r = 0.1;
    }), ie;
  }
  function P(Q) {
    var ie = Q.animationCurve, ce = Q.animationFrame, fe = Q.rLevel, B = z(Q), A = ve(Q);
    return B.map(function(O, D) {
      return {
        name: "text",
        index: fe + 3,
        visible: Q.label.show,
        animationCurve: ie,
        animationFrame: ce,
        shape: O,
        style: A
      };
    });
  }
  function z(Q) {
    var ie = le(Q), ce = K(Q);
    return ie.map(function(fe, B) {
      return {
        content: fe,
        position: ce[B]
      };
    });
  }
  function K(Q) {
    var ie = Q.linePosition, ce = Q.lineFillBottomPos, fe = Q.label, B = fe.position, A = fe.offset, O = ce.changeIndex, D = ce.changeValue;
    return ie.map(function(H) {
      if (B === "bottom" && (H = (0, t.default)(H), H[O] = D), B === "center") {
        var te = (0, t.default)(H);
        te[O] = D, H = ae(H, te);
      }
      return ee(H, A);
    });
  }
  function ee(Q, ie) {
    var ce = (0, n.default)(Q, 2), fe = ce[0], B = ce[1], A = (0, n.default)(ie, 2), O = A[0], D = A[1];
    return [fe + O, B + D];
  }
  function ae(Q, ie) {
    var ce = (0, n.default)(Q, 2), fe = ce[0], B = ce[1], A = (0, n.default)(ie, 2), O = A[0], D = A[1];
    return [(fe + O) / 2, (B + D) / 2];
  }
  function le(Q) {
    var ie = Q.data, ce = Q.label.formatter;
    if (ie = ie.filter(function(B) {
      return typeof B == "number";
    }).map(function(B) {
      return B.toString();
    }), !ce)
      return ie;
    var fe = (0, r.default)(ce);
    return fe === "string" ? ie.map(function(B) {
      return ce.replace("{value}", B);
    }) : fe === "function" ? ie.map(function(B, A) {
      return ce({
        value: B,
        index: A
      });
    }) : ie;
  }
  function ve(Q) {
    var ie = Q.color, ce = Q.label.style;
    return (0, x.deepMerge)({
      fill: ie
    }, ce);
  }
  return wt;
}
var kt = {};
var sa;
function ks() {
  if (sa)
    return kt;
  sa = 1;
  var e = we;
  Object.defineProperty(kt, "__esModule", {
    value: true
  }), kt.bar = U;
  var r = e(je()), n = e(Ve()), t = e(Fe()), a = e(Te()), o = Xe(), l = Ue(), C = Be(), x = ze();
  function I(p, j) {
    var s = Object.keys(p);
    if (Object.getOwnPropertySymbols) {
      var b = Object.getOwnPropertySymbols(p);
      j && (b = b.filter(function(w) {
        return Object.getOwnPropertyDescriptor(p, w).enumerable;
      })), s.push.apply(s, b);
    }
    return s;
  }
  function W(p) {
    for (var j = 1; j < arguments.length; j++) {
      var s = arguments[j] != null ? arguments[j] : {};
      j % 2 ? I(Object(s), true).forEach(function(b) {
        (0, n.default)(p, b, s[b]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(p, Object.getOwnPropertyDescriptors(s)) : I(Object(s)).forEach(function(b) {
        Object.defineProperty(p, b, Object.getOwnPropertyDescriptor(s, b));
      });
    }
    return p;
  }
  function U(p) {
    var j = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, s = j.xAxis, b = j.yAxis, w = j.series, M = [];
    s && b && w && (M = (0, x.initNeedSeries)(w, l.barConfig, "bar"), M = F(M, p), M = S(M), M = k(M)), (0, o.doUpdate)({
      chart: p,
      series: M.slice(-1),
      key: "backgroundBar",
      getGraphConfig: V
    }), M.reverse(), (0, o.doUpdate)({
      chart: p,
      series: M,
      key: "bar",
      getGraphConfig: m,
      getStartGraphConfig: ve,
      beforeUpdate: fe
    }), (0, o.doUpdate)({
      chart: p,
      series: M,
      key: "barLabel",
      getGraphConfig: B
    });
  }
  function F(p, j) {
    var s = j.axisData;
    return p.forEach(function(b) {
      var w = b.xAxisIndex, M = b.yAxisIndex;
      typeof w != "number" && (w = 0), typeof M != "number" && (M = 0);
      var Y = s.find(function(he) {
        var pe = he.axis, ge = he.index;
        return "".concat(pe).concat(ge) === "x".concat(w);
      }), re = s.find(function(he) {
        var pe = he.axis, ge = he.index;
        return "".concat(pe).concat(ge) === "y".concat(M);
      }), ue = [Y, re], de = ue.findIndex(function(he) {
        var pe = he.data;
        return pe === "value";
      });
      b.valueAxis = ue[de], b.labelAxis = ue[1 - de];
    }), p;
  }
  function S(p, j) {
    var s = T(p);
    return s.forEach(function(b) {
      d(b), q(b), N(b), g(b), G(b);
    }), p;
  }
  function d(p) {
    var j = E(p);
    j = j.map(function(b) {
      return {
        stack: b,
        index: -1
      };
    });
    var s = 0;
    p.forEach(function(b) {
      var w = b.stack;
      if (!w)
        b.barIndex = s, s++;
      else {
        var M = j.find(function(Y) {
          var re = Y.stack;
          return re === w;
        });
        M.index === -1 && (M.index = s, s++), b.barIndex = M.index;
      }
    });
  }
  function T(p) {
    var j = p.map(function(s) {
      var b = s.labelAxis, w = b.axis, M = b.index;
      return w + M;
    });
    return j = (0, a.default)(new Set(j)), j.map(function(s) {
      return p.filter(function(b) {
        var w = b.labelAxis, M = w.axis, Y = w.index;
        return M + Y === s;
      });
    });
  }
  function E(p) {
    var j = [];
    return p.forEach(function(s) {
      var b = s.stack;
      b && j.push(b);
    }), (0, a.default)(new Set(j));
  }
  function q(p) {
    var j = (0, a.default)(new Set(p.map(function(s) {
      var b = s.barIndex;
      return b;
    }))).length;
    p.forEach(function(s) {
      return s.barNum = j;
    });
  }
  function N(p) {
    var j = p.slice(-1)[0], s = j.barCategoryGap, b = j.labelAxis.tickGap, w = 0;
    typeof s == "number" ? w = s : w = (1 - parseInt(s) / 100) * b, p.forEach(function(M) {
      return M.barCategoryWidth = w;
    });
  }
  function g(p) {
    var j = p.slice(-1)[0], s = j.barCategoryWidth, b = j.barWidth, w = j.barGap, M = j.barNum, Y = [];
    typeof b == "number" || b !== "auto" ? Y = _(s, b, w) : b === "auto" && (Y = f(s, b, w, M));
    var re = Y, ue = (0, t.default)(re, 2), de = ue[0], he = ue[1];
    p.forEach(function(pe) {
      pe.barWidth = de, pe.barGap = he;
    });
  }
  function _(p, j, s) {
    var b = 0, w = 0;
    return typeof j == "number" ? b = j : b = parseInt(j) / 100 * p, typeof s == "number" ? w = s : w = parseInt(s) / 100 * b, [b, w];
  }
  function f(p, j, s, b) {
    var w = 0, M = 0, Y = p / b;
    if (typeof s == "number")
      M = s, w = Y - M;
    else {
      var re = 10 + parseInt(s) / 10;
      re === 0 ? (w = Y * 2, M = -w) : (w = Y / re * 10, M = Y - w);
    }
    return [w, M];
  }
  function G(p) {
    var j = p.slice(-1)[0], s = j.barGap, b = j.barWidth, w = j.barNum, M = (s + b) * w - s;
    p.forEach(function(Y) {
      return Y.barAllWidthAndGap = M;
    });
  }
  function k(p, j) {
    return p = $(p), p = y(p), p = R(p), p = L(p), p;
  }
  function y(p) {
    return p.map(function(j) {
      var s = j.labelAxis, b = j.barAllWidthAndGap, w = j.barGap, M = j.barWidth, Y = j.barIndex, re = s.tickGap, ue = s.tickPosition, de = s.axis, he = de === "x" ? 0 : 1, pe = ue.map(function(ge, ye) {
        var Oe = ue[ye][he] - re / 2, Qe = Oe + (re - b) / 2;
        return Qe + (Y + 0.5) * M + Y * w;
      });
      return W(W({}, j), {}, {
        barLabelAxisPos: pe
      });
    });
  }
  function $(p) {
    return p.map(function(j) {
      var s = (0, x.mergeSameStackData)(j, p);
      s = c(j, s);
      var b = j.valueAxis, w = b.axis, M = b.minValue, Y = b.maxValue, re = b.linePosition, ue = v(M, Y, M < 0 ? 0 : M, re, w), de = s.map(function(pe) {
        return v(M, Y, pe, re, w);
      }), he = de.map(function(pe) {
        return [ue, pe];
      });
      return W(W({}, j), {}, {
        barValueAxisPos: he
      });
    });
  }
  function c(p, j) {
    var s = p.data;
    return j.map(function(b, w) {
      return typeof s[w] == "number" ? b : null;
    }).filter(function(b) {
      return b !== null;
    });
  }
  function R(p) {
    return p.map(function(j) {
      var s = j.barLabelAxisPos, b = j.data;
      return b.forEach(function(w, M) {
        typeof w != "number" && (s[M] = null);
      }), W(W({}, j), {}, {
        barLabelAxisPos: s.filter(function(w) {
          return w !== null;
        })
      });
    });
  }
  function L(p) {
    return p.forEach(function(j) {
      var s = j.data, b = j.barLabelAxisPos, w = j.barValueAxisPos, M = s.filter(function(re) {
        return typeof re == "number";
      }).length, Y = b.length;
      Y > M && (b.splice(M), w.splice(M));
    }), p;
  }
  function v(p, j, s, b, w) {
    if (typeof s != "number")
      return null;
    var M = j - p, Y = w === "x" ? 0 : 1, re = b[1][Y] - b[0][Y], ue = (s - p) / M;
    M === 0 && (ue = 0);
    var de = ue * re;
    return de + b[0][Y];
  }
  function V(p) {
    var j = p.animationCurve, s = p.animationFrame, b = p.rLevel, w = X(p), M = u(p);
    return w.map(function(Y) {
      return {
        name: "rect",
        index: b,
        visible: p.backgroundBar.show,
        animationCurve: j,
        animationFrame: s,
        shape: Y,
        style: M
      };
    });
  }
  function X(p) {
    var j = p.labelAxis, s = p.valueAxis, b = j.tickPosition, w = s.axis, M = s.linePosition, Y = Z(p), re = Y / 2, ue = w === "x" ? 0 : 1, de = b.map(function(ye) {
      return ye[1 - ue];
    }), he = [M[0][ue], M[1][ue]], pe = he[0], ge = he[1];
    return de.map(function(ye) {
      return w === "x" ? {
        x: pe,
        y: ye - re,
        w: ge - pe,
        h: Y
      } : {
        x: ye - re,
        y: ge,
        w: Y,
        h: pe - ge
      };
    });
  }
  function Z(p) {
    var j = p.barAllWidthAndGap, s = p.barCategoryWidth, b = p.backgroundBar, w = b.width;
    return typeof w == "number" ? w : w === "auto" ? j : parseInt(w) / 100 * s;
  }
  function u(p) {
    return p.backgroundBar.style;
  }
  function m(p) {
    var j = p.barLabelAxisPos, s = p.animationCurve, b = p.animationFrame, w = p.rLevel, M = h2(p);
    return j.map(function(Y, re) {
      return {
        name: M,
        index: w,
        animationCurve: s,
        animationFrame: b,
        shape: P(p, re),
        style: ae(p, re)
      };
    });
  }
  function h2(p) {
    var j = p.shapeType;
    return j === "leftEchelon" || j === "rightEchelon" ? "polyline" : "rect";
  }
  function P(p, j) {
    var s = p.shapeType;
    return s === "leftEchelon" ? z(p, j) : s === "rightEchelon" ? K(p, j) : ee(p, j);
  }
  function z(p, j) {
    var s = p.barValueAxisPos, b = p.barLabelAxisPos, w = p.barWidth, M = p.echelonOffset, Y = (0, t.default)(s[j], 2), re = Y[0], ue = Y[1], de = b[j], he = w / 2, pe = p.valueAxis.axis, ge = [];
    return pe === "x" ? (ge[0] = [ue, de - he], ge[1] = [ue, de + he], ge[2] = [re, de + he], ge[3] = [re + M, de - he], ue - re < M && ge.splice(3, 1)) : (ge[0] = [de - he, ue], ge[1] = [de + he, ue], ge[2] = [de + he, re], ge[3] = [de - he, re - M], re - ue < M && ge.splice(3, 1)), {
      points: ge,
      close: true
    };
  }
  function K(p, j) {
    var s = p.barValueAxisPos, b = p.barLabelAxisPos, w = p.barWidth, M = p.echelonOffset, Y = (0, t.default)(s[j], 2), re = Y[0], ue = Y[1], de = b[j], he = w / 2, pe = p.valueAxis.axis, ge = [];
    return pe === "x" ? (ge[0] = [ue, de + he], ge[1] = [ue, de - he], ge[2] = [re, de - he], ge[3] = [re + M, de + he], ue - re < M && ge.splice(2, 1)) : (ge[0] = [de + he, ue], ge[1] = [de - he, ue], ge[2] = [de - he, re], ge[3] = [de + he, re - M], re - ue < M && ge.splice(2, 1)), {
      points: ge,
      close: true
    };
  }
  function ee(p, j) {
    var s = p.barValueAxisPos, b = p.barLabelAxisPos, w = p.barWidth, M = (0, t.default)(s[j], 2), Y = M[0], re = M[1], ue = b[j], de = p.valueAxis.axis, he = {};
    return de === "x" ? (he.x = Y, he.y = ue - w / 2, he.w = re - Y, he.h = w) : (he.x = ue - w / 2, he.y = re, he.w = w, he.h = Y - re), he;
  }
  function ae(p, j) {
    var s = p.barStyle, b = p.gradient, w = p.color, M = p.independentColor, Y = p.independentColors, re = [s.fill || w], ue = (0, x.deepMerge)(re, b.color);
    if (M) {
      var de = Y[j % Y.length];
      ue = de instanceof Array ? de : [de];
    }
    ue.length === 1 && ue.push(ue[0]);
    var he = le(p, j);
    return (0, x.deepMerge)({
      gradientColor: ue,
      gradientParams: he,
      gradientType: "linear",
      gradientWith: "fill"
    }, s);
  }
  function le(p, j) {
    var s = p.barValueAxisPos, b = p.barLabelAxisPos, w = p.data, M = p.valueAxis, Y = M.linePosition, re = M.axis, ue = (0, t.default)(s[j], 2), de = ue[0], he = ue[1], pe = b[j], ge = w[j], ye = (0, t.default)(Y, 2), Oe = ye[0], Qe = ye[1], Je = re === "x" ? 0 : 1, Ye = he;
    return p.gradient.local || (Ye = ge < 0 ? Oe[Je] : Qe[Je]), re === "y" ? [pe, Ye, pe, de] : [Ye, pe, de, pe];
  }
  function ve(p) {
    var j = m(p), s = p.shapeType;
    return j.forEach(function(b) {
      var w = b.shape;
      s === "leftEchelon" ? w = Q(w, p) : s === "rightEchelon" ? w = ie(w, p) : w = ce(w, p), b.shape = w;
    }), j;
  }
  function Q(p, j) {
    var s = j.valueAxis.axis;
    p = (0, C.deepClone)(p);
    var b = p, w = b.points, M = s === "x" ? 0 : 1, Y = w[2][M];
    return w.forEach(function(re) {
      return re[M] = Y;
    }), p;
  }
  function ie(p, j) {
    var s = j.valueAxis.axis;
    p = (0, C.deepClone)(p);
    var b = p, w = b.points, M = s === "x" ? 0 : 1, Y = w[2][M];
    return w.forEach(function(re) {
      return re[M] = Y;
    }), p;
  }
  function ce(p, j) {
    var s = j.valueAxis.axis, b = p.x, w = p.y, M = p.w, Y = p.h;
    return s === "x" ? M = 0 : (w = w + Y, Y = 0), {
      x: b,
      y: w,
      w: M,
      h: Y
    };
  }
  function fe(p, j, s, b) {
    var w = b.chart.render, M = h2(j);
    p[s] && p[s][0].name !== M && (p[s].forEach(function(Y) {
      return w.delGraph(Y);
    }), p[s] = null);
  }
  function B(p) {
    var j = p.animationCurve, s = p.animationFrame, b = p.rLevel, w = A(p), M = te(p);
    return w.map(function(Y) {
      return {
        name: "text",
        index: b,
        visible: p.label.show,
        animationCurve: j,
        animationFrame: s,
        shape: Y,
        style: M
      };
    });
  }
  function A(p) {
    var j = O(p), s = D(p);
    return s.map(function(b, w) {
      return {
        position: b,
        content: j[w]
      };
    });
  }
  function O(p) {
    var j = p.data, s = p.label, b = s.formatter;
    if (j = j.filter(function(M) {
      return typeof M == "number";
    }).map(function(M) {
      return M.toString();
    }), !b)
      return j;
    var w = (0, r.default)(b);
    return w === "string" ? j.map(function(M) {
      return b.replace("{value}", M);
    }) : w === "function" ? j.map(function(M, Y) {
      return b({
        value: M,
        index: Y
      });
    }) : j;
  }
  function D(p) {
    var j = p.label, s = p.barValueAxisPos, b = p.barLabelAxisPos, w = j.position, M = j.offset, Y = p.valueAxis.axis;
    return s.map(function(re, ue) {
      var de = (0, t.default)(re, 2), he = de[0], pe = de[1], ge = b[ue], ye = [pe, ge];
      return w === "bottom" && (ye = [he, ge]), w === "center" && (ye = [(he + pe) / 2, ge]), Y === "y" && ye.reverse(), H(ye, M);
    });
  }
  function H(p, j) {
    var s = (0, t.default)(p, 2), b = s[0], w = s[1], M = (0, t.default)(j, 2), Y = M[0], re = M[1];
    return [b + Y, w + re];
  }
  function te(p) {
    var j = p.color, s = p.label.style, b = p.gradient.color;
    return b.length && (j = b[0]), s = (0, x.deepMerge)({
      fill: j
    }, s), s;
  }
  return kt;
}
var At = {};
var ua;
function As() {
  if (ua)
    return At;
  ua = 1;
  var e = we;
  Object.defineProperty(At, "__esModule", {
    value: true
  }), At.pie = U;
  var r = e(Ve()), n = e(je()), t = e(Fe()), a = e(Te()), o = Xe(), l = Oa(), C = Be(), x = ze();
  function I(A, O) {
    var D = Object.keys(A);
    if (Object.getOwnPropertySymbols) {
      var H = Object.getOwnPropertySymbols(A);
      O && (H = H.filter(function(te) {
        return Object.getOwnPropertyDescriptor(A, te).enumerable;
      })), D.push.apply(D, H);
    }
    return D;
  }
  function W(A) {
    for (var O = 1; O < arguments.length; O++) {
      var D = arguments[O] != null ? arguments[O] : {};
      O % 2 ? I(Object(D), true).forEach(function(H) {
        (0, r.default)(A, H, D[H]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(A, Object.getOwnPropertyDescriptors(D)) : I(Object(D)).forEach(function(H) {
        Object.defineProperty(A, H, Object.getOwnPropertyDescriptor(D, H));
      });
    }
    return A;
  }
  function U(A) {
    var O = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, D = O.series;
    D || (D = []);
    var H = (0, x.initNeedSeries)(D, l.pieConfig, "pie");
    H = F(H, A), H = S(H, A), H = T(H), H = N(H), H = f(H), H = k(H), H = $(H), H = c(H), (0, o.doUpdate)({
      chart: A,
      series: H,
      key: "pie",
      getGraphConfig: Z,
      getStartGraphConfig: u,
      beforeChange: m
    }), (0, o.doUpdate)({
      chart: A,
      series: H,
      key: "pieInsideLabel",
      getGraphConfig: z
    }), (0, o.doUpdate)({
      chart: A,
      series: H,
      key: "pieOutsideLabelLine",
      getGraphConfig: ae,
      getStartGraphConfig: le
    }), (0, o.doUpdate)({
      chart: A,
      series: H,
      key: "pieOutsideLabel",
      getGraphConfig: ie,
      getStartGraphConfig: ce
    });
  }
  function F(A, O) {
    var D = O.render.area;
    return A.forEach(function(H) {
      var te = H.center;
      te = te.map(function(p, j) {
        return typeof p == "number" ? p : parseInt(p) / 100 * D[j];
      }), H.center = te;
    }), A;
  }
  function S(A, O) {
    var D = Math.min.apply(Math, (0, a.default)(O.render.area)) / 2;
    return A.forEach(function(H) {
      var te = H.radius, p = H.data;
      te = d(te, D), p.forEach(function(j) {
        var s = j.radius;
        s || (s = te), s = d(s, D), j.radius = s;
      }), H.radius = te;
    }), A;
  }
  function d(A, O) {
    return A instanceof Array || (A = [0, A]), A = A.map(function(D) {
      return typeof D == "number" ? D : parseInt(D) / 100 * O;
    }), A;
  }
  function T(A, O) {
    var D = A.filter(function(H) {
      var te = H.roseType;
      return te;
    });
    return D.forEach(function(H) {
      var te = H.radius, p = H.data, j = H.roseSort, s = q(H), b = (0, a.default)(p);
      p = E(p), p.forEach(function(w, M) {
        w.radius[1] = te[1] - s * M;
      }), j ? p.reverse() : H.data = b, H.roseIncrement = s;
    }), A;
  }
  function E(A) {
    return A.sort(function(O, D) {
      var H = O.value, te = D.value;
      if (H === te)
        return 0;
      if (H > te)
        return -1;
      if (H < te)
        return 1;
    });
  }
  function q(A) {
    var O = A.radius, D = A.roseIncrement;
    if (typeof D == "number")
      return D;
    if (D === "auto") {
      var H = A.data, te = H.reduce(function(s, b) {
        var w = b.radius;
        return [].concat((0, a.default)(s), (0, a.default)(w));
      }, []), p = Math.min.apply(Math, (0, a.default)(te)), j = Math.max.apply(Math, (0, a.default)(te));
      return (j - p) * 0.6 / (H.length - 1 || 1);
    }
    return parseInt(D) / 100 * O[1];
  }
  function N(A) {
    return A.forEach(function(O) {
      var D = O.data, H = O.percentToFixed, te = _(D);
      D.forEach(function(j) {
        var s = j.value;
        j.percent = s / te * 100, j.percentForLabel = g(s / te * 100, H);
      });
      var p = (0, x.mulAdd)(D.slice(0, -1).map(function(j) {
        var s = j.percent;
        return s;
      }));
      D.slice(-1)[0].percent = 100 - p, D.slice(-1)[0].percentForLabel = g(100 - p, H);
    }), A;
  }
  function g(A) {
    var O = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, D = A.toString(), H = D.split("."), te = H[1] || "0", p = te.slice(0, O);
    return H[1] = p, parseFloat(H.join("."));
  }
  function _(A) {
    return (0, x.mulAdd)(A.map(function(O) {
      var D = O.value;
      return D;
    }));
  }
  function f(A) {
    return A.forEach(function(O) {
      var D = O.startAngle, H = O.data;
      H.forEach(function(te, p) {
        var j = G(H, p), s = (0, t.default)(j, 2), b = s[0], w = s[1];
        te.startAngle = D + b, te.endAngle = D + w;
      });
    }), A;
  }
  function G(A, O) {
    var D = Math.PI * 2, H = A.slice(0, O + 1), te = (0, x.mulAdd)(H.map(function(s) {
      var b = s.percent;
      return b;
    })), p = A[O].percent, j = te - p;
    return [D * j / 100, D * te / 100];
  }
  function k(A) {
    return A.forEach(function(O) {
      var D = O.data;
      D.forEach(function(H) {
        H.insideLabelPos = y(O, H);
      });
    }), A;
  }
  function y(A, O) {
    var D = A.center, H = O.startAngle, te = O.endAngle, p = (0, t.default)(O.radius, 2), j = p[0], s = p[1], b = (j + s) / 2, w = (H + te) / 2;
    return C.getCircleRadianPoint.apply(void 0, (0, a.default)(D).concat([b, w]));
  }
  function $(A) {
    return A.forEach(function(O) {
      var D = O.data, H = O.center;
      D.forEach(function(te) {
        var p = te.startAngle, j = te.endAngle, s = te.radius, b = (p + j) / 2, w = C.getCircleRadianPoint.apply(void 0, (0, a.default)(H).concat([s[1], b]));
        te.edgeCenterPos = w;
      });
    }), A;
  }
  function c(A) {
    return A.forEach(function(O) {
      var D = v(O), H = v(O, false);
      D = V(D), H = V(H), X(D, O), X(H, O, false);
    }), A;
  }
  function R(A) {
    var O = A.outsideLabel.labelLineBendGap, D = L(A);
    return typeof O != "number" && (O = parseInt(O) / 100 * D), O + D;
  }
  function L(A) {
    var O = A.data, D = O.map(function(H) {
      var te = (0, t.default)(H.radius, 2);
      te[0];
      var p = te[1];
      return p;
    });
    return Math.max.apply(Math, (0, a.default)(D));
  }
  function v(A) {
    var O = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true, D = A.data, H = A.center, te = H[0];
    return D.filter(function(p) {
      var j = p.edgeCenterPos, s = j[0];
      return O ? s <= te : s > te;
    });
  }
  function V(A) {
    return A.sort(function(O, D) {
      var H = (0, t.default)(O.edgeCenterPos, 2);
      H[0];
      var te = H[1], p = (0, t.default)(D.edgeCenterPos, 2);
      p[0];
      var j = p[1];
      if (te > j)
        return 1;
      if (te < j)
        return -1;
      if (te === j)
        return 0;
    }), A;
  }
  function X(A, O) {
    var D = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true, H = O.center, te = O.outsideLabel, p = R(O);
    A.forEach(function(j) {
      var s = j.edgeCenterPos, b = j.startAngle, w = j.endAngle, M = te.labelLineEndLength, Y = (b + w) / 2, re = C.getCircleRadianPoint.apply(void 0, (0, a.default)(H).concat([p, Y])), ue = (0, a.default)(re);
      ue[0] += M * (D ? -1 : 1), j.labelLine = [s, re, ue], j.labelLineLength = (0, x.getPolylineLength)(j.labelLine), j.align = {
        textAlign: "left",
        textBaseline: "middle"
      }, D && (j.align.textAlign = "right");
    });
  }
  function Z(A) {
    var O = A.data, D = A.animationCurve, H = A.animationFrame, te = A.rLevel;
    return O.map(function(p, j) {
      return {
        name: "pie",
        index: te,
        animationCurve: D,
        animationFrame: H,
        shape: h2(A, j),
        style: P(A, j)
      };
    });
  }
  function u(A) {
    var O = A.animationDelayGap, D = A.startAnimationCurve, H = Z(A);
    return H.forEach(function(te, p) {
      te.animationCurve = D, te.animationDelay = p * O, te.shape.or = te.shape.ir;
    }), H;
  }
  function m(A) {
    A.animationDelay = 0;
  }
  function h2(A, O) {
    var D = A.center, H = A.data, te = H[O], p = te.radius, j = te.startAngle, s = te.endAngle;
    return {
      startAngle: j,
      endAngle: s,
      ir: p[0],
      or: p[1],
      rx: D[0],
      ry: D[1]
    };
  }
  function P(A, O) {
    var D = A.pieStyle, H = A.data, te = H[O], p = te.color;
    return (0, x.deepMerge)({
      fill: p
    }, D);
  }
  function z(A) {
    var O = A.animationCurve, D = A.animationFrame, H = A.data, te = A.rLevel;
    return H.map(function(p, j) {
      return {
        name: "text",
        index: te,
        visible: A.insideLabel.show,
        animationCurve: O,
        animationFrame: D,
        shape: K(A, j),
        style: ee(A)
      };
    });
  }
  function K(A, O) {
    var D = A.insideLabel, H = A.data, te = D.formatter, p = H[O], j = (0, n.default)(te), s = "";
    return j === "string" && (s = te.replace("{name}", p.name), s = s.replace("{percent}", p.percentForLabel), s = s.replace("{value}", p.value)), j === "function" && (s = te(p)), {
      content: s,
      position: p.insideLabelPos
    };
  }
  function ee(A, O) {
    var D = A.insideLabel.style;
    return D;
  }
  function ae(A) {
    var O = A.animationCurve, D = A.animationFrame, H = A.data, te = A.rLevel;
    return H.map(function(p, j) {
      return {
        name: "polyline",
        index: te,
        visible: A.outsideLabel.show,
        animationCurve: O,
        animationFrame: D,
        shape: ve(A, j),
        style: Q(A, j)
      };
    });
  }
  function le(A) {
    var O = A.data, D = ae(A);
    return D.forEach(function(H, te) {
      H.style.lineDash = [0, O[te].labelLineLength];
    }), D;
  }
  function ve(A, O) {
    var D = A.data, H = D[O];
    return {
      points: H.labelLine
    };
  }
  function Q(A, O) {
    var D = A.outsideLabel, H = A.data, te = D.labelLineStyle, p = H[O].color;
    return (0, x.deepMerge)({
      stroke: p,
      lineDash: [H[O].labelLineLength, 0]
    }, te);
  }
  function ie(A) {
    var O = A.animationCurve, D = A.animationFrame, H = A.data, te = A.rLevel;
    return H.map(function(p, j) {
      return {
        name: "text",
        index: te,
        visible: A.outsideLabel.show,
        animationCurve: O,
        animationFrame: D,
        shape: fe(A, j),
        style: B(A, j)
      };
    });
  }
  function ce(A) {
    var O = A.data, D = ie(A);
    return D.forEach(function(H, te) {
      H.shape.position = O[te].labelLine[1];
    }), D;
  }
  function fe(A, O) {
    var D = A.outsideLabel, H = A.data, te = D.formatter, p = H[O], j = p.labelLine, s = p.name, b = p.percentForLabel, w = p.value, M = (0, n.default)(te), Y = "";
    return M === "string" && (Y = te.replace("{name}", s), Y = Y.replace("{percent}", b), Y = Y.replace("{value}", w)), M === "function" && (Y = te(H[O])), {
      content: Y,
      position: j[2]
    };
  }
  function B(A, O) {
    var D = A.outsideLabel, H = A.data, te = H[O], p = te.color, j = te.align, s = D.style;
    return (0, x.deepMerge)(W({
      fill: p
    }, j), s);
  }
  return At;
}
var Lt = {};
var ca;
function Ls() {
  if (ca)
    return Lt;
  ca = 1;
  var e = we;
  Object.defineProperty(Lt, "__esModule", {
    value: true
  }), Lt.radarAxis = W;
  var r = e(Fe()), n = e(Ve()), t = e(Te()), a = Xe(), o = Ue(), l = Be(), C = ze();
  function x(u, m) {
    var h2 = Object.keys(u);
    if (Object.getOwnPropertySymbols) {
      var P = Object.getOwnPropertySymbols(u);
      m && (P = P.filter(function(z) {
        return Object.getOwnPropertyDescriptor(u, z).enumerable;
      })), h2.push.apply(h2, P);
    }
    return h2;
  }
  function I(u) {
    for (var m = 1; m < arguments.length; m++) {
      var h2 = arguments[m] != null ? arguments[m] : {};
      m % 2 ? x(Object(h2), true).forEach(function(P) {
        (0, n.default)(u, P, h2[P]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(u, Object.getOwnPropertyDescriptors(h2)) : x(Object(h2)).forEach(function(P) {
        Object.defineProperty(u, P, Object.getOwnPropertyDescriptor(h2, P));
      });
    }
    return u;
  }
  function W(u) {
    var m = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, h2 = m.radar, P = [];
    h2 && (P = U(h2), P = F(P, u), P = S(P, u), P = d(P), P = T(P), P = E(P), P = [P]);
    var z = P;
    P.length && !P[0].show && (z = []), (0, a.doUpdate)({
      chart: u,
      series: z,
      key: "radarAxisSplitArea",
      getGraphConfig: q,
      beforeUpdate: _,
      beforeChange: f
    }), (0, a.doUpdate)({
      chart: u,
      series: z,
      key: "radarAxisSplitLine",
      getGraphConfig: G,
      beforeUpdate: $,
      beforeChange: c
    }), (0, a.doUpdate)({
      chart: u,
      series: z,
      key: "radarAxisLine",
      getGraphConfig: R
    }), (0, a.doUpdate)({
      chart: u,
      series: z,
      key: "radarAxisLable",
      getGraphConfig: V
    }), u.radarAxis = P[0];
  }
  function U(u) {
    return (0, C.deepMerge)((0, l.deepClone)(o.radarAxisConfig), u);
  }
  function F(u, m) {
    var h2 = m.render.area, P = u.center;
    return u.centerPos = P.map(function(z, K) {
      return typeof z == "number" ? z : parseInt(z) / 100 * h2[K];
    }), u;
  }
  function S(u, m) {
    var h2 = m.render.area, P = u.splitNum, z = u.radius, K = Math.min.apply(Math, (0, t.default)(h2)) / 2;
    typeof z != "number" && (z = parseInt(z) / 100 * K);
    var ee = z / P;
    return u.ringRadius = new Array(P).fill(0).map(function(ae, le) {
      return ee * (le + 1);
    }), u.radius = z, u;
  }
  function d(u) {
    var m = u.indicator, h2 = u.centerPos, P = u.radius, z = u.startAngle, K = Math.PI * 2, ee = m.length, ae = K / ee, le = new Array(ee).fill(0).map(function(ve, Q) {
      return ae * Q + z;
    });
    return u.axisLineAngles = le, u.axisLinePosition = le.map(function(ve) {
      return l.getCircleRadianPoint.apply(void 0, (0, t.default)(h2).concat([P, ve]));
    }), u;
  }
  function T(u) {
    var m = u.ringRadius, h2 = m[0] / 2;
    return u.areaRadius = m.map(function(P) {
      return P - h2;
    }), u;
  }
  function E(u) {
    var m = u.axisLineAngles, h2 = u.centerPos, P = u.radius, z = u.axisLabel;
    return P += z.labelGap, u.axisLabelPosition = m.map(function(K) {
      return l.getCircleRadianPoint.apply(void 0, (0, t.default)(h2).concat([P, K]));
    }), u;
  }
  function q(u) {
    var m = u.areaRadius, h2 = u.polygon, P = u.animationCurve, z = u.animationFrame, K = u.rLevel, ee = h2 ? "regPolygon" : "ring";
    return m.map(function(ae, le) {
      return {
        name: ee,
        index: K,
        visible: u.splitArea.show,
        animationCurve: P,
        animationFrame: z,
        shape: N(u, le),
        style: g(u, le)
      };
    });
  }
  function N(u, m) {
    var h2 = u.polygon, P = u.areaRadius, z = u.indicator, K = u.centerPos, ee = z.length, ae = {
      rx: K[0],
      ry: K[1],
      r: P[m]
    };
    return h2 && (ae.side = ee), ae;
  }
  function g(u, m) {
    var h2 = u.splitArea, P = u.ringRadius, z = u.axisLineAngles, K = u.polygon, ee = u.centerPos, ae = h2.color, le = h2.style;
    le = I({
      fill: "rgba(0, 0, 0, 0)"
    }, le);
    var ve = P[0] - 0;
    if (K) {
      var Q = l.getCircleRadianPoint.apply(void 0, (0, t.default)(ee).concat([P[0], z[0]])), ie = l.getCircleRadianPoint.apply(void 0, (0, t.default)(ee).concat([P[0], z[1]]));
      ve = (0, C.getPointToLineDistance)(ee, Q, ie);
    }
    if (le = (0, C.deepMerge)((0, l.deepClone)(le, true), {
      lineWidth: ve
    }), !ae.length)
      return le;
    var ce = ae.length;
    return (0, C.deepMerge)(le, {
      stroke: ae[m % ce]
    });
  }
  function _(u, m, h2, P) {
    var z = u[h2];
    if (z) {
      var K = P.chart.render, ee = m.polygon, ae = z[0].name, le = ee ? "regPolygon" : "ring", ve = le !== ae;
      ve && (z.forEach(function(Q) {
        return K.delGraph(Q);
      }), u[h2] = null);
    }
  }
  function f(u, m) {
    var h2 = m.shape.side;
    typeof h2 == "number" && (u.shape.side = h2);
  }
  function G(u) {
    var m = u.ringRadius, h2 = u.polygon, P = u.animationCurve, z = u.animationFrame, K = u.rLevel, ee = h2 ? "regPolygon" : "ring";
    return m.map(function(ae, le) {
      return {
        name: ee,
        index: K,
        animationCurve: P,
        animationFrame: z,
        visible: u.splitLine.show,
        shape: k(u, le),
        style: y(u, le)
      };
    });
  }
  function k(u, m) {
    var h2 = u.ringRadius, P = u.centerPos, z = u.indicator, K = u.polygon, ee = {
      rx: P[0],
      ry: P[1],
      r: h2[m]
    }, ae = z.length;
    return K && (ee.side = ae), ee;
  }
  function y(u, m) {
    var h2 = u.splitLine, P = h2.color, z = h2.style;
    if (z = I({
      fill: "rgba(0, 0, 0, 0)"
    }, z), !P.length)
      return z;
    var K = P.length;
    return (0, C.deepMerge)(z, {
      stroke: P[m % K]
    });
  }
  function $(u, m, h2, P) {
    var z = u[h2];
    if (z) {
      var K = P.chart.render, ee = m.polygon, ae = z[0].name, le = ee ? "regPolygon" : "ring", ve = le !== ae;
      ve && (z.forEach(function(Q) {
        return K.delGraph(Q);
      }), u[h2] = null);
    }
  }
  function c(u, m) {
    var h2 = m.shape.side;
    typeof h2 == "number" && (u.shape.side = h2);
  }
  function R(u) {
    var m = u.axisLinePosition, h2 = u.animationCurve, P = u.animationFrame, z = u.rLevel;
    return m.map(function(K, ee) {
      return {
        name: "polyline",
        index: z,
        visible: u.axisLine.show,
        animationCurve: h2,
        animationFrame: P,
        shape: L(u, ee),
        style: v(u, ee)
      };
    });
  }
  function L(u, m) {
    var h2 = u.centerPos, P = u.axisLinePosition, z = [h2, P[m]];
    return {
      points: z
    };
  }
  function v(u, m) {
    var h2 = u.axisLine, P = h2.color, z = h2.style;
    if (!P.length)
      return z;
    var K = P.length;
    return (0, C.deepMerge)(z, {
      stroke: P[m % K]
    });
  }
  function V(u) {
    var m = u.axisLabelPosition, h2 = u.animationCurve, P = u.animationFrame, z = u.rLevel;
    return m.map(function(K, ee) {
      return {
        name: "text",
        index: z,
        visible: u.axisLabel.show,
        animationCurve: h2,
        animationFrame: P,
        shape: X(u, ee),
        style: Z(u, ee)
      };
    });
  }
  function X(u, m) {
    var h2 = u.axisLabelPosition, P = u.indicator;
    return {
      content: P[m].name,
      position: h2[m]
    };
  }
  function Z(u, m) {
    var h2 = u.axisLabel, P = (0, r.default)(u.centerPos, 2), z = P[0], K = P[1], ee = u.axisLabelPosition, ae = h2.color, le = h2.style, ve = (0, r.default)(ee[m], 2), Q = ve[0], ie = ve[1], ce = Q > z ? "left" : "right", fe = ie > K ? "top" : "bottom";
    if (le = (0, C.deepMerge)({
      textAlign: ce,
      textBaseline: fe
    }, le), !ae.length)
      return le;
    var B = ae.length;
    return (0, C.deepMerge)(le, {
      fill: ae[m % B]
    });
  }
  return Lt;
}
var St = {};
var fa;
function Ss() {
  if (fa)
    return St;
  fa = 1;
  var e = we;
  Object.defineProperty(St, "__esModule", {
    value: true
  }), St.radar = F;
  var r = e(Ve()), n = e(je()), t = e(Fe()), a = e(Te()), o = Xe(), l = Ue(), C = Be(), x = yt, I = ze();
  function W(v, V) {
    var X = Object.keys(v);
    if (Object.getOwnPropertySymbols) {
      var Z = Object.getOwnPropertySymbols(v);
      V && (Z = Z.filter(function(u) {
        return Object.getOwnPropertyDescriptor(v, u).enumerable;
      })), X.push.apply(X, Z);
    }
    return X;
  }
  function U(v) {
    for (var V = 1; V < arguments.length; V++) {
      var X = arguments[V] != null ? arguments[V] : {};
      V % 2 ? W(Object(X), true).forEach(function(Z) {
        (0, r.default)(v, Z, X[Z]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(v, Object.getOwnPropertyDescriptors(X)) : W(Object(X)).forEach(function(Z) {
        Object.defineProperty(v, Z, Object.getOwnPropertyDescriptor(X, Z));
      });
    }
    return v;
  }
  function F(v) {
    var V = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, X = V.series;
    X || (X = []);
    var Z = (0, I.initNeedSeries)(X, l.radarConfig, "radar");
    Z = S(Z, v), Z = d(Z, v), Z = T(Z, v), (0, o.doUpdate)({
      chart: v,
      series: Z,
      key: "radar",
      getGraphConfig: E,
      getStartGraphConfig: q,
      beforeChange: _
    }), (0, o.doUpdate)({
      chart: v,
      series: Z,
      key: "radarPoint",
      getGraphConfig: f,
      getStartGraphConfig: G
    }), (0, o.doUpdate)({
      chart: v,
      series: Z,
      key: "radarLabel",
      getGraphConfig: $
    });
  }
  function S(v, V) {
    var X = V.radarAxis;
    if (!X)
      return [];
    var Z = X.indicator, u = X.axisLineAngles, m = X.radius, h2 = X.centerPos;
    return v.forEach(function(P) {
      var z = P.data;
      P.dataRadius = [], P.radarPosition = Z.map(function(K, ee) {
        var ae = K.max, le = K.min, ve = z[ee];
        typeof ae != "number" && (ae = ve), typeof le != "number" && (le = 0), typeof ve != "number" && (ve = le);
        var Q = (ve - le) / (ae - le) * m;
        return P.dataRadius[ee] = Q, C.getCircleRadianPoint.apply(void 0, (0, a.default)(h2).concat([Q, u[ee]]));
      });
    }), v;
  }
  function d(v, V) {
    var X = V.radarAxis;
    if (!X)
      return [];
    var Z = X.centerPos, u = X.axisLineAngles;
    return v.forEach(function(m) {
      var h2 = m.dataRadius, P = m.label, z = P.labelGap;
      m.labelPosition = h2.map(function(K, ee) {
        return C.getCircleRadianPoint.apply(void 0, (0, a.default)(Z).concat([K + z, u[ee]]));
      });
    }), v;
  }
  function T(v, V) {
    var X = V.radarAxis;
    if (!X)
      return [];
    var Z = (0, t.default)(X.centerPos, 2), u = Z[0], m = Z[1];
    return v.forEach(function(h2) {
      var P = h2.labelPosition, z = P.map(function(K) {
        var ee = (0, t.default)(K, 2), ae = ee[0], le = ee[1], ve = ae > u ? "left" : "right", Q = le > m ? "top" : "bottom";
        return {
          textAlign: ve,
          textBaseline: Q
        };
      });
      h2.labelAlign = z;
    }), v;
  }
  function E(v) {
    var V = v.animationCurve, X = v.animationFrame, Z = v.rLevel;
    return [{
      name: "polyline",
      index: Z,
      animationCurve: V,
      animationFrame: X,
      shape: N(v),
      style: g(v)
    }];
  }
  function q(v, V) {
    var X = V.chart.radarAxis.centerPos, Z = E(v)[0], u = Z.shape.points.length, m = new Array(u).fill(0).map(function(h2) {
      return (0, a.default)(X);
    });
    return Z.shape.points = m, [Z];
  }
  function N(v) {
    var V = v.radarPosition;
    return {
      points: V,
      close: true
    };
  }
  function g(v) {
    var V = v.radarStyle, X = v.color, Z = (0, x.getRgbaValue)(X);
    Z[3] = 0.5;
    var u = {
      stroke: X,
      fill: (0, x.getColorFromRgbValue)(Z)
    };
    return (0, I.deepMerge)(u, V);
  }
  function _(v, V) {
    var X = V.shape, Z = v.shape.points, u = Z.length, m = X.points.length;
    if (m > u) {
      var h2 = Z.slice(-1)[0], P = new Array(m - u).fill(0).map(function(z) {
        return (0, a.default)(h2);
      });
      Z.push.apply(Z, (0, a.default)(P));
    } else
      m < u && Z.splice(m);
  }
  function f(v) {
    var V = v.radarPosition, X = v.animationCurve, Z = v.animationFrame, u = v.rLevel;
    return V.map(function(m, h2) {
      return {
        name: "circle",
        index: u,
        animationCurve: X,
        animationFrame: Z,
        visible: v.point.show,
        shape: k(v, h2),
        style: y(v)
      };
    });
  }
  function G(v) {
    var V = f(v);
    return V.forEach(function(X) {
      return X.shape.r = 0.01;
    }), V;
  }
  function k(v, V) {
    var X = v.radarPosition, Z = v.point, u = Z.radius, m = X[V];
    return {
      rx: m[0],
      ry: m[1],
      r: u
    };
  }
  function y(v, V) {
    var X = v.point, Z = v.color, u = X.style;
    return (0, I.deepMerge)({
      stroke: Z
    }, u);
  }
  function $(v) {
    var V = v.labelPosition, X = v.animationCurve, Z = v.animationFrame, u = v.rLevel;
    return V.map(function(m, h2) {
      return {
        name: "text",
        index: u,
        visible: v.label.show,
        animationCurve: X,
        animationFrame: Z,
        shape: c(v, h2),
        style: L(v, h2)
      };
    });
  }
  function c(v, V) {
    var X = v.labelPosition, Z = v.label, u = v.data, m = Z.offset, h2 = Z.formatter, P = R(X[V], m), z = u[V] ? u[V].toString() : "0", K = (0, n.default)(h2);
    return K === "string" && (z = h2.replace("{value}", z)), K === "function" && (z = h2(z)), {
      content: z,
      position: P
    };
  }
  function R(v, V) {
    var X = (0, t.default)(v, 2), Z = X[0], u = X[1], m = (0, t.default)(V, 2), h2 = m[0], P = m[1];
    return [Z + h2, u + P];
  }
  function L(v, V) {
    var X = v.label, Z = v.color, u = v.labelAlign, m = X.style, h2 = U({
      fill: Z
    }, u[V]);
    return (0, I.deepMerge)(h2, m);
  }
  return St;
}
var Ot = {};
var da;
function Os() {
  if (da)
    return Ot;
  da = 1;
  var e = we;
  Object.defineProperty(Ot, "__esModule", {
    value: true
  }), Ot.gauge = F;
  var r = e(Ve()), n = e(je()), t = e(Fe()), a = e(Te()), o = Xe(), l = Ga(), C = Be(), x = ze(), I = yt;
  function W(B, A) {
    var O = Object.keys(B);
    if (Object.getOwnPropertySymbols) {
      var D = Object.getOwnPropertySymbols(B);
      A && (D = D.filter(function(H) {
        return Object.getOwnPropertyDescriptor(B, H).enumerable;
      })), O.push.apply(O, D);
    }
    return O;
  }
  function U(B) {
    for (var A = 1; A < arguments.length; A++) {
      var O = arguments[A] != null ? arguments[A] : {};
      A % 2 ? W(Object(O), true).forEach(function(D) {
        (0, r.default)(B, D, O[D]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(B, Object.getOwnPropertyDescriptors(O)) : W(Object(O)).forEach(function(D) {
        Object.defineProperty(B, D, Object.getOwnPropertyDescriptor(O, D));
      });
    }
    return B;
  }
  function F(B) {
    var A = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, O = A.series;
    O || (O = []);
    var D = (0, x.initNeedSeries)(O, l.gaugeConfig, "gauge");
    D = S(D, B), D = d(D, B), D = T(D, B), D = E(D), D = q(D), D = N(D), D = g(D), D = _(D), D = f(D), D = G(D), (0, o.doUpdate)({
      chart: B,
      series: D,
      key: "gaugeAxisTick",
      getGraphConfig: y
    }), (0, o.doUpdate)({
      chart: B,
      series: D,
      key: "gaugeAxisLabel",
      getGraphConfig: R
    }), (0, o.doUpdate)({
      chart: B,
      series: D,
      key: "gaugeBackgroundArc",
      getGraphConfig: V,
      getStartGraphConfig: u
    }), (0, o.doUpdate)({
      chart: B,
      series: D,
      key: "gaugeArc",
      getGraphConfig: m,
      getStartGraphConfig: z,
      beforeChange: K
    }), (0, o.doUpdate)({
      chart: B,
      series: D,
      key: "gaugePointer",
      getGraphConfig: ee,
      getStartGraphConfig: Q
    }), (0, o.doUpdate)({
      chart: B,
      series: D,
      key: "gaugeDetails",
      getGraphConfig: ie
    });
  }
  function S(B, A) {
    var O = A.render.area;
    return B.forEach(function(D) {
      var H = D.center;
      H = H.map(function(te, p) {
        return typeof te == "number" ? te : parseInt(te) / 100 * O[p];
      }), D.center = H;
    }), B;
  }
  function d(B, A) {
    var O = A.render.area, D = Math.min.apply(Math, (0, a.default)(O)) / 2;
    return B.forEach(function(H) {
      var te = H.radius;
      typeof te != "number" && (te = parseInt(te) / 100 * D), H.radius = te;
    }), B;
  }
  function T(B, A) {
    var O = A.render.area, D = Math.min.apply(Math, (0, a.default)(O)) / 2;
    return B.forEach(function(H) {
      var te = H.radius, p = H.data, j = H.arcLineWidth;
      p.forEach(function(s) {
        var b = s.radius, w = s.lineWidth;
        b || (b = te), typeof b != "number" && (b = parseInt(b) / 100 * D), s.radius = b, w || (w = j), s.lineWidth = w;
      });
    }), B;
  }
  function E(B, A) {
    return B.forEach(function(O) {
      var D = O.startAngle, H = O.endAngle, te = O.data, p = O.min, j = O.max, s = H - D, b = j - p;
      te.forEach(function(w) {
        var M = w.value, Y = Math.abs((M - p) / b * s);
        w.startAngle = D, w.endAngle = D + Y;
      });
    }), B;
  }
  function q(B, A) {
    return B.forEach(function(O) {
      var D = O.data;
      D.forEach(function(H) {
        var te = H.color, p = H.gradient;
        (!p || !p.length) && (p = te), p instanceof Array || (p = [p]), H.gradient = p;
      });
    }), B;
  }
  function N(B, A) {
    return B.forEach(function(O) {
      var D = O.startAngle, H = O.endAngle, te = O.splitNum, p = O.center, j = O.radius, s = O.arcLineWidth, b = O.axisTick, w = b.tickLength, M = b.style.lineWidth, Y = H - D, re = j - s / 2, ue = re - w, de = Y / (te - 1), he = 2 * Math.PI * j * Y / (Math.PI * 2), pe = Math.ceil(M / 2) / he * Y;
      O.tickAngles = [], O.tickInnerRadius = [], O.tickPosition = new Array(te).fill(0).map(function(ge, ye) {
        var Oe = D + de * ye;
        return ye === 0 && (Oe += pe), ye === te - 1 && (Oe -= pe), O.tickAngles[ye] = Oe, O.tickInnerRadius[ye] = ue, [C.getCircleRadianPoint.apply(void 0, (0, a.default)(p).concat([re, Oe])), C.getCircleRadianPoint.apply(void 0, (0, a.default)(p).concat([ue, Oe]))];
      });
    }), B;
  }
  function g(B, A) {
    return B.forEach(function(O) {
      var D = O.center, H = O.tickInnerRadius, te = O.tickAngles, p = O.axisLabel.labelGap, j = te.map(function(b, w) {
        return C.getCircleRadianPoint.apply(void 0, (0, a.default)(D).concat([H[w] - p, te[w]]));
      }), s = j.map(function(b) {
        var w = (0, t.default)(b, 2), M = w[0], Y = w[1];
        return {
          textAlign: M > D[0] ? "right" : "left",
          textBaseline: Y > D[1] ? "bottom" : "top"
        };
      });
      O.labelPosition = j, O.labelAlign = s;
    }), B;
  }
  function _(B, A) {
    return B.forEach(function(O) {
      var D = O.axisLabel, H = O.min, te = O.max, p = O.splitNum, j = D.data, s = D.formatter, b = (te - H) / (p - 1), w = new Array(p).fill(0).map(function(Y, re) {
        return parseInt(H + b * re);
      }), M = (0, n.default)(s);
      j = (0, x.deepMerge)(w, j).map(function(Y, re) {
        var ue = Y;
        return M === "string" && (ue = s.replace("{value}", Y)), M === "function" && (ue = s({
          value: Y,
          index: re
        })), ue;
      }), D.data = j;
    }), B;
  }
  function f(B, A) {
    return B.forEach(function(O) {
      var D = O.data, H = O.details, te = O.center, p = H.position, j = H.offset, s = D.map(function(b) {
        var w = b.startAngle, M = b.endAngle, Y = b.radius, re = null;
        return p === "center" ? re = te : p === "start" ? re = C.getCircleRadianPoint.apply(void 0, (0, a.default)(te).concat([Y, w])) : p === "end" && (re = C.getCircleRadianPoint.apply(void 0, (0, a.default)(te).concat([Y, M]))), k(re, j);
      });
      O.detailsPosition = s;
    }), B;
  }
  function G(B, A) {
    return B.forEach(function(O) {
      var D = O.data, H = O.details, te = H.formatter, p = (0, n.default)(te), j = D.map(function(s) {
        var b = s.value;
        return p === "string" && (b = te.replace("{value}", "{nt}"), b = b.replace("{name}", s.name)), p === "function" && (b = te(s)), b.toString();
      });
      O.detailsContent = j;
    }), B;
  }
  function k(B, A) {
    var O = (0, t.default)(B, 2), D = O[0], H = O[1], te = (0, t.default)(A, 2), p = te[0], j = te[1];
    return [D + p, H + j];
  }
  function y(B) {
    var A = B.tickPosition, O = B.animationCurve, D = B.animationFrame, H = B.rLevel;
    return A.map(function(te, p) {
      return {
        name: "polyline",
        index: H,
        visible: B.axisTick.show,
        animationCurve: O,
        animationFrame: D,
        shape: $(B, p),
        style: c(B)
      };
    });
  }
  function $(B, A) {
    var O = B.tickPosition;
    return {
      points: O[A]
    };
  }
  function c(B, A) {
    var O = B.axisTick.style;
    return O;
  }
  function R(B) {
    var A = B.labelPosition, O = B.animationCurve, D = B.animationFrame, H = B.rLevel;
    return A.map(function(te, p) {
      return {
        name: "text",
        index: H,
        visible: B.axisLabel.show,
        animationCurve: O,
        animationFrame: D,
        shape: L(B, p),
        style: v(B, p)
      };
    });
  }
  function L(B, A) {
    var O = B.labelPosition, D = B.axisLabel.data;
    return {
      content: D[A].toString(),
      position: O[A]
    };
  }
  function v(B, A) {
    var O = B.labelAlign, D = B.axisLabel, H = D.style;
    return (0, x.deepMerge)(U({}, O[A]), H);
  }
  function V(B) {
    var A = B.animationCurve, O = B.animationFrame, D = B.rLevel;
    return [{
      name: "arc",
      index: D,
      visible: B.backgroundArc.show,
      animationCurve: A,
      animationFrame: O,
      shape: X(B),
      style: Z(B)
    }];
  }
  function X(B) {
    var A = B.startAngle, O = B.endAngle, D = B.center, H = B.radius;
    return {
      rx: D[0],
      ry: D[1],
      r: H,
      startAngle: A,
      endAngle: O
    };
  }
  function Z(B) {
    var A = B.backgroundArc, O = B.arcLineWidth, D = A.style;
    return (0, x.deepMerge)({
      lineWidth: O
    }, D);
  }
  function u(B) {
    var A = V(B)[0], O = U({}, A.shape);
    return O.endAngle = A.shape.startAngle, A.shape = O, [A];
  }
  function m(B) {
    var A = B.data, O = B.animationCurve, D = B.animationFrame, H = B.rLevel;
    return A.map(function(te, p) {
      return {
        name: "agArc",
        index: H,
        animationCurve: O,
        animationFrame: D,
        shape: h2(B, p),
        style: P(B, p)
      };
    });
  }
  function h2(B, A) {
    var O = B.data, D = B.center, H = B.endAngle, te = O[A], p = te.radius, j = te.startAngle, s = te.endAngle, b = te.localGradient;
    return b && (H = s), {
      rx: D[0],
      ry: D[1],
      r: p,
      startAngle: j,
      endAngle: s,
      gradientEndAngle: H
    };
  }
  function P(B, A) {
    var O = B.data, D = B.dataItemStyle, H = O[A], te = H.lineWidth, p = H.gradient;
    return p = p.map(function(j) {
      return (0, I.getRgbaValue)(j);
    }), (0, x.deepMerge)({
      lineWidth: te,
      gradient: p
    }, D);
  }
  function z(B) {
    var A = m(B);
    return A.map(function(O) {
      var D = U({}, O.shape);
      D.endAngle = O.shape.startAngle, O.shape = D;
    }), A;
  }
  function K(B, A) {
    var O = B.style.gradient, D = O.length, H = A.style.gradient.length;
    if (D > H)
      O.splice(H);
    else {
      var te = O.slice(-1)[0];
      O.push.apply(O, (0, a.default)(new Array(H - D).fill(0).map(function(p) {
        return (0, a.default)(te);
      })));
    }
  }
  function ee(B) {
    var A = B.animationCurve, O = B.animationFrame, D = B.center, H = B.rLevel;
    return [{
      name: "polyline",
      index: H,
      visible: B.pointer.show,
      animationCurve: A,
      animationFrame: O,
      shape: ae(B),
      style: le(B),
      setGraphCenter: function(p, j) {
        j.style.graphCenter = D;
      }
    }];
  }
  function ae(B) {
    var A = B.center;
    return {
      points: ve(A),
      close: true
    };
  }
  function le(B) {
    var A = B.startAngle, O = B.endAngle, D = B.min, H = B.max, te = B.data, p = B.pointer, j = B.center, s = p.valueIndex, b = p.style, w = te[s] ? te[s].value : 0, M = (w - D) / (H - D) * (O - A) + A + Math.PI / 2;
    return (0, x.deepMerge)({
      rotate: (0, x.radianToAngle)(M),
      scale: [1, 1],
      graphCenter: j
    }, b);
  }
  function ve(B) {
    var A = (0, t.default)(B, 2), O = A[0], D = A[1], H = [O, D - 40], te = [O + 5, D], p = [O, D + 10], j = [O - 5, D];
    return [H, te, p, j];
  }
  function Q(B) {
    var A = B.startAngle, O = ee(B)[0];
    return O.style.rotate = (0, x.radianToAngle)(A + Math.PI / 2), [O];
  }
  function ie(B) {
    var A = B.detailsPosition, O = B.animationCurve, D = B.animationFrame, H = B.rLevel, te = B.details.show;
    return A.map(function(p, j) {
      return {
        name: "numberText",
        index: H,
        visible: te,
        animationCurve: O,
        animationFrame: D,
        shape: ce(B, j),
        style: fe(B, j)
      };
    });
  }
  function ce(B, A) {
    var O = B.detailsPosition, D = B.detailsContent, H = B.data, te = B.details, p = O[A], j = D[A], s = H[A].value, b = te.valueToFixed;
    return {
      number: [s],
      content: j,
      position: p,
      toFixed: b
    };
  }
  function fe(B, A) {
    var O = B.details, D = B.data, H = O.style, te = D[A].color;
    return (0, x.deepMerge)({
      fill: te
    }, H);
  }
  return Ot;
}
var Gt = {};
var ha;
function Gs() {
  if (ha)
    return Gt;
  ha = 1;
  var e = we;
  Object.defineProperty(Gt, "__esModule", {
    value: true
  }), Gt.legend = x;
  var r = e(Ve()), n = e(Fe()), t = e(je()), a = Xe(), o = Be(), l = Ue(), C = ze();
  function x(u) {
    var m = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, h2 = m.legend;
    h2 ? (h2 = (0, C.deepMerge)((0, o.deepClone)(l.legendConfig, true), h2), h2 = I(h2), h2 = W(h2, m, u), h2 = U(h2, u), h2 = d(h2, u), h2 = [h2]) : h2 = [], (0, a.doUpdate)({
      chart: u,
      series: h2,
      key: "legendIcon",
      getGraphConfig: $
    }), (0, a.doUpdate)({
      chart: u,
      series: h2,
      key: "legendText",
      getGraphConfig: L
    });
  }
  function I(u) {
    var m = u.data;
    return u.data = m.map(function(h2) {
      var P = (0, t.default)(h2);
      return P === "string" ? {
        name: h2
      } : P === "object" ? h2 : {
        name: ""
      };
    }), u;
  }
  function W(u, m, h2) {
    var P = m.series, z = h2.legendStatus, K = u.data.filter(function(ee) {
      var ae = ee.name, le = P.find(function(ve) {
        var Q = ve.name;
        return ae === Q;
      });
      return le ? (ee.color || (ee.color = le.color), ee.icon || (ee.icon = le.type), ee) : false;
    });
    return (!z || z.length !== u.data.length) && (z = new Array(u.data.length).fill(true)), K.forEach(function(ee, ae) {
      return ee.status = z[ae];
    }), u.data = K, h2.legendStatus = z, u;
  }
  function U(u, m) {
    var h2 = m.render.ctx, P = u.data, z = u.textStyle, K = u.textUnselectedStyle;
    return P.forEach(function(ee) {
      var ae = ee.status, le = ee.name;
      ee.textWidth = F(h2, le, ae ? z : K);
    }), u;
  }
  function F(u, m, h2) {
    return u.font = S(h2), u.measureText(m).width;
  }
  function S(u) {
    var m = u.fontFamily, h2 = u.fontSize;
    return "".concat(h2, "px ").concat(m);
  }
  function d(u, m) {
    var h2 = u.orient;
    return h2 === "vertical" ? f(u, m) : T(u, m), u;
  }
  function T(u, m) {
    var h2 = u.iconHeight, P = u.itemGap, z = E(u, m), K = z.map(function(le) {
      return N(le, u, m);
    }), ee = g(u, m), ae = {
      textAlign: "left",
      textBaseline: "middle"
    };
    z.forEach(function(le, ve) {
      return le.forEach(function(Q) {
        var ie = Q.iconPosition, ce = Q.textPosition, fe = K[ve], B = ee + ve * (P + h2);
        Q.iconPosition = _(ie, [fe, B]), Q.textPosition = _(ce, [fe, B]), Q.align = ae;
      });
    });
  }
  function E(u, m) {
    var h2 = u.data, P = u.iconWidth, z = m.render.area[0], K = 0, ee = [[]];
    return h2.forEach(function(ae, le) {
      var ve = q(K, le, u), Q = ve + P + 5 + ae.textWidth;
      Q >= z && (K = le, ve = q(K, le, u), ee.push([])), ae.iconPosition = [ve, 0], ae.textPosition = [ve + P + 5, 0], ee.slice(-1)[0].push(ae);
    }), ee;
  }
  function q(u, m, h2) {
    var P = h2.data, z = h2.iconWidth, K = h2.itemGap, ee = P.slice(u, m);
    return (0, C.mulAdd)(ee.map(function(ae) {
      var le = ae.textWidth;
      return le;
    })) + (m - u) * (K + 5 + z);
  }
  function N(u, m, h2) {
    var P = m.left, z = m.right, K = m.iconWidth, ee = m.itemGap, ae = h2.render.area[0], le = u.length, ve = (0, C.mulAdd)(u.map(function(ie) {
      var ce = ie.textWidth;
      return ce;
    })) + le * (5 + K) + (le - 1) * ee, Q = [P, z].findIndex(function(ie) {
      return ie !== "auto";
    });
    return Q === -1 ? (ae - ve) / 2 : Q === 0 ? typeof P == "number" ? P : parseInt(P) / 100 * ae : (typeof z != "number" && (z = parseInt(z) / 100 * ae), ae - (ve + z));
  }
  function g(u, m) {
    var h2 = u.top, P = u.bottom, z = u.iconHeight, K = m.render.area[1], ee = [h2, P].findIndex(function(ie) {
      return ie !== "auto";
    }), ae = z / 2;
    if (ee === -1) {
      var le = m.gridArea, ve = le.y, Q = le.h;
      return ve + Q + 45 - ae;
    } else
      return ee === 0 ? typeof h2 == "number" ? h2 - ae : parseInt(h2) / 100 * K - ae : (typeof P != "number" && (P = parseInt(P) / 100 * K), K - P - ae);
  }
  function _(u, m) {
    var h2 = (0, n.default)(u, 2), P = h2[0], z = h2[1], K = (0, n.default)(m, 2), ee = K[0], ae = K[1];
    return [P + ee, z + ae];
  }
  function f(u, m) {
    var h2 = G(u, m), P = (0, n.default)(h2, 2), z = P[0], K = P[1], ee = k(u, m);
    y(u, z);
    var ae = {
      textAlign: "left",
      textBaseline: "middle"
    };
    u.data.forEach(function(le) {
      var ve = le.textPosition, Q = le.iconPosition;
      le.textPosition = _(ve, [K, ee]), le.iconPosition = _(Q, [K, ee]), le.align = ae;
    });
  }
  function G(u, m) {
    var h2 = u.left, P = u.right, z = m.render.area[0], K = [h2, P].findIndex(function(ae) {
      return ae !== "auto";
    });
    if (K === -1)
      return [true, z - 10];
    var ee = [h2, P][K];
    return typeof ee != "number" && (ee = parseInt(ee) / 100 * z), [!!K, ee];
  }
  function k(u, m) {
    var h2 = u.iconHeight, P = u.itemGap, z = u.data, K = u.top, ee = u.bottom, ae = m.render.area[1], le = z.length, ve = le * h2 + (le - 1) * P, Q = [K, ee].findIndex(function(ce) {
      return ce !== "auto";
    });
    if (Q === -1)
      return (ae - ve) / 2;
    var ie = [K, ee][Q];
    return typeof ie != "number" && (ie = parseInt(ie) / 100 * ae), Q === 1 && (ie = ae - ie - ve), ie;
  }
  function y(u, m) {
    var h2 = u.data, P = u.iconWidth, z = u.iconHeight, K = u.itemGap, ee = z / 2;
    h2.forEach(function(ae, le) {
      var ve = ae.textWidth, Q = (z + K) * le + ee, ie = m ? 0 - P : 0, ce = m ? ie - 5 - ve : P + 5;
      ae.iconPosition = [ie, Q], ae.textPosition = [ce, Q];
    });
  }
  function $(u, m) {
    var h2 = u.data, P = u.selectAble, z = u.animationCurve, K = u.animationFrame, ee = u.rLevel;
    return h2.map(function(ae, le) {
      return (0, r.default)({
        name: ae.icon === "line" ? "lineIcon" : "rect",
        index: ee,
        visible: u.show,
        hover: P,
        click: P,
        animationCurve: z,
        animationFrame: K,
        shape: c(u, le),
        style: R(u, le)
      }, "click", Z(u, le, m));
    });
  }
  function c(u, m) {
    var h2 = u.data, P = u.iconWidth, z = u.iconHeight, K = (0, n.default)(h2[m].iconPosition, 2), ee = K[0], ae = K[1], le = z / 2;
    return {
      x: ee,
      y: ae - le,
      w: P,
      h: z
    };
  }
  function R(u, m) {
    var h2 = u.data, P = u.iconStyle, z = u.iconUnselectedStyle, K = h2[m], ee = K.status, ae = K.color, le = ee ? P : z;
    return (0, C.deepMerge)({
      fill: ae
    }, le);
  }
  function L(u, m) {
    var h2 = u.data, P = u.selectAble, z = u.animationCurve, K = u.animationFrame, ee = u.rLevel;
    return h2.map(function(ae, le) {
      return {
        name: "text",
        index: ee,
        visible: u.show,
        hover: P,
        animationCurve: z,
        animationFrame: K,
        hoverRect: X(u, le),
        shape: v(u, le),
        style: V(u, le),
        click: Z(u, le, m)
      };
    });
  }
  function v(u, m) {
    var h2 = u.data[m], P = h2.textPosition, z = h2.name;
    return {
      content: z,
      position: P
    };
  }
  function V(u, m) {
    var h2 = u.textStyle, P = u.textUnselectedStyle, z = u.data[m], K = z.status, ee = z.align, ae = K ? h2 : P;
    return (0, C.deepMerge)((0, o.deepClone)(ae, true), ee);
  }
  function X(u, m) {
    var h2 = u.textStyle, P = u.textUnselectedStyle, z = u.data[m], K = z.status, ee = (0, n.default)(z.textPosition, 2), ae = ee[0], le = ee[1], ve = z.textWidth, Q = K ? h2 : P, ie = Q.fontSize;
    return [ae, le - ie / 2, ve, ie];
  }
  function Z(u, m, h2) {
    var P = u.data[m].name;
    return function() {
      var z = h2.chart, K = z.legendStatus, ee = z.option, ae = !K[m], le = ee.series.find(function(ve) {
        var Q = ve.name;
        return Q === P;
      });
      le.show = ae, K[m] = ae, h2.chart.setOption(ee);
    };
  }
  return Gt;
}
var va;
function Ms() {
  return va || (va = 1, function(e) {
    Object.defineProperty(e, "__esModule", {
      value: true
    }), Object.defineProperty(e, "mergeColor", {
      enumerable: true,
      get: function() {
        return r.mergeColor;
      }
    }), Object.defineProperty(e, "title", {
      enumerable: true,
      get: function() {
        return n.title;
      }
    }), Object.defineProperty(e, "grid", {
      enumerable: true,
      get: function() {
        return t.grid;
      }
    }), Object.defineProperty(e, "axis", {
      enumerable: true,
      get: function() {
        return a.axis;
      }
    }), Object.defineProperty(e, "line", {
      enumerable: true,
      get: function() {
        return o.line;
      }
    }), Object.defineProperty(e, "bar", {
      enumerable: true,
      get: function() {
        return l.bar;
      }
    }), Object.defineProperty(e, "pie", {
      enumerable: true,
      get: function() {
        return C.pie;
      }
    }), Object.defineProperty(e, "radarAxis", {
      enumerable: true,
      get: function() {
        return x.radarAxis;
      }
    }), Object.defineProperty(e, "radar", {
      enumerable: true,
      get: function() {
        return I.radar;
      }
    }), Object.defineProperty(e, "gauge", {
      enumerable: true,
      get: function() {
        return W.gauge;
      }
    }), Object.defineProperty(e, "legend", {
      enumerable: true,
      get: function() {
        return U.legend;
      }
    });
    var r = xs(), n = $s(), t = _s(), a = Ps(), o = ws(), l = ks(), C = As(), x = Ls(), I = Ss(), W = Os(), U = Gs();
  }(wr)), wr;
}
var pa;
function Rs() {
  return pa || (pa = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: true
    }), e.default = void 0;
    var n = r(je()), t = r(mt()), a = r(Et), o = Be(), l = Ms(), C = function x(I) {
      if ((0, t.default)(this, x), !I)
        return console.error("Charts Missing parameters!"), false;
      var W = I.clientWidth, U = I.clientHeight, F = document.createElement("canvas");
      F.setAttribute("width", W), F.setAttribute("height", U), I.appendChild(F);
      var S = {
        container: I,
        canvas: F,
        render: new a.default(F),
        option: null
      };
      Object.assign(this, S);
    };
    e.default = C, C.prototype.setOption = function(x) {
      var I = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      if (!x || (0, n.default)(x) !== "object")
        return console.error("setOption Missing parameters!"), false;
      I && this.render.graphs.forEach(function(U) {
        return U.animationEnd();
      });
      var W = (0, o.deepClone)(x, true);
      (0, l.mergeColor)(this, W), (0, l.grid)(this, W), (0, l.axis)(this, W), (0, l.radarAxis)(this, W), (0, l.title)(this, W), (0, l.bar)(this, W), (0, l.line)(this, W), (0, l.pie)(this, W), (0, l.radar)(this, W), (0, l.gauge)(this, W), (0, l.legend)(this, W), this.option = x, this.render.launchAnimation();
    }, C.prototype.resize = function() {
      var x = this.container, I = this.canvas, W = this.render, U = this.option, F = x.clientWidth, S = x.clientHeight;
      I.setAttribute("width", F), I.setAttribute("height", S), W.area = [F, S], this.setOption(U);
    };
  }(Pr)), Pr;
}
(function(e) {
  var r = we;
  Object.defineProperty(e, "__esModule", {
    value: true
  }), Object.defineProperty(e, "changeDefaultConfig", {
    enumerable: true,
    get: function() {
      return t.changeDefaultConfig;
    }
  }), e.default = void 0;
  var n = r(Rs()), t = Ue(), a = n.default;
  e.default = a;
})(La);
var Ma = _a(La);
var Ds = {
  __name: "index",
  props: {
    option: {
      type: Object,
      default: () => ({})
    }
  },
  setup(e) {
    const r = e, n = ref(null), t = ref(null);
    let a = reactive({});
    Ce(t, C, o), watch(() => r.option, () => {
      a && a.setOption(r.option, true);
    }, { deep: true });
    function o() {
      l();
    }
    function l() {
      a = new Ma(t.value), r.option && a.setOption(r.option);
    }
    function C() {
      a && a.resize();
    }
    return (x, I) => (openBlock(), createElementBlock("div", {
      ref_key: "chartsContainerRef",
      ref: n,
      class: "dv-charts-container"
    }, [
      createBaseVNode("div", {
        ref_key: "chartRef",
        ref: t,
        class: "charts-canvas-container"
      }, null, 512)
    ], 512));
  }
};
var Ar = {
  install(e) {
    e.component("DvCharts", Ds);
  }
};
var Ts = { class: "dv-capsule-chart" };
var Bs = { class: "label-column" };
var Fs = createBaseVNode("div", null, " ", -1);
var Ns = { class: "capsule-container" };
var Ws = {
  key: 0,
  class: "capsule-item-value"
};
var Es = { class: "unit-label" };
var js = {
  key: 0,
  class: "unit-text"
};
var zs = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    }
  },
  setup(e) {
    useCssVars((x) => ({
      "10ea9b50": unref(a),
      "41ac2896": unref(t)
    }));
    const r = e, n = reactive({
      defaultConfig: {
        /**
         * @description Capsule chart data
         * @type {Array<object>}
         * @default data = []
         * @example data = [{ name: 'foo1', value: 100 }, { name: 'foo2', value: 100 }]
         */
        data: [],
        /**
         * @description Colors (hex|rgb|rgba|color keywords)
         * @type {Array<string>}
         * @default color = ['#37a2da', '#32c5e9', '#67e0e3', '#9fe6b8', '#ffdb5c', '#ff9f7f', '#fb7293']
         * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']
         */
        colors: [
          "#37a2da",
          "#32c5e9",
          "#67e0e3",
          "#9fe6b8",
          "#ffdb5c",
          "#ff9f7f",
          "#fb7293"
        ],
        /**
         * @description Chart unit
         * @type {string}
         * @default unit = ''
         */
        unit: "",
        /**
         * @description Show item value
         * @type {boolean}
         * @default showValue = false
         */
        showValue: false,
        /**
         * @description Text color
         * @type {string}
         * @default textColor = '#fff'
         */
        textColor: "#fff",
        /**
         * @description Chart font size
         * @type {number}
         * @default fontSize = 12
         */
        fontSize: 12,
        /**
         * @description num of labels
         * @type {number}
         * @default labelNum = 6
         */
        labelNum: 6
      },
      mergedConfig: null,
      capsuleLength: [],
      capsuleValue: [],
      labelData: [],
      labelDataLength: []
    });
    watch(() => r.config, () => {
      o();
    }, {
      deep: true
    });
    const t = computed(() => `${r.config.fontSize ? r.config.fontSize : n.defaultConfig.fontSize}px`), a = computed(() => r.config.textColor ? r.config.textColor : n.defaultConfig.textColor);
    function o() {
      l(), C();
    }
    function l() {
      n.mergedConfig = xe(
        _e(n.defaultConfig, true),
        r.config || {}
      );
    }
    function C() {
      const { data: x, labelNum: I } = n.mergedConfig;
      if (!x.length || x.length === 0) {
        n.labelData = [], n.capsuleLength = [];
        return;
      }
      const W = x.map(({ value: d }) => d), U = Math.max(...W);
      n.capsuleValue = W, n.capsuleLength = W.map((d) => U ? d / U : 0);
      const F = U / 5, S = Array.from(
        new Set(Array.from({ length: I }).fill(0).map((d, T) => Math.ceil(T * F)))
      );
      n.labelData = S, n.labelDataLength = Array.from(S).map(
        (d) => U ? d / U : 0
      );
    }
    return onMounted(() => {
      o();
    }), (x, I) => (openBlock(), createElementBlock("div", Ts, [
      unref(n).mergedConfig ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
        createBaseVNode("div", Bs, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(unref(n).mergedConfig.data, (W) => (openBlock(), createElementBlock("div", {
            key: W.name
          }, toDisplayString(W.name), 1))), 128)),
          Fs
        ]),
        createBaseVNode("div", Ns, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(unref(n).capsuleLength, (W, U) => (openBlock(), createElementBlock("div", {
            key: U,
            class: "capsule-item"
          }, [
            createBaseVNode("div", {
              class: "capsule-item-column",
              style: normalizeStyle(`width: ${W * 100}%; background-color: ${unref(n).mergedConfig.colors[U % unref(n).mergedConfig.colors.length]};`)
            }, [
              unref(n).mergedConfig.showValue ? (openBlock(), createElementBlock("div", Ws, toDisplayString(unref(n).capsuleValue[U]), 1)) : createCommentVNode("", true)
            ], 4)
          ]))), 128)),
          createBaseVNode("div", Es, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(n).labelData, (W, U) => (openBlock(), createElementBlock("div", {
              key: W + U
            }, toDisplayString(W), 1))), 128))
          ])
        ]),
        unref(n).mergedConfig.unit ? (openBlock(), createElementBlock("div", js, toDisplayString(unref(n).mergedConfig.unit), 1)) : createCommentVNode("", true)
      ], 64)) : createCommentVNode("", true)
    ]));
  }
};
var Lr = {
  install(e) {
    e.component("DvCapsuleChart", zs);
  }
};
var qs = { class: "dv-digital-flop" };
var Ra = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => {
      }
    }
  },
  setup(e) {
    const r = e, n = ref(null), t = reactive({
      renderer: null,
      defaultConfig: {
        /**
             * @description Number for digital flop
             * @type {Array<Number>}
             * @default number = []
             * @example number = [10]
             */
        number: [],
        /**
             * @description Content formatter
             * @type {String}
             * @default content = ''
             * @example content = '{nt}个'
             */
        content: "",
        /**
             * @description Number toFixed
             * @type {Number}
             * @default toFixed = 0
             */
        toFixed: 0,
        /**
             * @description Text align
             * @type {String}
             * @default textAlign = 'center'
             * @example textAlign = 'center' | 'left' | 'right'
             */
        textAlign: "center",
        /**
             * @description rowGap
             * @type {Number}
             @default rowGap = 0
             */
        rowGap: 0,
        /**
             * @description Text style configuration
             * @type {Object} {CRender Class Style}
             */
        style: {
          fontSize: 30,
          fill: "#3de7c9"
        },
        /**
             * @description Number formatter
             * @type {Null|Function}
             */
        formatter: void 0,
        /**
             * @description CRender animationCurve
             * @type {String}
             * @default animationCurve = 'easeOutCubic'
             */
        animationCurve: "easeOutCubic",
        /**
             * @description CRender animationFrame
             * @type {String}
             * @default animationFrame = 50
             */
        animationFrame: 50
      },
      mergedConfig: null,
      graph: null
    });
    watch(() => r.config, (F) => {
      W();
    }, { deep: true }), onMounted(() => {
      a();
    });
    function a() {
      o(), l(), C();
    }
    function o() {
      t.renderer = new Aa(n.value);
    }
    function l() {
      t.mergedConfig = xe(_e(t.defaultConfig, true), r.config || {});
    }
    function C() {
      const F = x(), S = I();
      t.graph = t.renderer.add({
        name: "numberText",
        animationCurve: t.mergedConfig.animationCurve,
        animationFrame: t.mergedConfig.animationFrame,
        shape: F,
        style: S
      });
    }
    function x() {
      const { number: F, content: S, toFixed: d, textAlign: T, rowGap: E, formatter: q } = t.mergedConfig, [N, g] = t.renderer.area, _ = [N / 2, g / 2];
      return T === "left" && (_[0] = 0), T === "right" && (_[0] = N), {
        number: F,
        content: S,
        toFixed: d,
        position: _,
        rowGap: E,
        formatter: q
      };
    }
    function I() {
      const { style: F, textAlign: S } = t.mergedConfig;
      return xe(F, {
        textAlign: S,
        textBaseline: "middle"
      });
    }
    function W() {
      if (t.graph.animationEnd(), l(), !t.graph)
        return;
      const { animationCurve: F, animationFrame: S } = t.mergedConfig, d = x(), T = I();
      U(t.graph, d), t.graph.animationCurve = F, t.graph.animationFrame = S, t.graph.animation("style", T, true), t.graph.animation("shape", d);
    }
    function U(F, S) {
      const d = F.shape.number.length, T = S.number.length;
      d !== T && (F.shape.number = S.number);
    }
    return (F, S) => (openBlock(), createElementBlock("div", qs, [
      createBaseVNode("canvas", {
        ref_key: "digitalFlop",
        ref: n
      }, null, 512)
    ]));
  }
};
var Is = { class: "dv-active-ring-chart" };
var Hs = { class: "active-ring-info" };
var Vs = { key: 0 };
var Us = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    },
    isDigitalFlop: {
      type: Boolean,
      default: true
    }
  },
  setup(e) {
    useCssVars((q) => ({
      "7d023495": unref(I)
    }));
    const r = e, n = ref(null), t = reactive({
      defaultConfig: {
        /**
         * @description Ring radius
         * @type {string | number}
         * @default radius = '50%'
         * @example radius = '50%' | 100
         */
        radius: "50%",
        /**
         * @description Active ring radius
         * @type {string | number}
         * @default activeRadius = '55%'
         * @example activeRadius = '55%' | 110
         */
        activeRadius: "55%",
        /**
         * @description Ring data
         * @type {Array<object>}
         * @default data = [{ name: '', value: 0 }]
         */
        data: [{ name: "", value: 0 }],
        /**
         * @description Ring line width
         * @type {number}
         * @default lineWidth = 20
         */
        lineWidth: 20,
        /**
         * @description Active time gap (ms)
         * @type {number}
         * @default activeTimeGap = 3000
         */
        activeTimeGap: 3e3,
        /**
         * @description Ring color (hex|rgb|rgba|color keywords)
         * @type {Array<string>}
         * @default color = [Charts Default Color]
         * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']
         */
        color: [],
        /**
         * @description Text color
         * @type {string}
         * @default textColor = '#fff'
         */
        textColor: "#fff",
        /**
         * @description Digital flop style
         * @type {object}
         */
        digitalFlopStyle: {
          fontSize: 25,
          fill: "#fff"
        },
        /**
         * @description Digital flop toFixed
         * @type {number}
         */
        digitalFlopToFixed: 0,
        /**
         * @description percent number toFixed
         * @type {number}
         */
        numToFixed: 0,
        /**
         * @description Digital flop unit
         * @type {string}
         */
        digitalFlopUnit: "",
        /**
         * @description CRender animationCurve
         * @type {string}
         * @default animationCurve = 'easeOutCubic'
         */
        animationCurve: "easeOutCubic",
        /**
         * @description CRender animationFrame
         * @type {string}
         * @default animationFrame = 50
         */
        animationFrame: 50,
        /**
         * @description showOriginValue
         * @type {boolean}
         * @default showOriginValue = false
         */
        showOriginValue: false
      },
      mergedConfig: null,
      chart: null,
      activeIndex: 0,
      animationHandler: ""
    }), a = computed(() => {
      if (!t.mergedConfig)
        return 0;
      const { data: q, showOriginValue: N } = t.mergedConfig, g = q.map(({ value: f }) => f);
      let _;
      if (N)
        _ = g[t.activeIndex];
      else {
        const f = g.reduce((k, y) => k + y, 0);
        _ = Number.parseFloat(g[t.activeIndex] / f * 100) || 0;
      }
      return _;
    }), o = computed(() => {
      if (!t.mergedConfig)
        return a.value.toFixed(t.defaultConfig.numToFixed);
      const { numToFixed: q, showOriginValue: N } = t.mergedConfig;
      return `${N ? a.value.toFixed(q) : `${a.value.toFixed(q)}%`}`;
    }), l = computed(() => {
      if (!t.mergedConfig)
        return {};
      const {
        digitalFlopStyle: q,
        digitalFlopToFixed: N,
        showOriginValue: g,
        digitalFlopUnit: _
      } = t.mergedConfig;
      return {
        content: g ? `{nt}${_}` : `{nt}${_ || "%"}`,
        number: [a.value],
        style: q,
        toFixed: N
      };
    }), C = computed(() => t.mergedConfig ? t.mergedConfig.data[t.activeIndex].name : ""), x = computed(() => t.mergedConfig ? `font-size: ${t.mergedConfig.digitalFlopStyle.fontSize}px;` : ""), I = computed(() => r.config.textColor ? r.config.textColor : t.defaultConfig.textColor);
    watch(() => r.config, () => {
      clearTimeout(t.animationHandler), t.activeIndex = 0, F(), S();
    }, {
      deep: true
    }), onMounted(() => {
      W();
    }), onUnmounted(() => {
      clearTimeout(t.animationHandler);
    });
    function W() {
      U(), F(), S();
    }
    function U() {
      t.chart = new Ma(n.value);
    }
    function F() {
      t.mergedConfig = xe(
        _e(t.defaultConfig, true),
        r.config || {}
      );
    }
    function S() {
      const q = d();
      t.chart.setOption(q, true), E();
    }
    function d() {
      const q = T();
      return t.mergedConfig.data.forEach((N) => {
        N.radius = q;
      }), {
        series: [
          {
            type: "pie",
            ...t.mergedConfig,
            outsideLabel: {
              show: false
            }
          }
        ],
        color: t.mergedConfig.color
      };
    }
    function T(q = false) {
      const { radius: N, activeRadius: g, lineWidth: _ } = t.mergedConfig, f = Math.min(...t.chart.render.area) / 2, G = _ / 2;
      let k = q ? g : N;
      typeof k != "number" && (k = Number.parseInt(k) / 100 * f);
      const y = k - G, $ = k + G;
      return [y, $];
    }
    function E() {
      const q = T(), N = T(true), g = d(), { data: _ } = g.series[0];
      _.forEach((G, k) => {
        k === t.activeIndex ? G.radius = N : G.radius = q;
      }), t.chart.setOption(g, true);
      const { activeTimeGap: f } = g.series[0];
      t.animationHandler = setTimeout((G) => {
        t.activeIndex += 1, t.activeIndex >= _.length && (t.activeIndex = 0), E();
      }, f);
    }
    return (q, N) => (openBlock(), createElementBlock("div", Is, [
      createBaseVNode("div", {
        ref_key: "activeRingChart",
        ref: n,
        class: "active-ring-chart-container"
      }, null, 512),
      createBaseVNode("div", Hs, [
        e.isDigitalFlop ? (openBlock(), createElementBlock("div", Vs, [
          createVNode(Ra, { config: unref(l) }, null, 8, ["config"])
        ])) : (openBlock(), createElementBlock("div", {
          key: 1,
          class: "active-ring-name",
          style: normalizeStyle(unref(x))
        }, toDisplayString(unref(o)), 5)),
        createBaseVNode("div", {
          class: "active-ring-name",
          style: normalizeStyle(unref(x))
        }, toDisplayString(unref(C)), 5)
      ])
    ]));
  }
};
var Sr = {
  install(e) {
    e.component("DvActiveRingChart", Us);
  }
};
var Or = {
  install(e) {
    e.component("DvDigitalFlop", Ra);
  }
};
var Xs = defineComponent({
  __name: "index",
  setup(e) {
    const r = ref(null), n = reactive({
      allWidth: 0,
      scale: 0,
      datavRoot: "",
      ready: false
    }), t = () => {
      const { width: C, height: x } = screen;
      n.allWidth = C, r.value && (r.value.style.width = `${C}px`, r.value.style.height = `${x}px`);
    }, a = () => {
      const C = document.body.clientWidth;
      r.value && (r.value.style.transform = `scale(${C / n.allWidth})`);
    };
    return Ce(r, () => {
      a();
    }, () => {
      t(), a(), n.ready = true;
    }), (C, x) => (openBlock(), createElementBlock("div", {
      id: "dv-full-screen-container",
      ref_key: "fullScreenContainer",
      ref: r
    }, [
      unref(n).ready ? renderSlot(C.$slots, "default", { key: 0 }) : createCommentVNode("", true)
    ], 512));
  }
});
var Gr = {
  install(e) {
    e.component("DvFullScreenContainer", Xs);
  }
};
var Qs = ["width", "height"];
var Ys = ["fill", "x", "y", "width", "height"];
var Ks = ["values", "begin"];
var Js = ["fill", "x", "y", "width", "height"];
var Zs = ["values"];
var eu = ["values"];
var tu = ["values"];
var ru = ["values"];
var nu = ["fill", "x", "y", "height"];
var au = createBaseVNode("animate", {
  attributeName: "width",
  values: "0;40;0",
  dur: "2s",
  repeatCount: "indefinite"
}, null, -1);
var iu = ["values"];
var ou = defineComponent({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    }
  },
  setup(e) {
    const r = e, n = ref(null), t = reactive([200, 50]), a = ref(4), o = ref(20), l = ref(2.5), C = ref(l.value / 2), x = reactive(["#fff", "#0de7c2"]), I = reactive({
      mergedColor: [],
      rects: [],
      points: [],
      svgScale: [1, 1]
    }), W = () => {
      q();
    }, U = () => {
      q();
    }, { width: F, height: S } = Ce(n, W, U), d = () => {
      const [g, _] = t, f = g / (o.value + 1), G = _ / (a.value + 1), k = new Array(a.value).fill(0).map((y, $) => new Array(o.value).fill(0).map((c, R) => [
        f * (R + 1),
        G * ($ + 1)
      ]));
      I.points = k.reduce((y, $) => [...y, ...$], []);
    }, T = () => {
      const g = I.points[o.value * 2 - 1], _ = I.points[o.value * 2 - 3];
      I.rects = [g, _];
    }, E = () => {
      const [g, _] = t;
      I.svgScale = [F.value / g, S.value / _];
    }, q = () => {
      d(), T(), E();
    }, N = () => {
      I.mergedColor = xe(_e(x, true), r.color || []);
    };
    return watch(() => r.color, () => {
      N();
    }), onMounted(() => {
      N();
    }), (g, _) => (openBlock(), createElementBlock("div", {
      ref_key: "dvDecoration1",
      ref: n,
      class: "dv-decoration-1"
    }, [
      (openBlock(), createElementBlock("svg", {
        width: `${unref(t)[0]}px`,
        height: `${unref(t)[1]}px`,
        style: normalizeStyle(`transform:scale(${unref(I).svgScale[0]}, ${unref(I).svgScale[1]});`)
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(I).points, (f) => (openBlock(), createElementBlock(Fragment, { key: f }, [
          Math.random() > 0.6 ? (openBlock(), createElementBlock("rect", {
            key: 0,
            fill: unref(I).mergedColor[0],
            x: f[0] - unref(C),
            y: f[1] - unref(C),
            width: unref(l),
            height: unref(l)
          }, [
            Math.random() > 0.6 ? (openBlock(), createElementBlock("animate", {
              key: 0,
              attributeName: "fill",
              values: `${unref(I).mergedColor[0]};transparent`,
              dur: "1s",
              begin: Math.random() * 2,
              repeatCount: "indefinite"
            }, null, 8, Ks)) : createCommentVNode("", true)
          ], 8, Ys)) : createCommentVNode("", true)
        ], 64))), 128)),
        unref(I).rects[0] ? (openBlock(), createElementBlock("rect", {
          key: 0,
          fill: unref(I).mergedColor[1],
          x: unref(I).rects[0][0] - unref(l),
          y: unref(I).rects[0][1] - unref(l),
          width: unref(l) * 2,
          height: unref(l) * 2
        }, [
          createBaseVNode("animate", {
            attributeName: "width",
            values: `0;${unref(l) * 2}`,
            dur: "2s",
            repeatCount: "indefinite"
          }, null, 8, Zs),
          createBaseVNode("animate", {
            attributeName: "height",
            values: `0;${unref(l) * 2}`,
            dur: "2s",
            repeatCount: "indefinite"
          }, null, 8, eu),
          createBaseVNode("animate", {
            attributeName: "x",
            values: `${unref(I).rects[0][0]};${unref(I).rects[0][0] - unref(l)}`,
            dur: "2s",
            repeatCount: "indefinite"
          }, null, 8, tu),
          createBaseVNode("animate", {
            attributeName: "y",
            values: `${unref(I).rects[0][1]};${unref(I).rects[0][1] - unref(l)}`,
            dur: "2s",
            repeatCount: "indefinite"
          }, null, 8, ru)
        ], 8, Js)) : createCommentVNode("", true),
        unref(I).rects[1] ? (openBlock(), createElementBlock("rect", {
          key: 1,
          fill: unref(I).mergedColor[1],
          x: unref(I).rects[1][0] - 40,
          y: unref(I).rects[1][1] - unref(l),
          width: 40,
          height: unref(l) * 2
        }, [
          au,
          createBaseVNode("animate", {
            attributeName: "x",
            values: `${unref(I).rects[1][0]};${unref(I).rects[1][0] - 40};${unref(I).rects[1][0]}`,
            dur: "2s",
            repeatCount: "indefinite"
          }, null, 8, iu)
        ], 8, nu)) : createCommentVNode("", true)
      ], 12, Qs))
    ], 512));
  }
});
var Mr = {
  install(e) {
    e.component("DvDecoration1", ou);
  }
};
var lu = ["width", "height"];
var su = ["x", "y", "width", "height", "fill"];
var uu = ["attributeName", "to", "dur"];
var cu = ["x", "y", "fill"];
var fu = ["attributeName", "to", "dur"];
var du = defineComponent({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    },
    reverse: {
      type: Boolean,
      default: false
    },
    dur: {
      type: Number,
      default: 6
    }
  },
  setup(e) {
    const r = e, n = ref(null), t = reactive({
      x: 0,
      y: 0,
      w: 0,
      h: 0,
      defaultColor: ["#3faacb", "#fff"],
      mergedColor: []
    }), a = () => {
      t.mergedColor = xe(_e(t.defaultColor, true), r.color || []);
    }, o = () => {
      I();
    }, l = () => {
      I();
    }, { width: C, height: x } = Ce(n, o, l), I = () => {
      r.reverse ? (t.w = 1, t.h = x.value, t.x = C.value / 2, t.y = 0) : (t.w = C.value, t.h = 1, t.x = 0, t.y = x.value / 2);
    };
    return watch(() => r.color, () => {
      a();
    }), watch(() => r.reverse, () => {
      I();
    }), onMounted(() => {
      a();
    }), (W, U) => (openBlock(), createElementBlock("div", {
      ref_key: "decoration2",
      ref: n,
      class: "dv-decoration-2"
    }, [
      (openBlock(), createElementBlock("svg", {
        width: `${unref(C)}px`,
        height: `${unref(x)}px`
      }, [
        createBaseVNode("rect", {
          x: unref(t).x,
          y: unref(t).y,
          width: unref(t).w,
          height: unref(t).h,
          fill: unref(t).mergedColor[0]
        }, [
          createBaseVNode("animate", {
            attributeName: e.reverse ? "height" : "width",
            from: "0",
            to: e.reverse ? unref(x) : unref(C),
            dur: `${e.dur}s`,
            calcMode: "spline",
            keyTimes: "0;1",
            keySplines: ".42,0,.58,1",
            repeatCount: "indefinite"
          }, null, 8, uu)
        ], 8, su),
        createBaseVNode("rect", {
          x: unref(t).x,
          y: unref(t).y,
          width: "1",
          height: "1",
          fill: unref(t).mergedColor[1]
        }, [
          createBaseVNode("animate", {
            attributeName: e.reverse ? "y" : "x",
            from: "0",
            to: e.reverse ? unref(x) : unref(C),
            dur: `${e.dur}s`,
            calcMode: "spline",
            keyTimes: "0;1",
            keySplines: "0.42,0,0.58,1",
            repeatCount: "indefinite"
          }, null, 8, fu)
        ], 8, cu)
      ], 8, lu))
    ], 512));
  }
});
var Rr = {
  install(e) {
    e.component("DvDecoration2", du);
  }
};
var hu = ["width", "height"];
var vu = ["fill", "x", "y"];
var pu = ["values", "dur", "begin"];
var Mt = 7;
var gu = defineComponent({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    }
  },
  setup(e) {
    const r = e, n = ref(null), t = reactive({
      svgWH: [300, 35],
      svgScale: [1, 1],
      rowNum: 2,
      rowPoints: 25,
      pointSideLength: Mt,
      halfPointSideLength: Mt / 2,
      points: [],
      defaultColor: ["#7acaec", "transparent"],
      mergedColor: []
    }), a = () => {
      const [F, S] = t.svgWH, d = F / (t.rowPoints + 1), T = S / (t.rowNum + 1), E = new Array(t.rowNum).fill(0).map((q, N) => new Array(t.rowPoints).fill(0).map((g, _) => [
        d * (_ + 1),
        T * (N + 1)
      ]));
      t.points = E.reduce((q, N) => [...q, ...N], []);
    }, o = () => {
      l();
    }, l = () => {
      a(), W();
    }, C = () => {
      l();
    }, { width: x, height: I } = Ce(n, C, o), W = () => {
      const [F, S] = t.svgWH;
      t.svgScale = [x.value / F, I.value / S];
    }, U = () => {
      t.mergedColor = xe(_e(t.defaultColor, true), r.color || []);
    };
    return watch(() => r.color, () => {
      U();
    }), onMounted(() => {
      U();
    }), (F, S) => (openBlock(), createElementBlock("div", {
      ref_key: "decoration3",
      ref: n,
      class: "dv-decoration-3"
    }, [
      (openBlock(), createElementBlock("svg", {
        width: `${unref(t).svgWH[0]}px`,
        height: `${unref(t).svgWH[1]}px`,
        style: normalizeStyle(`transform:scale(${unref(t).svgScale[0]},${unref(t).svgScale[1]});`)
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(t).points, (d) => (openBlock(), createElementBlock("rect", {
          key: d,
          fill: unref(t).mergedColor[0],
          x: d[0] - unref(t).halfPointSideLength,
          y: d[1] - unref(t).halfPointSideLength,
          width: Mt,
          height: Mt
        }, [
          Math.random() > 0.6 ? (openBlock(), createElementBlock("animate", {
            key: 0,
            attributeName: "fill",
            values: `${unref(t).mergedColor.join(";")}`,
            dur: Math.random() + 1 + "s",
            begin: Math.random() * 2,
            repeatCount: "indefinite"
          }, null, 8, pu)) : createCommentVNode("", true)
        ], 8, vu))), 128))
      ], 12, hu))
    ], 512));
  }
});
var Dr = {
  install(e) {
    e.component("DvDecoration3", gu);
  }
};
var mu = ["width", "height"];
var yu = ["stroke", "points"];
var bu = ["stroke", "points"];
var Cu = defineComponent({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    },
    reverse: {
      type: Boolean,
      default: false
    },
    dur: {
      type: Number,
      default: 3
    }
  },
  setup(e) {
    const r = e, n = ref(null), t = reactive({
      defaultColor: ["rgba(255, 255, 255, 0.3)", "rgba(255, 255, 255, 0.3)"],
      mergedColor: []
    }), a = () => {
      t.mergedColor = xe(_e(t.defaultColor, true), r.color || []);
    }, { width: o, height: l } = Ce(n);
    return watch(() => r.color, () => {
      a();
    }), onMounted(() => {
      a();
    }), (C, x) => (openBlock(), createElementBlock("div", {
      ref_key: "decoration3",
      ref: n,
      class: "dv-decoration-4"
    }, [
      createBaseVNode("div", {
        class: normalizeClass(`container ${e.reverse ? "reverse" : "normal"}`),
        style: normalizeStyle(e.reverse ? `width:${unref(o)}px;height:5px;animation-duration:${e.dur}s` : `width:5px;height:${unref(l)}px;animation-duration:${e.dur}s`)
      }, [
        (openBlock(), createElementBlock("svg", {
          width: e.reverse ? unref(o) : 5,
          height: e.reverse ? 5 : unref(l)
        }, [
          createBaseVNode("polyline", {
            stroke: unref(t).mergedColor[0],
            points: e.reverse ? `0, 2.5 ${unref(o)}, 2.5` : `2.5, 0 2.5, ${unref(l)}`
          }, null, 8, yu),
          createBaseVNode("polyline", {
            class: "bold-line",
            stroke: unref(t).mergedColor[1],
            "stroke-width": "3",
            "stroke-dasharray": "20, 80",
            "stroke-dashoffset": "-30",
            points: e.reverse ? `0, 2.5 ${unref(o)}, 2.5` : `2.5, 0 2.5, ${unref(l)}`
          }, null, 8, bu)
        ], 8, mu))
      ], 6)
    ], 512));
  }
});
var Tr = {
  install(e) {
    e.component("DvDecoration4", Cu);
  }
};
var xu = ["width", "height"];
var $u = ["stroke", "points"];
var _u = ["from", "to", "dur"];
var Pu = ["stroke", "points"];
var wu = ["from", "to", "dur"];
var ku = defineComponent({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    },
    dur: {
      type: Number,
      default: 1.2
    }
  },
  setup(e) {
    const r = e, n = ref(null), t = reactive({
      line1Points: "",
      line2Points: "",
      line1Length: 0,
      line2Length: 0,
      defaultColor: ["#3f96a5", "#3f96a5"],
      mergedColor: []
    }), a = () => {
      x();
    }, o = () => {
      x();
    }, { width: l, height: C } = Ce(n, o, a), x = () => {
      const W = [
        { x: 0, y: C.value * 0.2 },
        { x: l.value * 0.18, y: C.value * 0.2 },
        { x: l.value * 0.2, y: C.value * 0.4 },
        { x: l.value * 0.25, y: C.value * 0.4 },
        { x: l.value * 0.27, y: C.value * 0.6 },
        { x: l.value * 0.72, y: C.value * 0.6 },
        { x: l.value * 0.75, y: C.value * 0.4 },
        { x: l.value * 0.8, y: C.value * 0.4 },
        { x: l.value * 0.82, y: C.value * 0.2 },
        { x: l.value, y: C.value * 0.2 }
      ], U = [
        { x: l.value * 0.3, y: C.value * 0.8 },
        { x: l.value * 0.7, y: C.value * 0.8 }
      ], F = fn(W), S = fn(U);
      t.line1Points = dn(W), t.line2Points = dn(U), t.line1Length = F, t.line2Length = S;
    }, I = () => {
      t.mergedColor = xe(_e(t.defaultColor, true), r.color || []);
    };
    return watch(() => r.color, () => {
      I();
    }), onMounted(() => {
      I();
    }), (W, U) => (openBlock(), createElementBlock("div", {
      ref_key: "decoration5",
      ref: n,
      class: "dv-decoration-5"
    }, [
      (openBlock(), createElementBlock("svg", {
        width: unref(l),
        height: unref(C)
      }, [
        createBaseVNode("polyline", {
          fill: "transparent",
          stroke: unref(t).mergedColor[0],
          "stroke-width": "3",
          points: unref(t).line1Points
        }, [
          createBaseVNode("animate", {
            attributeName: "stroke-dasharray",
            attributeType: "XML",
            from: `0, ${unref(t).line1Length / 2}, 0, ${unref(t).line1Length / 2}`,
            to: `0, 0, ${unref(t).line1Length}, 0`,
            dur: `${e.dur}s`,
            begin: "0s",
            calcMode: "spline",
            keyTimes: "0;1",
            keySplines: "0.4,1,0.49,0.98",
            repeatCount: "indefinite"
          }, null, 8, _u)
        ], 8, $u),
        createBaseVNode("polyline", {
          fill: "transparent",
          stroke: unref(t).mergedColor[1],
          "stroke-width": "2",
          points: unref(t).line2Points
        }, [
          createBaseVNode("animate", {
            attributeName: "stroke-dasharray",
            attributeType: "XML",
            from: `0, ${unref(t).line2Length / 2}, 0, ${unref(t).line2Length / 2}`,
            to: `0, 0, ${unref(t).line2Length}, 0`,
            dur: `${e.dur}s`,
            begin: "0s",
            calcMode: "spline",
            keyTimes: "0;1",
            keySplines: ".4,1,.49,.98",
            repeatCount: "indefinite"
          }, null, 8, wu)
        ], 8, Pu)
      ], 8, xu))
    ], 512));
  }
});
var Br = {
  install(e) {
    e.component("DvDecoration5", ku);
  }
};
var Au = ["width", "height"];
var Lu = ["fill", "x", "y", "height"];
var Su = ["values", "dur"];
var Ou = ["values", "dur"];
var Fr = 7;
var Gu = defineComponent({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    }
  },
  setup(e) {
    const r = e, n = ref(null), t = reactive({
      svgWH: [300, 35],
      svgScale: [1, 1],
      rowNum: 1,
      rowPoints: 40,
      rectWidth: Fr,
      halfRectWidth: Fr / 2,
      points: [],
      heights: [],
      minHeights: [],
      randoms: [],
      defaultColor: ["#7acaec", "#7acaec"],
      mergedColor: []
    });
    watch(() => r.color, () => {
      U();
    }), onMounted(() => {
      U();
    });
    const { width: a, height: o } = Ce(n, W, l);
    function l() {
      C();
    }
    function C() {
      x(), I();
    }
    function x() {
      const [F, S] = t.svgWH, d = F / (t.rowPoints + 1), T = S / (t.rowNum + 1), E = new Array(t.rowNum).fill(0).map((N, g) => new Array(t.rowPoints).fill(0).map((_, f) => [
        d * (f + 1),
        T * (g + 1)
      ]));
      t.points = E.reduce((N, g) => [...N, ...g], []);
      const q = t.heights = new Array(t.rowNum * t.rowPoints).fill(0).map((N) => Math.random() > 0.8 ? ht(0.7 * S, S) : ht(0.2 * S, 0.5 * S));
      t.minHeights = new Array(t.rowNum * t.rowPoints).fill(0).map((N, g) => q[g] * Math.random()), t.randoms = new Array(t.rowNum * t.rowPoints).fill(0).map((N) => Math.random() + 1.5);
    }
    function I() {
      const [F, S] = t.svgWH;
      t.svgScale = [a.value / F, o.value / S];
    }
    function W() {
      C();
    }
    function U() {
      t.mergedColor = xe(_e(t.defaultColor, true), r.color || []);
    }
    return (F, S) => (openBlock(), createElementBlock("div", {
      ref_key: "decoration6",
      ref: n,
      class: "dv-decoration-6"
    }, [
      (openBlock(), createElementBlock("svg", {
        width: `${unref(t).svgWH[0]}px`,
        height: `${unref(t).svgWH[1]}px`,
        style: normalizeStyle(`transform:scale(${unref(t).svgScale[0]},${unref(t).svgScale[1]});`)
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(t).points, (d, T) => (openBlock(), createElementBlock("rect", {
          key: T,
          fill: unref(t).mergedColor[Math.random() > 0.5 ? 0 : 1],
          x: d[0] - unref(t).halfRectWidth,
          y: d[1] - unref(t).heights[T] / 2,
          width: Fr,
          height: unref(t).heights[T]
        }, [
          createBaseVNode("animate", {
            attributeName: "y",
            values: `${d[1] - unref(t).minHeights[T] / 2};${d[1] - unref(t).heights[T] / 2};${d[1] - unref(t).minHeights[T] / 2}`,
            dur: `${unref(t).randoms[T]}s`,
            keyTimes: "0;0.5;1",
            calcMode: "spline",
            keySplines: "0.42,0,0.58,1;0.42,0,0.58,1",
            begin: "0s",
            repeatCount: "indefinite"
          }, null, 8, Su),
          createBaseVNode("animate", {
            attributeName: "height",
            values: `${unref(t).minHeights[T]};${unref(t).heights[T]};${unref(t).minHeights[T]}`,
            dur: `${unref(t).randoms[T]}s`,
            keyTimes: "0;0.5;1",
            calcMode: "spline",
            keySplines: "0.42,0,0.58,1;0.42,0,0.58,1",
            begin: "0s",
            repeatCount: "indefinite"
          }, null, 8, Ou)
        ], 8, Lu))), 128))
      ], 12, Au))
    ], 512));
  }
});
var Nr = {
  install(e) {
    e.component("DvDecoration6", Gu);
  }
};
var Mu = { class: "dv-decoration-7" };
var Ru = {
  width: "21px",
  height: "20px"
};
var Du = ["stroke"];
var Tu = ["stroke"];
var Bu = {
  width: "21px",
  height: "20px"
};
var Fu = ["stroke"];
var Nu = ["stroke"];
var Wu = defineComponent({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    }
  },
  setup(e) {
    const r = e, n = reactive({
      defaultColor: ["#1dc1f5", "#1dc1f5"],
      mergedColor: []
    });
    watch(() => r.color, () => {
      t();
    }), onMounted(() => {
      t();
    });
    function t() {
      n.mergedColor = xe(_e(n.defaultColor, true), r.color || []);
    }
    return (a, o) => (openBlock(), createElementBlock("div", Mu, [
      (openBlock(), createElementBlock("svg", Ru, [
        createBaseVNode("polyline", {
          "stroke-width": "4",
          fill: "transparent",
          stroke: unref(n).mergedColor[0],
          points: "10, 0 19, 10 10, 20"
        }, null, 8, Du),
        createBaseVNode("polyline", {
          "stroke-width": "2",
          fill: "transparent",
          stroke: unref(n).mergedColor[1],
          points: "2, 0 11, 10 2, 20"
        }, null, 8, Tu)
      ])),
      renderSlot(a.$slots, "default"),
      (openBlock(), createElementBlock("svg", Bu, [
        createBaseVNode("polyline", {
          "stroke-width": "4",
          fill: "transparent",
          stroke: unref(n).mergedColor[0],
          points: "11, 0 2, 10 11, 20"
        }, null, 8, Fu),
        createBaseVNode("polyline", {
          "stroke-width": "2",
          fill: "transparent",
          stroke: unref(n).mergedColor[1],
          points: "19, 0 10, 10 19, 20"
        }, null, 8, Nu)
      ]))
    ]));
  }
});
var Wr = {
  install(e) {
    e.component("DvDecoration7", Wu);
  }
};
var Eu = ["width", "height"];
var ju = ["stroke", "points"];
var zu = ["stroke", "points"];
var qu = ["stroke", "points"];
var Iu = defineComponent({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    },
    reverse: {
      type: Boolean,
      default: false
    }
  },
  setup(e) {
    const r = e, n = ref(null), t = reactive({
      defaultColor: ["#3f96a5", "#3f96a5"],
      mergedColor: []
    });
    watch(() => r.color, () => {
      C();
    }), onMounted(() => {
      C();
    });
    const { width: a, height: o } = Ce(n);
    function l(x) {
      return r.reverse ? a.value - x : x;
    }
    function C() {
      t.mergedColor = xe(_e(t.defaultColor, true), r.color || []);
    }
    return (x, I) => (openBlock(), createElementBlock("div", {
      ref_key: "decoration8",
      ref: n,
      class: "dv-decoration-8"
    }, [
      (openBlock(), createElementBlock("svg", {
        width: unref(a),
        height: unref(o)
      }, [
        createBaseVNode("polyline", {
          stroke: unref(t).mergedColor[0],
          "stroke-width": "2",
          fill: "transparent",
          points: `${l(0)}, 0 ${l(30)}, ${unref(o) / 2}`
        }, null, 8, ju),
        createBaseVNode("polyline", {
          stroke: unref(t).mergedColor[0],
          "stroke-width": "2",
          fill: "transparent",
          points: `${l(20)}, 0 ${l(50)}, ${unref(o) / 2} ${l(unref(a))}, ${unref(o) / 2}`
        }, null, 8, zu),
        createBaseVNode("polyline", {
          stroke: unref(t).mergedColor[1],
          fill: "transparent",
          "stroke-width": "3",
          points: `${l(0)}, ${unref(o) - 3}, ${l(200)}, ${unref(o) - 3}`
        }, null, 8, qu)
      ], 8, Eu))
    ], 512));
  }
});
var Er = {
  install(e) {
    e.component("DvDecoration8", Iu);
  }
};
var Hu = ["width", "height"];
var Vu = ["id"];
var Uu = ["stroke"];
var Xu = ["dur"];
var Qu = ["stroke"];
var Yu = ["dur"];
var Ku = ["stroke"];
var Ju = ["xlink:href", "stroke", "fill"];
var Zu = ["dur", "begin"];
var ec = ["stroke"];
var tc = {
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    },
    dur: {
      type: Number,
      default: 3
    }
  },
  setup(e) {
    const r = e, n = He(), t = ref(null), a = reactive({
      polygonId: `decoration-9-polygon-${n}`,
      svgWH: [100, 100],
      svgScale: [1, 1],
      defaultColor: ["rgba(3, 166, 224, 0.8)", "rgba(3, 166, 224, 0.5)"],
      mergedColor: []
    });
    watch(() => r.color, () => {
      W();
    }), onMounted(() => {
      W();
    });
    const { width: o, height: l } = Ce(t, I, C);
    function C() {
      x();
    }
    function x() {
      const [U, F] = a.svgWH;
      a.svgScale = [o.value / U, l.value / F];
    }
    function I() {
      x();
    }
    function W() {
      a.mergedColor = xe(_e(a.defaultColor, true), r.color || []);
    }
    return (U, F) => (openBlock(), createElementBlock("div", {
      ref_key: "decoration9",
      ref: t,
      class: "dv-decoration-9"
    }, [
      (openBlock(), createElementBlock("svg", {
        width: `${unref(a).svgWH[0]}px`,
        height: `${unref(a).svgWH[1]}px`,
        style: normalizeStyle(`transform:scale(${unref(a).svgScale[0]},${unref(a).svgScale[1]});`)
      }, [
        createBaseVNode("defs", null, [
          createBaseVNode("polygon", {
            id: unref(a).polygonId,
            points: "15, 46.5, 21, 47.5, 21, 52.5, 15, 53.5"
          }, null, 8, Vu)
        ]),
        createBaseVNode("circle", {
          cx: "50",
          cy: "50",
          r: "45",
          fill: "transparent",
          stroke: unref(a).mergedColor[1],
          "stroke-width": "10",
          "stroke-dasharray": "80, 100, 30, 100"
        }, [
          createBaseVNode("animateTransform", {
            attributeName: "transform",
            type: "rotate",
            values: "0 50 50;360 50 50",
            dur: `${e.dur}s`,
            repeatCount: "indefinite"
          }, null, 8, Xu)
        ], 8, Uu),
        createBaseVNode("circle", {
          cx: "50",
          cy: "50",
          r: "45",
          fill: "transparent",
          stroke: unref(a).mergedColor[0],
          "stroke-width": "6",
          "stroke-dasharray": "50, 66, 100, 66"
        }, [
          createBaseVNode("animateTransform", {
            attributeName: "transform",
            type: "rotate",
            values: "0 50 50;-360 50 50",
            dur: `${e.dur}s`,
            repeatCount: "indefinite"
          }, null, 8, Yu)
        ], 8, Qu),
        createBaseVNode("circle", {
          cx: "50",
          cy: "50",
          r: "38",
          fill: "transparent",
          stroke: unref(De)(unref(a).mergedColor[1] || unref(a).defaultColor[1], 30),
          "stroke-width": "1",
          "stroke-dasharray": "5, 1"
        }, null, 8, Ku),
        (openBlock(true), createElementBlock(Fragment, null, renderList(new Array(20).fill(0), (S, d) => (openBlock(), createElementBlock("use", {
          key: d,
          "xlink:href": `#${unref(a).polygonId}`,
          stroke: unref(a).mergedColor[1],
          fill: Math.random() > 0.4 ? "transparent" : unref(a).mergedColor[0]
        }, [
          createBaseVNode("animateTransform", {
            attributeName: "transform",
            type: "rotate",
            values: "0 50 50;360 50 50",
            dur: `${e.dur}s`,
            begin: `${d * e.dur / 20}s`,
            repeatCount: "indefinite"
          }, null, 8, Zu)
        ], 8, Ju))), 128)),
        createBaseVNode("circle", {
          cx: "50",
          cy: "50",
          r: "26",
          fill: "transparent",
          stroke: unref(De)(unref(a).mergedColor[1] || unref(a).defaultColor[1], 30),
          "stroke-width": "1",
          "stroke-dasharray": "5, 1"
        }, null, 8, ec)
      ], 12, Hu)),
      renderSlot(U.$slots, "default")
    ], 512));
  }
};
var jr = {
  install(e) {
    e.component("DvDecoration9", tc);
  }
};
var rc = ["width", "height"];
var nc = ["stroke", "points"];
var ac = ["stroke", "points", "stroke-dasharray"];
var ic = ["id", "values", "begin"];
var oc = ["values", "begin"];
var lc = ["stroke", "points", "stroke-dasharray"];
var sc = ["id", "values", "begin"];
var uc = ["values", "begin"];
var cc = ["stroke", "points", "stroke-dasharray"];
var fc = ["id", "values", "begin"];
var dc = ["values", "begin"];
var hc = ["cy", "fill"];
var vc = ["id", "values", "begin"];
var pc = ["cx", "cy", "fill"];
var gc = ["id", "values", "begin"];
var mc = ["values", "begin"];
var yc = ["cx", "cy", "fill"];
var bc = ["id", "values", "begin"];
var Cc = ["values", "begin"];
var xc = ["cx", "cy", "fill"];
var $c = ["id", "values", "begin"];
var _c = ["values", "begin"];
var Pc = defineComponent({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    }
  },
  setup(e) {
    const r = e, n = He(), t = ref(null), a = reactive({
      animationId1: `d10ani1${n}`,
      animationId2: `d10ani2${n}`,
      animationId3: `d10ani3${n}`,
      animationId4: `d10ani4${n}`,
      animationId5: `d10ani5${n}`,
      animationId6: `d10ani6${n}`,
      animationId7: `d10ani7${n}`,
      defaultColor: ["#00c2ff", "rgba(0, 194, 255, 0.3)"],
      mergedColor: []
    }), { width: o, height: l } = Ce(t);
    watch(() => r.color, () => {
      C();
    }), onMounted(() => {
      C();
    });
    function C() {
      a.mergedColor = xe(_e(a.defaultColor, true), r.color || []);
    }
    return (x, I) => (openBlock(), createElementBlock("div", {
      ref_key: "decoration10",
      ref: t,
      class: "dv-decoration-10"
    }, [
      (openBlock(), createElementBlock("svg", {
        width: unref(o),
        height: unref(l)
      }, [
        createBaseVNode("polyline", {
          stroke: unref(a).mergedColor[1],
          "stroke-width": "2",
          points: `0, ${unref(l) / 2} ${unref(o)}, ${unref(l) / 2}`
        }, null, 8, nc),
        createBaseVNode("polyline", {
          stroke: unref(a).mergedColor[0],
          "stroke-width": "2",
          points: `5, ${unref(l) / 2} ${unref(o) * 0.2 - 3}, ${unref(l) / 2}`,
          "stroke-dasharray": `0, ${unref(o) * 0.2}`,
          fill: "freeze"
        }, [
          createBaseVNode("animate", {
            id: unref(a).animationId2,
            attributeName: "stroke-dasharray",
            values: `0, ${unref(o) * 0.2};${unref(o) * 0.2}, 0;`,
            dur: "3s",
            begin: `${unref(a).animationId1}.end`,
            fill: "freeze"
          }, null, 8, ic),
          createBaseVNode("animate", {
            attributeName: "stroke-dasharray",
            values: `${unref(o) * 0.2}, 0;0, ${unref(o) * 0.2}`,
            dur: "0.01s",
            begin: `${unref(a).animationId7}.end`,
            fill: "freeze"
          }, null, 8, oc)
        ], 8, ac),
        createBaseVNode("polyline", {
          stroke: unref(a).mergedColor[0],
          "stroke-width": "2",
          points: `${unref(o) * 0.2 + 3}, ${unref(l) / 2} ${unref(o) * 0.8 - 3}, ${unref(l) / 2}`,
          "stroke-dasharray": `0, ${unref(o) * 0.6}`
        }, [
          createBaseVNode("animate", {
            id: unref(a).animationId4,
            attributeName: "stroke-dasharray",
            values: `0, ${unref(o) * 0.6};${unref(o) * 0.6}, 0`,
            dur: "3s",
            begin: `${unref(a).animationId3}.end + 1s`,
            fill: "freeze"
          }, null, 8, sc),
          createBaseVNode("animate", {
            attributeName: "stroke-dasharray",
            values: `${unref(o) * 0.6}, 0;0, ${unref(o) * 0.6}`,
            dur: "0.01s",
            begin: `${unref(a).animationId7}.end`,
            fill: "freeze"
          }, null, 8, uc)
        ], 8, lc),
        createBaseVNode("polyline", {
          stroke: unref(a).mergedColor[0],
          "stroke-width": "2",
          points: `${unref(o) * 0.8 + 3}, ${unref(l) / 2} ${unref(o) - 5}, ${unref(l) / 2}`,
          "stroke-dasharray": `0, ${unref(o) * 0.2}`
        }, [
          createBaseVNode("animate", {
            id: unref(a).animationId6,
            attributeName: "stroke-dasharray",
            values: `0, ${unref(o) * 0.2};${unref(o) * 0.2}, 0`,
            dur: "3s",
            begin: `${unref(a).animationId5}.end + 1s`,
            fill: "freeze"
          }, null, 8, fc),
          createBaseVNode("animate", {
            attributeName: "stroke-dasharray",
            values: `${unref(o) * 0.2}, 0;0, ${unref(o) * 0.3}`,
            dur: "0.01s",
            begin: `${unref(a).animationId7}.end`,
            fill: "freeze"
          }, null, 8, dc)
        ], 8, cc),
        createBaseVNode("circle", {
          cx: "2",
          cy: unref(l) / 2,
          r: "2",
          fill: unref(a).mergedColor[1]
        }, [
          createBaseVNode("animate", {
            id: unref(a).animationId1,
            attributeName: "fill",
            values: `${unref(a).mergedColor[1]};${unref(a).mergedColor[0]}`,
            begin: `0s;${unref(a).animationId7}.end`,
            dur: "0.3s",
            fill: "freeze"
          }, null, 8, vc)
        ], 8, hc),
        createBaseVNode("circle", {
          cx: unref(o) * 0.2,
          cy: unref(l) / 2,
          r: "2",
          fill: unref(a).mergedColor[1]
        }, [
          createBaseVNode("animate", {
            id: unref(a).animationId3,
            attributeName: "fill",
            values: `${unref(a).mergedColor[1]};${unref(a).mergedColor[0]}`,
            begin: `${unref(a).animationId2}.end`,
            dur: "0.3s",
            fill: "freeze"
          }, null, 8, gc),
          createBaseVNode("animate", {
            attributeName: "fill",
            values: `${unref(a).mergedColor[1]};${unref(a).mergedColor[1]}`,
            dur: "0.01s",
            begin: `${unref(a).animationId7}.end`,
            fill: "freeze"
          }, null, 8, mc)
        ], 8, pc),
        createBaseVNode("circle", {
          cx: unref(o) * 0.8,
          cy: unref(l) / 2,
          r: "2",
          fill: unref(a).mergedColor[1]
        }, [
          createBaseVNode("animate", {
            id: unref(a).animationId5,
            attributeName: "fill",
            values: `${unref(a).mergedColor[1]};${unref(a).mergedColor[0]}`,
            begin: `${unref(a).animationId4}.end`,
            dur: "0.3s",
            fill: "freeze"
          }, null, 8, bc),
          createBaseVNode("animate", {
            attributeName: "fill",
            values: `${unref(a).mergedColor[1]};${unref(a).mergedColor[1]}`,
            dur: "0.01s",
            begin: `${unref(a).animationId7}.end`,
            fill: "freeze"
          }, null, 8, Cc)
        ], 8, yc),
        createBaseVNode("circle", {
          cx: unref(o) - 2,
          cy: unref(l) / 2,
          r: "2",
          fill: unref(a).mergedColor[1]
        }, [
          createBaseVNode("animate", {
            id: unref(a).animationId7,
            attributeName: "fill",
            values: `${unref(a).mergedColor[1]};${unref(a).mergedColor[0]}`,
            begin: `${unref(a).animationId6}.end`,
            dur: "0.3s",
            fill: "freeze"
          }, null, 8, $c),
          createBaseVNode("animate", {
            attributeName: "fill",
            values: `${unref(a).mergedColor[1]};${unref(a).mergedColor[1]}`,
            dur: "0.01s",
            begin: `${unref(a).animationId7}.end`,
            fill: "freeze"
          }, null, 8, _c)
        ], 8, xc)
      ], 8, rc))
    ], 512));
  }
});
var zr = {
  install(e) {
    e.component("DvDecoration10", Pc);
  }
};
var wc = ["width", "height"];
var kc = ["fill", "stroke"];
var Ac = ["fill", "stroke", "points"];
var Lc = ["fill", "stroke", "points"];
var Sc = ["fill", "stroke", "points"];
var Oc = ["fill", "stroke", "points"];
var Gc = ["stroke", "points"];
var Mc = ["stroke", "points"];
var Rc = { class: "decoration-content" };
var Dc = {
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    }
  },
  setup(e) {
    const r = e, n = ref(null), t = reactive({
      defaultColor: ["#1a98fc", "#2cf7fe"],
      mergedColor: []
    }), { width: a, height: o } = Ce(n);
    watch(() => r.color, () => {
      l();
    }), onMounted(() => {
      l();
    });
    function l() {
      t.mergedColor = xe(_e(t.defaultColor, true), r.color || []);
    }
    return (C, x) => (openBlock(), createElementBlock("div", {
      ref_key: "decoration11",
      ref: n,
      class: "dv-decoration-11"
    }, [
      (openBlock(), createElementBlock("svg", {
        width: unref(a),
        height: unref(o)
      }, [
        createBaseVNode("polygon", {
          fill: unref(De)(unref(t).mergedColor[1] || unref(t).defaultColor[1], 10),
          stroke: unref(t).mergedColor[1],
          points: "20 10, 25 4, 55 4 60 10"
        }, null, 8, kc),
        createBaseVNode("polygon", {
          fill: unref(De)(unref(t).mergedColor[1] || unref(t).defaultColor[1], 10),
          stroke: unref(t).mergedColor[1],
          points: `20 ${unref(o) - 10}, 25 ${unref(o) - 4}, 55 ${unref(o) - 4} 60 ${unref(o) - 10}`
        }, null, 8, Ac),
        createBaseVNode("polygon", {
          fill: unref(De)(unref(t).mergedColor[1] || unref(t).defaultColor[1], 10),
          stroke: unref(t).mergedColor[1],
          points: `${unref(a) - 20} 10, ${unref(a) - 25} 4, ${unref(a) - 55} 4 ${unref(a) - 60} 10`
        }, null, 8, Lc),
        createBaseVNode("polygon", {
          fill: unref(De)(unref(t).mergedColor[1] || unref(t).defaultColor[1], 10),
          stroke: unref(t).mergedColor[1],
          points: `${unref(a) - 20} ${unref(o) - 10}, ${unref(a) - 25} ${unref(o) - 4}, ${unref(a) - 55} ${unref(o) - 4} ${unref(a) - 60} ${unref(o) - 10}`
        }, null, 8, Sc),
        createBaseVNode("polygon", {
          fill: unref(De)(unref(t).mergedColor[0] || unref(t).defaultColor[0], 20),
          stroke: unref(t).mergedColor[0],
          points: `
          20 10, 5 ${unref(o) / 2} 20 ${unref(o) - 10}
          ${unref(a) - 20} ${unref(o) - 10} ${unref(a) - 5} ${unref(o) / 2} ${unref(a) - 20} 10
        `
        }, null, 8, Oc),
        createBaseVNode("polyline", {
          fill: "transparent",
          stroke: unref(De)(unref(t).mergedColor[0] || unref(t).defaultColor[0], 70),
          points: `25 18, 15 ${unref(o) / 2} 25 ${unref(o) - 18}`
        }, null, 8, Gc),
        createBaseVNode("polyline", {
          fill: "transparent",
          stroke: unref(De)(unref(t).mergedColor[0] || unref(t).defaultColor[0], 70),
          points: `${unref(a) - 25} 18, ${unref(a) - 15} ${unref(o) / 2} ${unref(a) - 25} ${unref(o) - 18}`
        }, null, 8, Mc)
      ], 8, wc)),
      createBaseVNode("div", Rc, [
        renderSlot(C.$slots, "default")
      ])
    ], 512));
  }
};
var qr = {
  install(e) {
    e.component("DvDecoration11", Dc);
  }
};
var Tc = ["width", "height"];
var Bc = ["id"];
var Fc = ["stroke", "stroke-width", "d"];
var Nc = ["id"];
var Wc = createBaseVNode("stop", {
  offset: "0%",
  "stop-color": "transparent",
  "stop-opacity": "1"
}, null, -1);
var Ec = ["stop-color"];
var jc = ["r", "cx", "cy", "stroke"];
var zc = ["cx", "cy", "fill"];
var qc = ["values", "dur"];
var Ic = ["dur"];
var Hc = ["cx", "cy", "fill"];
var Vc = { key: 0 };
var Uc = ["points", "stroke"];
var Xc = ["d", "stroke"];
var Qc = ["xlink:href"];
var Yc = ["values", "dur"];
var Kc = { class: "decoration-content" };
var Jc = {
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    },
    /**
       * @description Scan animation dur
       */
    scanDur: {
      type: Number,
      default: 3
    },
    /**
       * @description Halo animation dur
       */
    haloDur: {
      type: Number,
      default: 2
    }
  },
  setup(e) {
    const r = e, n = He(), t = ref(null), { width: a, height: o } = Ce(t, () => {
    }, E), l = reactive({
      gId: `decoration-12-g-${n}`,
      gradientId: `decoration-12-gradient-${n}`,
      defaultColor: ["#2783ce", "#2cf7fe"],
      mergedColor: [],
      pathD: [],
      pathColor: [],
      circleR: [],
      splitLinePoints: [],
      arcD: [],
      segment: 30,
      sectorAngle: Math.PI / 3,
      ringNum: 3,
      ringWidth: 1,
      showSplitLine: true
    }), C = computed(() => a.value / 2), x = computed(() => o.value / 2);
    watch(() => r.color, () => {
      W(), F();
    });
    function I() {
      W(), U(), F(), S(), d(), T();
    }
    function W() {
      l.mergedColor = xe(_e(l.defaultColor, true), r.color || []);
    }
    function U() {
      const q = -Math.PI / 2, N = l.sectorAngle / l.segment, g = a.value / 4;
      let _ = et(C.value, x.value, g, q);
      l.pathD = new Array(l.segment).fill("").map((f, G) => {
        const k = et(C.value, x.value, g, q - (G + 1) * N).map(($) => parseFloat($.toFixed(5))), y = `M${_.join(",")} A${g}, ${g} 0 0 0 ${k.join(",")}`;
        return _ = k, y;
      });
    }
    function F() {
      const q = 100 / (l.segment - 1);
      l.pathColor = new Array(l.segment).fill(l.mergedColor[0]).map((N, g) => De(l.mergedColor[0], 100 - g * q));
    }
    function S() {
      const q = (a.value / 2 - l.ringWidth / 2) / l.ringNum;
      l.circleR = new Array(l.ringNum).fill(0).map((N, g) => q * (g + 1));
    }
    function d() {
      const q = Math.PI / 6, N = a.value / 2;
      l.splitLinePoints = new Array(6).fill("").map((g, _) => {
        const f = q * (_ + 1), G = f + Math.PI, k = et(C.value, x.value, N, f), y = et(C.value, x.value, N, G);
        return `${k.join(",")} ${y.join(",")}`;
      });
    }
    function T() {
      const q = Math.PI / 6, N = a.value / 2 - 1;
      l.arcD = new Array(4).fill("").map((g, _) => {
        const f = q * (3 * _ + 1), G = f + q, k = et(C.value, x.value, N, f), y = et(C.value, x.value, N, G);
        return `M${k.join(",")} A${C.value}, ${x.value} 0 0 1 ${y.join(",")}`;
      });
    }
    function E() {
      I();
    }
    return (q, N) => (openBlock(), createElementBlock("div", {
      ref_key: "decoration12",
      ref: t,
      class: "dv-decoration-12"
    }, [
      (openBlock(), createElementBlock("svg", {
        width: unref(a),
        height: unref(o)
      }, [
        createBaseVNode("defs", null, [
          createBaseVNode("g", {
            id: unref(l).gId
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(l).pathD, (g, _) => (openBlock(), createElementBlock("path", {
              key: g,
              stroke: unref(l).pathColor[_],
              "stroke-width": unref(a) / 2,
              fill: "transparent",
              d: g
            }, null, 8, Fc))), 128))
          ], 8, Bc),
          createBaseVNode("radialGradient", {
            id: unref(l).gradientId,
            cx: "50%",
            cy: "50%",
            r: "50%"
          }, [
            Wc,
            createBaseVNode("stop", {
              offset: "100%",
              "stop-color": unref(De)(unref(l).mergedColor[1] || unref(l).defaultColor[1], 30),
              "stop-opacity": "1"
            }, null, 8, Ec)
          ], 8, Nc)
        ]),
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(l).circleR, (g) => (openBlock(), createElementBlock("circle", {
          key: g,
          r: g,
          cx: unref(C),
          cy: unref(x),
          stroke: unref(l).mergedColor[1],
          "stroke-width": 0.8,
          fill: "transparent"
        }, null, 8, jc))), 128)),
        createBaseVNode("circle", {
          r: "1",
          cx: unref(C),
          cy: unref(x),
          stroke: "transparent",
          fill: `url(#${unref(l).gradientId})`
        }, [
          createBaseVNode("animate", {
            attributeName: "r",
            values: `1;${unref(a) / 2}`,
            dur: `${e.haloDur}s`,
            repeatCount: "indefinite"
          }, null, 8, qc),
          createBaseVNode("animate", {
            attributeName: "opacity",
            values: "1;0",
            dur: `${e.haloDur}s`,
            repeatCount: "indefinite"
          }, null, 8, Ic)
        ], 8, zc),
        createBaseVNode("circle", {
          r: "2",
          cx: unref(C),
          cy: unref(x),
          fill: unref(l).mergedColor[1]
        }, null, 8, Hc),
        unref(l).showSplitLine ? (openBlock(), createElementBlock("g", Vc, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(unref(l).splitLinePoints, (g) => (openBlock(), createElementBlock("polyline", {
            key: g,
            points: g,
            stroke: unref(l).mergedColor[1],
            "stroke-width": 0.5,
            opacity: "50"
          }, null, 8, Uc))), 128))
        ])) : createCommentVNode("", true),
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(l).arcD, (g) => (openBlock(), createElementBlock("path", {
          key: g,
          d: g,
          stroke: unref(l).mergedColor[1],
          "stroke-width": "2.3",
          fill: "transparent"
        }, null, 8, Xc))), 128)),
        createBaseVNode("use", {
          "xlink:href": `#${unref(l).gId}`
        }, [
          createBaseVNode("animateTransform", {
            attributeName: "transform",
            type: "rotate",
            values: `0, ${unref(C)} ${unref(x)};360, ${unref(C)} ${unref(x)}`,
            dur: `${e.scanDur}s`,
            repeatCount: "indefinite"
          }, null, 8, Yc)
        ], 8, Qc)
      ], 8, Tc)),
      createBaseVNode("div", Kc, [
        renderSlot(q.$slots, "default")
      ])
    ], 512));
  }
};
var Ir = {
  install(e) {
    e.component("DvDecoration12", Jc);
  }
};
var qe = {
  color: {
    type: Array,
    default: () => []
  },
  backgroundColor: {
    type: String,
    default: "transparent"
  }
};
function Ie(e, r) {
  return computed(() => r.value.length === 0 ? e : r.value);
}
var Zc = ["left-top", "right-top", "left-bottom", "right-bottom"];
var ef = ["#4fd2dd", "#235fa7"];
var tf = defineComponent({
  props: qe,
  setup(e) {
    const r = ref(null), n = Ie(ef, toRef(e, "color")), {
      width: t,
      height: a,
      initWH: o
    } = Ce(r);
    return {
      width: t,
      height: a,
      initWH: o,
      mergedColor: n,
      borderBox1: r
    };
  },
  render() {
    const {
      backgroundColor: e,
      width: r,
      height: n,
      mergedColor: t,
      $slots: a
    } = this;
    return createVNode("div", {
      ref: "borderBox1",
      class: "dv-border-box-1"
    }, [createVNode("svg", {
      class: "dv-border",
      width: r,
      height: n
    }, [createVNode("polygon", {
      fill: e,
      points: `10, 27 10, ${n - 27} 13, ${n - 24} 13, ${n - 21} 24, ${n - 11}
      38, ${n - 11} 41, ${n - 8} 73, ${n - 8} 75, ${n - 10} 81, ${n - 10}
      85, ${n - 6} ${r - 85}, ${n - 6} ${r - 81}, ${n - 10} ${r - 75}, ${n - 10}
      ${r - 73}, ${n - 8} ${r - 41}, ${n - 8} ${r - 38}, ${n - 11}
      ${r - 10}, ${n - 27} ${r - 10}, 27 ${r - 13}, 25 ${r - 13}, 21
      ${r - 24}, 11 ${r - 38}, 11 ${r - 41}, 8 ${r - 73}, 8 ${r - 75}, 10
      ${r - 81}, 10 ${r - 85}, 6 85, 6 81, 10 75, 10 73, 8 41, 8 38, 11 24, 11 13, 21 13, 24`
    }, null)]), Zc.map((o) => createVNode("svg", {
      key: o,
      width: "150px",
      height: "150px",
      class: `${o} dv-border`
    }, [createVNode("polygon", {
      fill: t[0],
      points: "6,66 6,18 12,12 18,12 24,6 27,6 30,9 36,9 39,6 84,6 81,9 75,9 73.2,7 40.8,7 37.8,10.2 24,10.2 12,21 12,24 9,27 9,51 7.8,54 7.8,63"
    }, [createVNode("animate", {
      attributeName: "fill",
      values: `${t[0]};${t[1]};${t[0]}`,
      dur: "0.5s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), createVNode("polygon", {
      fill: t[1],
      points: "27.599999999999998,4.8 38.4,4.8 35.4,7.8 30.599999999999998,7.8"
    }, [createVNode("animate", {
      attributeName: "fill",
      values: `${t[1]};${t[0]};${t[1]}`,
      dur: "0.5s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), createVNode("polygon", {
      fill: t[0],
      points: "9,54 9,63 7.199999999999999,66 7.199999999999999,75 7.8,78 7.8,110 8.4,110 8.4,66 9.6,66 9.6,54"
    }, [createVNode("animate", {
      attributeName: "fill",
      values: `${t[0]};${t[1]};transparent`,
      dur: "1s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)])])), createVNode("div", {
      class: "border-box-content"
    }, [renderSlot(a, "default")])]);
  }
});
var Hr = {
  install(e) {
    e.component("DvBorderBox1", tf);
  }
};
var rf = ["#fff", "rgba(255, 255, 255, 0.6)"];
var nf = defineComponent({
  props: qe,
  setup(e) {
    const r = ref(null), n = Ie(rf, toRef(e, "color")), {
      width: t,
      height: a,
      initWH: o
    } = Ce(r);
    return {
      width: t,
      height: a,
      initWH: o,
      mergedColor: n,
      borderBox2: r
    };
  },
  render() {
    const {
      $slots: e,
      backgroundColor: r,
      width: n,
      height: t,
      mergedColor: a
    } = this;
    return createVNode("div", {
      ref: "borderBox2",
      class: "dv-border-box-2"
    }, [createVNode("svg", {
      class: "dv-border-svg-container",
      width: n,
      height: t
    }, [createVNode("polygon", {
      fill: r,
      points: `
        7, 7 ${n - 7}, 7 ${n - 7}, ${t - 7} 7, ${t - 7}
      `
    }, null), createVNode("polyline", {
      stroke: a[0],
      points: `2, 2 ${n - 2} ,2 ${n - 2}, ${t - 2} 2, ${t - 2} 2, 2`
    }, null), createVNode("polyline", {
      stroke: a[1],
      points: `6, 6 ${n - 6}, 6 ${n - 6}, ${t - 6} 6, ${t - 6} 6, 6`
    }, null), createVNode("circle", {
      fill: a[0],
      cx: "11",
      cy: "11",
      r: "1"
    }, null), createVNode("circle", {
      fill: a[0],
      cx: n - 11,
      cy: "11",
      r: "1"
    }, null), createVNode("circle", {
      fill: a[0],
      cx: n - 11,
      cy: t - 11,
      r: "1"
    }, null), createVNode("circle", {
      fill: a[0],
      cx: "11",
      cy: t - 11,
      r: "1"
    }, null)]), createVNode("div", {
      class: "border-box-content"
    }, [renderSlot(e, "default")])]);
  }
});
var Vr = {
  install(e) {
    e.component("DvBorderBox2", nf);
  }
};
var af = ["#2862b7", "#2862b7"];
var of = defineComponent({
  props: qe,
  setup(e) {
    const r = ref(null), {
      width: n,
      height: t,
      initWH: a
    } = Ce(r), o = Ie(af, toRef(e, "color"));
    return {
      width: n,
      height: t,
      mergedColor: o,
      initWH: a,
      borderBox3: r
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: n,
      backgroundColor: t,
      mergedColor: a
    } = this;
    return createVNode("div", {
      ref: "borderBox3",
      class: "dv-border-box-3"
    }, [createVNode("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: n
    }, [createVNode("polygon", {
      fill: t,
      points: `
              23, 23 ${r - 24}, 23 ${r - 24}, ${n - 24} 23, ${n - 24}
            `
    }, null), createVNode("polyline", {
      class: "dv-bb3-line1",
      stroke: a[0],
      points: `4, 4 ${r - 22} ,4 ${r - 22}, ${n - 22} 4, ${n - 22} 4, 4`
    }, null), createVNode("polyline", {
      class: "dv-bb3-line2",
      stroke: a[1],
      points: `10, 10 ${r - 16}, 10 ${r - 16}, ${n - 16} 10, ${n - 16} 10, 10`
    }, null), createVNode("polyline", {
      class: "dv-bb3-line2",
      stroke: a[1],
      points: `16, 16 ${r - 10}, 16 ${r - 10}, ${n - 10} 16, ${n - 10} 16, 16`
    }, null), createVNode("polyline", {
      class: "dv-bb3-line2",
      stroke: a[1],
      points: `22, 22 ${r - 4}, 22 ${r - 4}, ${n - 4} 22, ${n - 4} 22, 22`
    }, null)]), createVNode("div", {
      class: "border-box-content"
    }, [renderSlot(e, "default")])]);
  }
});
var Ur = {
  install(e) {
    e.component("DvBorderBox3", of);
  }
};
var lf = {
  ...qe,
  reverse: {
    type: Boolean,
    default: false
  }
};
var sf = ["red", "rgba(0,0,255,0.8)"];
var uf = defineComponent({
  props: lf,
  setup(e) {
    const r = ref(null), {
      width: n,
      height: t,
      initWH: a
    } = Ce(r), o = Ie(sf, toRef(e, "color"));
    return {
      width: n,
      height: t,
      initWH: a,
      mergedColor: o,
      borderBox4: r
    };
  },
  render() {
    const {
      $slots: e,
      backgroundColor: r,
      reverse: n,
      width: t,
      height: a,
      mergedColor: o
    } = this;
    return createVNode("div", {
      ref: "borderBox4",
      class: "dv-border-box-4"
    }, [createVNode("svg", {
      class: `dv-border-svg-container ${n && "dv-reverse"}`,
      width: t,
      height: a
    }, [createVNode("polygon", {
      fill: r,
      points: `
        ${t - 15}, 22 170, 22 150, 7 40, 7 28, 21 32, 24
        16, 42 16, ${a - 32} 41, ${a - 7} ${t - 15}, ${a - 7}
      `
    }, null), createVNode("polyline", {
      class: "dv-bb4-line-1",
      stroke: o[0],
      points: `145, ${a - 5} 40, ${a - 5} 10, ${a - 35}
          10, 40 40, 5 150, 5 170, 20 ${t - 15}, 20`
    }, null), createVNode("polyline", {
      stroke: o[1],
      class: "dv-bb4-line-2",
      points: `245, ${a - 1} 36, ${a - 1} 14, ${a - 23}
          14, ${a - 100}`
    }, null), createVNode("polyline", {
      class: "dv-bb4-line-3",
      stroke: o[0],
      points: `7, ${a - 40} 7, ${a - 75}`
    }, null), createVNode("polyline", {
      class: "dv-bb4-line-4",
      stroke: o[0],
      points: "28, 24 13, 41 13, 64"
    }, null), createVNode("polyline", {
      class: "dv-bb4-line-5",
      stroke: o[0],
      points: "5, 45 5, 140"
    }, null), createVNode("polyline", {
      class: "dv-bb4-line-6",
      stroke: o[1],
      points: "14, 75 14, 180"
    }, null), createVNode("polyline", {
      class: "dv-bb4-line-7",
      stroke: o[1],
      points: "55, 11 147, 11 167, 26 250, 26"
    }, null), createVNode("polyline", {
      class: "dv-bb4-line-8",
      stroke: o[1],
      points: "158, 5 173, 16"
    }, null), createVNode("polyline", {
      class: "dv-bb4-line-9",
      stroke: o[0],
      points: `200, 17 ${t - 10}, 17`
    }, null), createVNode("polyline", {
      class: "dv-bb4-line-10",
      stroke: o[1],
      points: `385, 17 ${t - 10}, 17`
    }, null)]), createVNode("div", {
      class: "border-box-content"
    }, [renderSlot(e, "default")])]);
  }
});
var Xr = {
  install(e) {
    e.component("DvBorderBox4", uf);
  }
};
var cf = {
  ...qe,
  reverse: {
    type: Boolean,
    default: false
  }
};
var ff = ["rgba(255, 255, 255, 0.35)", "rgba(255, 255, 255, 0.20)"];
var df = defineComponent({
  props: cf,
  setup(e) {
    const r = ref(null), {
      width: n,
      height: t,
      initWH: a
    } = Ce(r), o = Ie(ff, toRef(e, "color"));
    return {
      width: n,
      height: t,
      initWH: a,
      mergedColor: o,
      borderBox5: r
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: n,
      mergedColor: t,
      backgroundColor: a,
      reverse: o
    } = this;
    return createVNode("div", {
      ref: "borderBox5",
      class: "dv-border-box-5"
    }, [createVNode("svg", {
      class: `dv-border-svg-container  ${o && "dv-reverse"}`,
      width: r,
      height: n
    }, [createVNode("polygon", {
      fill: a,
      points: `
            10, 22 ${r - 22}, 22 ${r - 22}, ${n - 86} ${r - 84}, ${n - 24} 10, ${n - 24}
          `
    }, null), createVNode("polyline", {
      class: "dv-bb5-line-1",
      stroke: t[0],
      points: `8, 5 ${r - 5}, 5 ${r - 5}, ${n - 100}
          ${r - 100}, ${n - 5} 8, ${n - 5} 8, 5`
    }, null), createVNode("polyline", {
      class: "dv-bb5-line-2",
      stroke: t[1],
      points: `3, 5 ${r - 20}, 5 ${r - 20}, ${n - 60}
          ${r - 74}, ${n - 5} 3, ${n - 5} 3, 5`
    }, null), createVNode("polyline", {
      class: "dv-bb5-line-3",
      stroke: t[1],
      points: `50, 13 ${r - 35}, 13`
    }, null), createVNode("polyline", {
      class: "dv-bb5-line-4",
      stroke: t[1],
      points: `15, 20 ${r - 35}, 20`
    }, null), createVNode("polyline", {
      class: "dv-bb5-line-5",
      stroke: t[1],
      points: `15, ${n - 20} ${r - 110}, ${n - 20}`
    }, null), createVNode("polyline", {
      class: "dv-bb5-line-6",
      stroke: t[1],
      points: `15, ${n - 13} ${r - 110}, ${n - 13}`
    }, null)]), createVNode("div", {
      class: "border-box-content"
    }, [renderSlot(e, "default")])]);
  }
});
var Qr = {
  install(e) {
    e.component("DvBorderBox5", df);
  }
};
var hf = ["rgba(255, 255, 255, 0.35)", "gray"];
var vf = defineComponent({
  props: qe,
  setup(e) {
    const r = ref(null), {
      width: n,
      height: t,
      initWH: a
    } = Ce(r), o = Ie(hf, toRef(e, "color"));
    return {
      width: n,
      height: t,
      initWH: a,
      mergedColor: o,
      borderBox6: r
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: n,
      mergedColor: t,
      backgroundColor: a
    } = this;
    return createVNode("div", {
      ref: "borderBox6",
      class: "dv-border-box-6"
    }, [createVNode("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: n
    }, [createVNode("polygon", {
      fill: a,
      points: `
            9, 7 ${r - 9}, 7 ${r - 9}, ${n - 7} 9, ${n - 7}
            `
    }, null), createVNode("circle", {
      fill: t[1],
      cx: "5",
      cy: "5",
      r: "2"
    }, null), createVNode("circle", {
      fill: t[1],
      cx: r - 5,
      cy: "5",
      r: "2"
    }, null), createVNode("circle", {
      fill: t[1],
      cx: r - 5,
      cy: n - 5,
      r: "2"
    }, null), createVNode("circle", {
      fill: t[1],
      cx: "5",
      cy: n - 5,
      r: "2"
    }, null), createVNode("polyline", {
      stroke: t[0],
      points: `10, 4 ${r - 10}, 4`
    }, null), createVNode("polyline", {
      stroke: t[0],
      points: `10, ${n - 4} ${r - 10}, ${n - 4}`
    }, null), createVNode("polyline", {
      stroke: t[0],
      points: `5, 70 5, ${n - 70}`
    }, null), createVNode("polyline", {
      stroke: t[0],
      points: `${r - 5}, 70 ${r - 5}, ${n - 70}`
    }, null), createVNode("polyline", {
      stroke: t[0],
      points: "3, 10, 3, 50"
    }, null), createVNode("polyline", {
      stroke: t[0],
      points: "7, 30 7, 80"
    }, null), createVNode("polyline", {
      stroke: t[0],
      points: `${r - 3}, 10 ${r - 3}, 50`
    }, null), createVNode("polyline", {
      stroke: t[0],
      points: `${r - 7}, 30 ${r - 7}, 80`
    }, null), createVNode("polyline", {
      stroke: t[0],
      points: `3, ${n - 10} 3, ${n - 50}`
    }, null), createVNode("polyline", {
      stroke: t[0],
      points: `7, ${n - 30} 7, ${n - 80}`
    }, null), createVNode("polyline", {
      stroke: t[0],
      points: `${r - 3}, ${n - 10} ${r - 3}, ${n - 50}`
    }, null), createVNode("polyline", {
      stroke: t[0],
      points: `${r - 7}, ${n - 30} ${r - 7}, ${n - 80}`
    }, null)]), createVNode("div", {
      class: "border-box-content"
    }, [renderSlot(e, "default")])]);
  }
});
var Yr = {
  install(e) {
    e.component("DvBorderBox6", vf);
  }
};
var pf = ["rgba(128,128,128,0.3)", "rgba(128,128,128,0.5)"];
var gf = defineComponent({
  props: qe,
  setup(e) {
    const r = ref(null), {
      width: n,
      height: t,
      initWH: a
    } = Ce(r), o = Ie(pf, toRef(e, "color"));
    return {
      width: n,
      height: t,
      initWH: a,
      mergedColor: o,
      borderBox7: r
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: n,
      mergedColor: t,
      backgroundColor: a
    } = this;
    return createVNode("div", {
      ref: "borderBox7",
      class: "dv-border-box-7",
      style: `box-shadow: inset 0 0 40px ${t[0]}; border: 1px solid ${t[0]}; background-color: ${a}`
    }, [createVNode("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: n
    }, [createVNode("polyline", {
      class: "dv-bb7-line-width-2",
      stroke: t[0],
      points: "0, 25 0, 0 25, 0"
    }, null), createVNode("polyline", {
      class: "dv-bb7-line-width-2",
      stroke: t[0],
      points: `${r - 25}, 0 ${r}, 0 ${r}, 25`
    }, null), createVNode("polyline", {
      class: "dv-bb7-line-width-2",
      stroke: t[0],
      points: `${r - 25}, ${n} ${r}, ${n} ${r}, ${n - 25}`
    }, null), createVNode("polyline", {
      class: "dv-bb7-line-width-2",
      stroke: t[0],
      points: `0, ${n - 25} 0, ${n} 25, ${n}`
    }, null), createVNode("polyline", {
      class: "dv-bb7-line-width-5",
      stroke: t[1],
      points: "0, 10 0, 0 10, 0"
    }, null), createVNode("polyline", {
      class: "dv-bb7-line-width-5",
      stroke: t[1],
      points: `${r - 10}, 0 ${r}, 0 ${r}, 10`
    }, null), createVNode("polyline", {
      class: "dv-bb7-line-width-5",
      stroke: t[1],
      points: `${r - 10}, ${n} ${r}, ${n} ${r}, ${n - 10}`
    }, null), createVNode("polyline", {
      class: "dv-bb7-line-width-5",
      stroke: t[1],
      points: `0, ${n - 10} 0, ${n} 10, ${n}`
    }, null)]), createVNode("div", {
      class: "border-box-content"
    }, [renderSlot(e, "default")])]);
  }
});
var Kr = {
  install(e) {
    e.component("DvBorderBox7", gf);
  }
};
var mf = {
  ...qe,
  reverse: {
    type: Boolean,
    default: false
  },
  dur: {
    type: Number,
    default: 3
  }
};
var yf = ["#235fa7", "#4fd2dd"];
var bf = defineComponent({
  props: mf,
  setup(e) {
    const r = He(), n = ref(null), t = reactive({
      path: `border-box-8-path-${r}`,
      gradient: `border-box-8-gradient-${r}`,
      mask: `border-box-8-mask-${r}`
    }), {
      width: a,
      height: o,
      initWH: l
    } = Ce(n), C = computed(() => (a.value + o.value - 5) * 2), x = computed(() => e.reverse ? `M 2.5, 2.5 L 2.5, ${o.value - 2.5} L ${a.value - 2.5}, ${o.value - 2.5} L ${a.value - 2.5}, 2.5 L 2.5, 2.5` : `M2.5, 2.5 L${a.value - 2.5}, 2.5 L${a.value - 2.5}, ${o.value - 2.5} L2.5, ${o.value - 2.5} L2.5, 2.5`), I = Ie(yf, toRef(e, "color"));
    return {
      width: a,
      height: o,
      initWH: l,
      state: t,
      mergedColor: I,
      pathD: x,
      length: C,
      borderBox8: n
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: n,
      state: t,
      mergedColor: a,
      pathD: o,
      length: l,
      backgroundColor: C,
      dur: x
    } = this;
    return createVNode("div", {
      ref: "borderBox8",
      class: "dv-border-box-8"
    }, [createVNode("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: n
    }, [createVNode("defs", null, [createVNode("path", {
      id: t.path,
      d: o,
      fill: "transparent"
    }, null), createVNode("radialGradient", {
      id: t.gradient,
      cx: "50%",
      cy: "50%",
      r: "50%"
    }, [createVNode("stop", {
      offset: "0%",
      "stop-color": "#fff",
      "stop-opacity": "1"
    }, null), createVNode("stop", {
      offset: "100%",
      "stop-color": "#fff",
      "stop-opacity": "0"
    }, null)]), createVNode("mask", {
      id: t.mask
    }, [createVNode("circle", {
      cx: "0",
      cy: "0",
      r: "150",
      fill: `url(#${t.gradient})`
    }, [h("animateMotion", {
      dur: `${x}s`,
      path: o,
      rotate: "auto",
      repeatCount: "indefinite"
    })])])]), createVNode("polygon", {
      fill: C,
      points: `5, 5 ${r - 5}, 5 ${r - 5} ${n - 5} 5, ${n - 5}`
    }, null), createVNode("use", {
      stroke: a[0],
      "stroke-width": "1",
      "xlink:href": `#${t.path}`
    }, null), createVNode("use", {
      stroke: a[1],
      "stroke-width": "3",
      "xlink:href": `#${t.path}`,
      mask: `url(#${t.mask})`
    }, [createVNode("animate", {
      attributeName: "stroke-dasharray",
      from: `0, ${l}`,
      to: `${l}, 0`,
      dur: `${x}s`,
      repeatCount: "indefinite"
    }, null)])]), createVNode("div", {
      class: "border-box-content"
    }, [renderSlot(e, "default")])]);
  }
});
var Jr = {
  install(e) {
    e.component("DvBorderBox8", bf);
  }
};
var Cf = ["#11eefd", "#0078d2"];
var xf = defineComponent({
  props: qe,
  setup(e) {
    const r = He(), n = ref(null), {
      width: t,
      height: a,
      initWH: o
    } = Ce(n), l = reactive({
      gradientId: `border-box-9-gradient-${r}`,
      maskId: `border-box-9-mask-${r}`
    }), C = Ie(Cf, toRef(e, "color"));
    return {
      width: t,
      height: a,
      initWH: o,
      state: l,
      mergedColor: C,
      borderBox9: n
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: n,
      state: t,
      mergedColor: a,
      backgroundColor: o
    } = this;
    return createVNode("div", {
      ref: "borderBox9",
      class: "dv-border-box-9"
    }, [createVNode("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: n
    }, [createVNode("defs", null, [createVNode("linearGradient", {
      id: t.gradientId,
      x1: "0%",
      y1: "0%",
      x2: "100%",
      y2: "100%"
    }, [createVNode("animate", {
      attributeName: "x1",
      values: "0%;100%;0%",
      dur: "10s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null), createVNode("animate", {
      attributeName: "x2",
      values: "100%;0%;100%",
      dur: "10s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null), createVNode("stop", {
      offset: "0%",
      "stop-color": a[0]
    }, [createVNode("animate", {
      attributeName: "stop-color",
      values: `${a[0]};${a[1]};${a[0]}`,
      dur: "10s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), createVNode("stop", {
      offset: "100%",
      "stop-color": a[1]
    }, [createVNode("animate", {
      attributeName: "stop-color",
      values: `${a[1]};${a[0]};${a[1]}`,
      dur: "10s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)])]), createVNode("mask", {
      id: t.maskId
    }, [createVNode("polyline", {
      stroke: "#fff",
      "stroke-width": "3",
      fill: "transparent",
      points: `8, ${n * 0.4} 8, 3, ${r * 0.4 + 7}, 3`
    }, null), createVNode("polyline", {
      fill: "#fff",
      points: `8, ${n * 0.15} 8, 3, ${r * 0.1 + 7}, 3
              ${r * 0.1}, 8 14, 8 14, ${n * 0.15 - 7}
            `
    }, null), createVNode("polyline", {
      stroke: "#fff",
      "stroke-width": "3",
      fill: "transparent",
      points: `${r * 0.5}, 3 ${r - 3}, 3, ${r - 3}, ${n * 0.25}`
    }, null), createVNode("polyline", {
      fill: "#fff",
      points: `
              ${r * 0.52}, 3 ${r * 0.58}, 3
              ${r * 0.58 - 7}, 9 ${r * 0.52 + 7}, 9
            `
    }, null), createVNode("polyline", {
      fill: "#fff",
      points: `
              ${r * 0.9}, 3 ${r - 3}, 3 ${r - 3}, ${n * 0.1}
              ${r - 9}, ${n * 0.1 - 7} ${r - 9}, 9 ${r * 0.9 + 7}, 9
            `
    }, null), createVNode("polyline", {
      stroke: "#fff",
      "stroke-width": "3",
      fill: "transparent",
      points: `8, ${n * 0.5} 8, ${n - 3} ${r * 0.3 + 7}, ${n - 3}`
    }, null), createVNode("polyline", {
      fill: "#fff",
      points: `
              8, ${n * 0.55} 8, ${n * 0.7}
              2, ${n * 0.7 - 7} 2, ${n * 0.55 + 7}
            `
    }, null), createVNode("polyline", {
      stroke: "#fff",
      "stroke-width": "3",
      fill: "transparent",
      points: `${r * 0.35}, ${n - 3} ${r - 3}, ${n - 3} ${r - 3}, ${n * 0.35}`
    }, null), createVNode("polyline", {
      fill: "#fff",
      points: `
              ${r * 0.92}, ${n - 3} ${r - 3}, ${n - 3} ${r - 3}, ${n * 0.8}
              ${r - 9}, ${n * 0.8 + 7} ${r - 9}, ${n - 9} ${r * 0.92 + 7}, ${n - 9}
            `
    }, null)])]), createVNode("polygon", {
      fill: o,
      points: `
              15, 9 ${r * 0.1 + 1}, 9 ${r * 0.1 + 4}, 6 ${r * 0.52 + 2}, 6
              ${r * 0.52 + 6}, 10 ${r * 0.58 - 7}, 10 ${r * 0.58 - 2}, 6
              ${r * 0.9 + 2}, 6 ${r * 0.9 + 6}, 10 ${r - 10}, 10 ${r - 10}, ${n * 0.1 - 6}
              ${r - 6}, ${n * 0.1 - 1} ${r - 6}, ${n * 0.8 + 1} ${r - 10}, ${n * 0.8 + 6}
              ${r - 10}, ${n - 10} ${r * 0.92 + 7}, ${n - 10}  ${r * 0.92 + 2}, ${n - 6}
              11, ${n - 6} 11, ${n * 0.15 - 2} 15, ${n * 0.15 - 7}
            `
    }, null), createVNode("rect", {
      x: "0",
      y: "0",
      width: r,
      height: n,
      fill: `url(#${t.gradientId})`,
      mask: `url(#${t.maskId})`
    }, null)]), createVNode("div", {
      class: "border-box-content"
    }, [renderSlot(e, "default")])]);
  }
});
var Zr = {
  install(e) {
    e.component("DvBorderBox9", xf);
  }
};
var $f = ["left-top", "right-top", "left-bottom", "right-bottom"];
var _f = ["#1d48c4", "#d3e1f8"];
var Pf = defineComponent({
  props: qe,
  setup(e) {
    const r = ref(null), {
      width: n,
      height: t,
      initWH: a
    } = Ce(r), o = Ie(_f, toRef(e, "color"));
    return {
      width: n,
      height: t,
      initWH: a,
      mergedColor: o,
      borderBox10: r
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: n,
      mergedColor: t,
      backgroundColor: a
    } = this;
    return createVNode("div", {
      ref: "borderBox10",
      class: "dv-border-box-10",
      style: `box-shadow: inset 0 0 25px 3px ${t[0]}`
    }, [createVNode("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: n
    }, [createVNode("polygon", {
      fill: a,
      points: `
              4, 0 ${r - 4}, 0 ${r}, 4 ${r}, ${n - 4} ${r - 4}, ${n}
              4, ${n} 0, ${n - 4} 0, 4
            `
    }, null)]), $f.map((o) => createVNode("svg", {
      width: "150px",
      height: "150px",
      class: `${o} dv-border-svg-container`
    }, [createVNode("polygon", {
      fill: t[1],
      points: "40, 0 5, 0 0, 5 0, 16 3, 19 3, 7 7, 3 35, 3"
    }, null)])), createVNode("div", {
      class: "border-box-content"
    }, [renderSlot(e, "default")])]);
  }
});
var en = {
  install(e) {
    e.component("DvBorderBox10", Pf);
  }
};
var wf = {
  ...qe,
  title: {
    type: String,
    default: ""
  },
  titleWidth: {
    type: Number,
    default: 250
  },
  animate: {
    type: Boolean,
    default: true
  }
};
var ga = ["#8aaafb", "#1f33a2"];
var kf = defineComponent({
  props: wf,
  setup(e) {
    const r = He(), n = ref(null), {
      width: t,
      height: a,
      initWH: o
    } = Ce(n), l = ref(`border-box-11-filterId-${r}`), C = Ie(ga, toRef(e, "color"));
    return {
      width: t,
      height: a,
      initWH: o,
      filterId: l,
      mergedColor: C,
      borderBox11: n
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: n,
      filterId: t,
      mergedColor: a,
      backgroundColor: o,
      title: l,
      titleWidth: C,
      animate: x
    } = this;
    return createVNode("div", {
      ref: "borderBox11",
      class: "dv-border-box-11"
    }, [createVNode("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: n
    }, [createVNode("defs", null, [createVNode("filter", {
      id: t,
      height: "150%",
      width: "150%",
      x: "-25%",
      y: "-25%"
    }, [createVNode("feMorphology", {
      operator: "dilate",
      radius: "2",
      in: "SourceAlpha",
      result: "thicken"
    }, null), createVNode("feGaussianBlur", {
      in: "thicken",
      stdDeviation: "3",
      result: "blurred"
    }, null), createVNode("feFlood", {
      "flood-color": a[1],
      result: "glowColor"
    }, null), createVNode("feComposite", {
      in: "glowColor",
      in2: "blurred",
      operator: "in",
      result: "softGlowColored"
    }, null), createVNode("feMerge", null, [createVNode("feMergeNode", {
      in: "softGlowColored"
    }, null), createVNode("feMergeNode", {
      in: "SourceGraphic"
    }, null)])])]), createVNode("polygon", {
      fill: o,
      points: `
        20, 32 ${r * 0.5 - C / 2}, 32 ${r * 0.5 - C / 2 + 20}, 53
        ${r * 0.5 + C / 2 - 20}, 53 ${r * 0.5 + C / 2}, 32
        ${r - 20}, 32 ${r - 8}, 48 ${r - 8}, ${n - 25} ${r - 20}, ${n - 8}
        20, ${n - 8} 8, ${n - 25} 8, 50
      `
    }, null), createVNode("polyline", {
      stroke: a[0],
      filter: `url(#${t})`,
      points: `
          ${(r - C) / 2}, 30
          20, 30 7, 50 7, ${50 + (n - 167) / 2}
          13, ${55 + (n - 167) / 2} 13, ${135 + (n - 167) / 2}
          7, ${140 + (n - 167) / 2} 7, ${n - 27}
          20, ${n - 7} ${r - 20}, ${n - 7} ${r - 7}, ${n - 27}
          ${r - 7}, ${140 + (n - 167) / 2} ${r - 13}, ${135 + (n - 167) / 2}
          ${r - 13}, ${55 + (n - 167) / 2} ${r - 7}, ${50 + (n - 167) / 2}
          ${r - 7}, 50 ${r - 20}, 30 ${(r + C) / 2}, 30
          ${(r + C) / 2 - 20}, 7 ${(r - C) / 2 + 20}, 7
          ${(r - C) / 2}, 30 ${(r - C) / 2 + 20}, 52
          ${(r + C) / 2 - 20}, 52 ${(r + C) / 2}, 30
        `
    }, null), createVNode("polygon", {
      stroke: a[0],
      fill: "transparent",
      points: `
          ${(r + C) / 2 - 5}, 30 ${(r + C) / 2 - 21}, 11
          ${(r + C) / 2 - 27}, 11 ${(r + C) / 2 - 8}, 34
        `
    }, null), createVNode("polygon", {
      stroke: a[0],
      fill: "transparent",
      points: `
          ${(r - C) / 2 + 5}, 30 ${(r - C) / 2 + 22}, 49
          ${(r - C) / 2 + 28}, 49 ${(r - C) / 2 + 8}, 26
        `
    }, null), createVNode("polygon", {
      stroke: a[0],
      fill: De(a[1] || ga[1], 30),
      filter: `url(#${t})`,
      points: `
          ${(r + C) / 2 - 11}, 37 ${(r + C) / 2 - 32}, 11
          ${(r - C) / 2 + 23}, 11 ${(r - C) / 2 + 11}, 23
          ${(r - C) / 2 + 33}, 49 ${(r + C) / 2 - 22}, 49
        `
    }, null), createVNode("polygon", {
      filter: `url(#${t})`,
      fill: a[0],
      opacity: "1",
      points: `
          ${(r - C) / 2 - 10}, 37 ${(r - C) / 2 - 31}, 37
          ${(r - C) / 2 - 25}, 46 ${(r - C) / 2 - 4}, 46
        `
    }, [x && createVNode("animate", {
      attributeName: "opacity",
      values: "1;0.7;1",
      dur: "2s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), createVNode("polygon", {
      filter: `url(#${t})`,
      fill: a[0],
      opacity: "0.7",
      points: `
          ${(r - C) / 2 - 40}, 37 ${(r - C) / 2 - 61}, 37
          ${(r - C) / 2 - 55}, 46 ${(r - C) / 2 - 34}, 46
        `
    }, [x && createVNode("animate", {
      attributeName: "opacity",
      values: "0.7;0.4;0.7",
      dur: "2s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), createVNode("polygon", {
      filter: `url(#${t})`,
      fill: a[0],
      opacity: "0.5",
      points: `
          ${(r - C) / 2 - 70}, 37 ${(r - C) / 2 - 91}, 37
          ${(r - C) / 2 - 85}, 46 ${(r - C) / 2 - 64}, 46
        `
    }, [x && createVNode("animate", {
      attributeName: "opacity",
      values: "0.5;0.2;0.5",
      dur: "2s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), createVNode("polygon", {
      filter: `url(#${t})`,
      fill: a[0],
      opacity: "1",
      points: `
          ${(r + C) / 2 + 30}, 37 ${(r + C) / 2 + 9}, 37
          ${(r + C) / 2 + 3}, 46 ${(r + C) / 2 + 24}, 46
        `
    }, [x && createVNode("animate", {
      attributeName: "opacity",
      values: "1;0.7;1",
      dur: "2s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), createVNode("polygon", {
      filter: `url(#${t})`,
      fill: a[0],
      opacity: "0.7",
      points: `
          ${(r + C) / 2 + 60}, 37 ${(r + C) / 2 + 39}, 37
          ${(r + C) / 2 + 33}, 46 ${(r + C) / 2 + 54}, 46
        `
    }, [x && createVNode("animate", {
      attributeName: "opacity",
      values: "0.7;0.4;0.7",
      dur: "2s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), createVNode("polygon", {
      filter: `url(#${t})`,
      fill: a[0],
      opacity: "0.5",
      points: `
          ${(r + C) / 2 + 90}, 37 ${(r + C) / 2 + 69}, 37
          ${(r + C) / 2 + 63}, 46 ${(r + C) / 2 + 84}, 46
        `
    }, [x && createVNode("animate", {
      attributeName: "opacity",
      values: "0.5;0.2;0.5",
      dur: "2s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), createVNode("text", {
      class: "dv-border-box-11-title",
      x: `${r / 2}`,
      y: "32",
      fill: "#fff",
      "font-size": "18",
      "text-anchor": "middle",
      "dominant-baseline": "middle"
    }, [l]), createVNode("polygon", {
      fill: a[0],
      filter: `url(#${t})`,
      points: `
          7, ${53 + (n - 167) / 2} 11, ${57 + (n - 167) / 2}
          11, ${133 + (n - 167) / 2} 7, ${137 + (n - 167) / 2}
        `
    }, null), createVNode("polygon", {
      fill: a[0],
      filter: `url(#${t})`,
      points: `
          ${r - 7}, ${53 + (n - 167) / 2} ${r - 11}, ${57 + (n - 167) / 2}
          ${r - 11}, ${133 + (n - 167) / 2} ${r - 7}, ${137 + (n - 167) / 2}
        `
    }, null)]), createVNode("div", {
      class: "border-box-content"
    }, [renderSlot(e, "default")])]);
  }
});
var tn = {
  install(e) {
    e.component("DvBorderBox11", kf);
  }
};
var dt = ["#2e6099", "#7ce7fd"];
var Af = defineComponent({
  props: qe,
  setup(e) {
    const r = He(), n = ref(null), {
      width: t,
      height: a,
      initWH: o
    } = Ce(n), l = ref(`borderr-box-12-filterId-${r}`), C = Ie(dt, toRef(e, "color"));
    return {
      width: t,
      height: a,
      filterId: l,
      mergedColor: C,
      initWH: o,
      borderBox12: n
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: n,
      filterId: t,
      mergedColor: a,
      backgroundColor: o
    } = this;
    return createVNode("div", {
      ref: "borderBox12",
      class: "dv-border-box-12"
    }, [createVNode("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: n
    }, [createVNode("defs", null, [createVNode("filter", {
      id: t,
      height: "150%",
      width: "150%",
      x: "-25%",
      y: "-25%"
    }, [createVNode("feMorphology", {
      operator: "dilate",
      radius: "1",
      in: "SourceAlpha",
      result: "thicken"
    }, null), createVNode("feGaussianBlur", {
      in: "thicken",
      stdDeviation: "2",
      result: "blurred"
    }, null), createVNode("feFlood", {
      "flood-color": De(a[1] || dt[1], 70),
      result: "glowColor"
    }, [createVNode("animate", {
      attributeName: "flood-color",
      values: `
                ${De(a[1] || dt[1], 70)};
                ${De(a[1] || dt[1], 30)};
                ${De(a[1] || dt[1], 70)};
              `,
      dur: "3s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), createVNode("feComposite", {
      in: "glowColor",
      in2: "blurred",
      operator: "in",
      result: "softGlowColored"
    }, null), createVNode("feMerge", null, [createVNode("feMergeNode", {
      in: "softGlowColored"
    }, null), createVNode("feMergeNode", {
      in: "SourceGraphic"
    }, null)])])]), r && n && createVNode("path", {
      fill: o,
      "stroke-width": "2",
      stroke: a[0],
      d: `
          M15 5 L ${r - 15} 5 Q ${r - 5} 5, ${r - 5} 15
          L ${r - 5} ${n - 15} Q ${r - 5} ${n - 5}, ${r - 15} ${n - 5}
          L 15, ${n - 5} Q 5 ${n - 5} 5 ${n - 15} L 5 15
          Q 5 5 15 5
        `
    }, null), createVNode("path", {
      "stroke-width": "2",
      fill: "transparent",
      "stroke-linecap": "round",
      filter: `url(#${t})`,
      stroke: a[1],
      d: "M 20 5 L 15 5 Q 5 5 5 15 L 5 20"
    }, null), createVNode("path", {
      "stroke-width": "2",
      fill: "transparent",
      "stroke-linecap": "round",
      filter: `url(#${t})`,
      stroke: a[1],
      d: `M ${r - 20} 5 L ${r - 15} 5 Q ${r - 5} 5 ${r - 5} 15 L ${r - 5} 20`
    }, null), createVNode("path", {
      "stroke-width": "2",
      fill: "transparent",
      "stroke-linecap": "round",
      filter: `url(#${t})`,
      stroke: a[1],
      d: `
          M ${r - 20} ${n - 5} L ${r - 15} ${n - 5}
          Q ${r - 5} ${n - 5} ${r - 5} ${n - 15}
          L ${r - 5} ${n - 20}
          `
    }, null), createVNode("path", {
      "stroke-width": "2",
      fill: "transparent",
      "stroke-linecap": "round",
      filter: `url(#${t})`,
      stroke: a[1],
      d: `
          M 20 ${n - 5} L 15 ${n - 5}
          Q 5 ${n - 5} 5 ${n - 15}
          L 5 ${n - 20}
          `
    }, null)]), createVNode("div", {
      class: "border-box-content"
    }, [renderSlot(e, "default")])]);
  }
});
var rn = {
  install(e) {
    e.component("DvBorderBox12", Af);
  }
};
var Lf = ["#6586ec", "#2cf7fe"];
var Sf = defineComponent({
  props: qe,
  setup(e) {
    const r = ref(null), {
      width: n,
      height: t,
      initWH: a
    } = Ce(r), o = Ie(Lf, toRef(e, "color"));
    return {
      width: n,
      height: t,
      mergedColor: o,
      initWH: a,
      borderBox13: r
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: n,
      mergedColor: t,
      backgroundColor: a
    } = this;
    return createVNode("div", {
      ref: "borderBox13",
      class: "dv-border-box-13"
    }, [createVNode("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: n
    }, [createVNode("path", {
      fill: a,
      stroke: t[0],
      d: `
          M 5 20 L 5 10 L 12 3  L 60 3 L 68 10
          L ${r - 20} 10 L ${r - 5} 25
          L ${r - 5} ${n - 5} L 20 ${n - 5}
          L 5 ${n - 20} L 5 20
        `
    }, null), createVNode("path", {
      fill: "transparent",
      "stroke-width": "3",
      "stroke-linecap": "round",
      "stroke-dasharray": "10, 5",
      stroke: t[0],
      d: "M 16 9 L 61 9"
    }, null), createVNode("path", {
      fill: "transparent",
      stroke: t[1],
      d: "M 5 20 L 5 10 L 12 3  L 60 3 L 68 10"
    }, null), createVNode("path", {
      fill: "transparent",
      stroke: t[1],
      d: `M ${r - 5} ${n - 30} L ${r - 5} ${n - 5} L ${r - 30} ${n - 5}`
    }, null)]), createVNode("div", {
      class: "border-box-content"
    }, [renderSlot(e, "default")])]);
  }
});
var nn = {
  install(e) {
    e.component("DvBorderBox13", Sf);
  }
};
var Mf = {
  install(e) {
    var r, n, t, a, o, l, C, x, I, W, U, F, S, d, T, E, q, N, g, _, f, G, k, y, $, c, R, L, v, V, X, Z, u, m, h2, P, z, K, ee;
    (r = zt.install) == null || r.call(zt, e), (n = qt.install) == null || n.call(qt, e), (t = It.install) == null || t.call(It, e), (a = yr.install) == null || a.call(yr, e), (o = br.install) == null || o.call(br, e), (l = Cr.install) == null || l.call(Cr, e), (C = xr.install) == null || C.call(xr, e), (x = $r.install) == null || x.call($r, e), (I = _r.install) == null || I.call(_r, e), (W = Ar.install) == null || W.call(Ar, e), (U = Lr.install) == null || U.call(Lr, e), (F = Sr.install) == null || F.call(Sr, e), (S = Or.install) == null || S.call(Or, e), (d = Gr.install) == null || d.call(Gr, e), (T = Mr.install) == null || T.call(Mr, e), (E = Rr.install) == null || E.call(Rr, e), (q = Dr.install) == null || q.call(Dr, e), (N = Tr.install) == null || N.call(Tr, e), (g = Br.install) == null || g.call(Br, e), (_ = Nr.install) == null || _.call(Nr, e), (f = Wr.install) == null || f.call(Wr, e), (G = Er.install) == null || G.call(Er, e), (k = jr.install) == null || k.call(jr, e), (y = zr.install) == null || y.call(zr, e), ($ = qr.install) == null || $.call(qr, e), (c = Ir.install) == null || c.call(Ir, e), (R = Hr.install) == null || R.call(Hr, e), (L = Vr.install) == null || L.call(Vr, e), (v = Ur.install) == null || v.call(Ur, e), (V = Xr.install) == null || V.call(Xr, e), (X = Qr.install) == null || X.call(Qr, e), (Z = Yr.install) == null || Z.call(Yr, e), (u = Kr.install) == null || u.call(Kr, e), (m = Jr.install) == null || m.call(Jr, e), (h2 = Zr.install) == null || h2.call(Zr, e), (P = en.install) == null || P.call(en, e), (z = tn.install) == null || z.call(tn, e), (K = rn.install) == null || K.call(rn, e), (ee = nn.install) == null || ee.call(nn, e);
  }
};
export {
  Us as ActiveRingChart,
  Sr as ActiveRingChartPlugin,
  tf as BorderBox1,
  Pf as BorderBox10,
  en as BorderBox10Plugin,
  kf as BorderBox11,
  tn as BorderBox11Plugin,
  Af as BorderBox12,
  rn as BorderBox12Plugin,
  Sf as BorderBox13,
  nn as BorderBox13Plugin,
  Hr as BorderBox1Plugin,
  nf as BorderBox2,
  Vr as BorderBox2Plugin,
  of as BorderBox3,
  Ur as BorderBox3Plugin,
  uf as BorderBox4,
  Xr as BorderBox4Plugin,
  df as BorderBox5,
  Qr as BorderBox5Plugin,
  vf as BorderBox6,
  Yr as BorderBox6Plugin,
  gf as BorderBox7,
  Kr as BorderBox7Plugin,
  bf as BorderBox8,
  Jr as BorderBox8Plugin,
  xf as BorderBox9,
  Zr as BorderBox9Plugin,
  Wi as Button,
  zt as ButtonPlugin,
  zs as CapsuleChart,
  Lr as CapsuleChartPlugin,
  Ds as Charts,
  Ar as ChartsPlugin,
  oo as ConicalColumnChart,
  qt as ConicalColumnChartPlugin,
  ou as Decoration1,
  Pc as Decoration10,
  zr as Decoration10Plugin,
  Dc as Decoration11,
  qr as Decoration11Plugin,
  Jc as Decoration12,
  Ir as Decoration12Plugin,
  Mr as Decoration1Plugin,
  du as Decoration2,
  Rr as Decoration2Plugin,
  gu as Decoration3,
  Dr as Decoration3Plugin,
  Cu as Decoration4,
  Tr as Decoration4Plugin,
  ku as Decoration5,
  Br as Decoration5Plugin,
  Gu as Decoration6,
  Nr as Decoration6Plugin,
  Wu as Decoration7,
  Wr as Decoration7Plugin,
  Iu as Decoration8,
  Er as Decoration8Plugin,
  tc as Decoration9,
  jr as Decoration9Plugin,
  Ra as DigitalFlop,
  Or as DigitalFlopPlugin,
  Il as FlylineChart,
  yl as FlylineChartEnhanced,
  Cr as FlylineChartEnhancedPlugin,
  xr as FlylineChartPlugin,
  Xs as FullScreenContainer,
  Gr as FullScreenContainerPlugin,
  Uo as Loading,
  br as LoadingPlugin,
  po as PercentPond,
  It as PercentPondPlugin,
  ns as ScrollBoard,
  _r as ScrollBoardPlugin,
  es as ScrollRankingBoard,
  $r as ScrollRankingBoardPlugin,
  jo as WaterLevelPond,
  yr as WaterLevelPondPlugin,
  Mf as default
};
//# sourceMappingURL=@kjgl77_datav-vue3.js.map
